"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[32579],{58945:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var s=t(74848),i=t(28453),n=t(11470),d=t(19365);const a={title:"SpdrParentBrkrEvent"},l="Schema: SpdrParentBrkrEvent (ID: 4065)",c={id:"MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrEvent",title:"SpdrParentBrkrEvent",description:"SpdrParentBrkrEvent records are published when a new or cxl/replace parent order arrives causes a broker to begin working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.",source:"@site/docs/MessageSchemas/Schema/Topics/3985-parent-orders/SpdrParentBrkrEvent.md",sourceDirName:"MessageSchemas/Schema/Topics/3985-parent-orders",slug:"/MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrEvent",permalink:"/docs/next/MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrEvent",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"SpdrParentBrkrEvent"},sidebar:"messageSchemasSidebar",previous:{title:"SpdrParentBrkrDetail",permalink:"/docs/next/MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrDetail"},next:{title:"SpdrParentBrkrState",permalink:"/docs/next/MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrState"}},o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"schema-spdrparentbrkrevent-id-4065",children:["Schema: SpdrParentBrkrEvent ",(0,s.jsx)("span",{className:"small-text",children:"(ID: 4065)"})]}),"\n",(0,s.jsx)(r.p,{children:"SpdrParentBrkrEvent records are published when a new or cxl/replace parent order arrives causes a broker to begin working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders."}),"\n",(0,s.jsx)(r.h3,{id:"metadata",children:"METADATA"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Attribute"}),(0,s.jsx)(r.th,{children:"Value"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Topic"}),(0,s.jsx)(r.td,{children:"3985-parent-orders"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"MLink Token"}),(0,s.jsx)(r.td,{children:"ClientTrading"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"SRSE Product"}),(0,s.jsx)(r.td,{children:"SRTrade"})]})]})]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Note:"})," The symbol ",(0,s.jsx)(r.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"body",children:"BODY"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"#"}),(0,s.jsx)(r.th,{children:"Field"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Comment"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"10="}),(0,s.jsx)(r.td,{children:"parentNumber"}),(0,s.jsx)(r.td,{children:"long"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"11="}),(0,s.jsx)(r.td,{children:"recType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/EventRecType",children:"enum : EventRecType"})}),(0,s.jsx)(r.td,{children:"type of record [New,Modify,Replace,Close,Reject]"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"100"}),(0,s.jsx)(r.td,{children:"secKey"}),(0,s.jsx)(r.td,{children:"OptionKey"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"103"}),(0,s.jsx)(r.td,{children:"secType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"106"}),(0,s.jsx)(r.td,{children:"accnt"}),(0,s.jsx)(r.td,{children:"string(16)"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"109"}),(0,s.jsx)(r.td,{children:"spdrSource"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrSource",children:"enum : SpdrSource"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"112"}),(0,s.jsx)(r.td,{children:"groupingCode"}),(0,s.jsx)(r.td,{children:"long"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"115"}),(0,s.jsx)(r.td,{children:"orderSide"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"118"}),(0,s.jsx)(r.td,{children:"clientFirm"}),(0,s.jsx)(r.td,{children:"string(16)"}),(0,s.jsx)(r.td,{children:"SR client firm code"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"121"}),(0,s.jsx)(r.td,{children:"altAccnt"}),(0,s.jsx)(r.td,{children:"text1"}),(0,s.jsx)(r.td,{children:'alternate (client assigned) "long" account string (optional)'})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"124"}),(0,s.jsx)(r.td,{children:"altUserName"}),(0,s.jsx)(r.td,{children:"string(24)"}),(0,s.jsx)(r.td,{children:"alternate (client assigned) user name (optional)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"127"}),(0,s.jsx)(r.td,{children:"eventNumber"}),(0,s.jsx)(r.td,{children:"ushort"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"130"}),(0,s.jsx)(r.td,{children:"stageType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrStageType",children:"enum : SpdrStageType"})}),(0,s.jsx)(r.td,{children:"parent is a staged order [ToolVisible]"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"371"}),(0,s.jsx)(r.td,{children:"stageReview"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/StageReview",children:"enum : StageReview"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"133"}),(0,s.jsx)(r.td,{children:"baseParentNumber"}),(0,s.jsx)(r.td,{children:"long"}),(0,s.jsx)(r.td,{children:"SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"136"}),(0,s.jsx)(r.td,{children:"prevParentNumber"}),(0,s.jsx)(r.td,{children:"long"}),(0,s.jsx)(r.td,{children:"SPDR order number (order being cancelled/replaced) (zero if none)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"139"}),(0,s.jsx)(r.td,{children:"engineName"}),(0,s.jsx)(r.td,{children:"text1"}),(0,s.jsx)(r.td,{children:"server stripe"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"142"}),(0,s.jsx)(r.td,{children:"ticker"}),(0,s.jsx)(r.td,{children:"TickerKey"}),(0,s.jsx)(r.td,{children:"SpiderRock underlier stock key"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"145"}),(0,s.jsx)(r.td,{children:"spdrBrokerStatus"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrBrokerStatus",children:"enum : SpdrBrokerStatus"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"148"}),(0,s.jsx)(r.td,{children:"spdrOrderStatus"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrOrderStatus",children:"enum : SpdrOrderStatus"})}),(0,s.jsx)(r.td,{children:"parent order status"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"151"}),(0,s.jsx)(r.td,{children:"spdrCloseReason"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrCloseReason",children:"enum : SpdrCloseReason"})}),(0,s.jsx)(r.td,{children:"parent order close reason (if closed)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"154"}),(0,s.jsx)(r.td,{children:"spdrRejectReason"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrRejectReason",children:"enum : SpdrRejectReason"})}),(0,s.jsx)(r.td,{children:"parent order reject reason (if any)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"157"}),(0,s.jsx)(r.td,{children:"spdrComment"}),(0,s.jsx)(r.td,{children:"text1"}),(0,s.jsx)(r.td,{children:"additional detail (close/reject reason; last child order error)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"178"}),(0,s.jsx)(r.td,{children:"bidPrc"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"bid (nbbo) price @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"181"}),(0,s.jsx)(r.td,{children:"askPrc"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"ask (nbbo) price @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"184"}),(0,s.jsx)(r.td,{children:"bidIVol"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"bid (nbbo) ivol @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"187"}),(0,s.jsx)(r.td,{children:"askIVol"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"ask (nbbo) ivol @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"190"}),(0,s.jsx)(r.td,{children:"bidSize"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"bid size (nbbo cum) @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"193"}),(0,s.jsx)(r.td,{children:"askSize"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"ask size (nbbo cum) @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"196"}),(0,s.jsx)(r.td,{children:"uBid"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"underlier bid price @ record publish (options only)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"199"}),(0,s.jsx)(r.td,{children:"uAsk"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"underlier ask price @ record publish (options only)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"202"}),(0,s.jsx)(r.td,{children:"surfacePrc"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface price @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"205"}),(0,s.jsx)(r.td,{children:"surfaceVol"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface volatility @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"208"}),(0,s.jsx)(r.td,{children:"surfaceYrs"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"211"}),(0,s.jsx)(r.td,{children:"surfaceSDiv"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"214"}),(0,s.jsx)(r.td,{children:"surfaceRate"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"217"}),(0,s.jsx)(r.td,{children:"surfaceUPrc"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"220"}),(0,s.jsx)(r.td,{children:"surfaceDe"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"223"}),(0,s.jsx)(r.td,{children:"surfaceGa"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"226"}),(0,s.jsx)(r.td,{children:"surfaceTh"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"229"}),(0,s.jsx)(r.td,{children:"surfaceVe"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"232"}),(0,s.jsx)(r.td,{children:"surfaceRo"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"235"}),(0,s.jsx)(r.td,{children:"surfacePh"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"SR surface calc value @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"238"}),(0,s.jsx)(r.td,{children:"arriveNbboSize"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"size of the single largest exchange @ parent order arrival"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"241"}),(0,s.jsx)(r.td,{children:"arriveNbboExch"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/OptExch",children:"enum : OptExch"})}),(0,s.jsx)(r.td,{children:"exchange representing largest size @ order arrival"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"244"}),(0,s.jsx)(r.td,{children:"arriveCumSize"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"cum size of all exchanges at NBBO price @ parent order arrival"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"247"}),(0,s.jsx)(r.td,{children:"arriveNumExch"}),(0,s.jsx)(r.td,{children:"byte"}),(0,s.jsx)(r.td,{children:"num exchanges making up cum size @ parent order arrival"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"250"}),(0,s.jsx)(r.td,{children:"arriveLimitSize"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"immediately marketable size up to limit price on parent order arrival"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"253"}),(0,s.jsx)(r.td,{children:"arriveLimitPrc"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"expected average fill price if all immediately marketable size executed as advertized"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"256"}),(0,s.jsx)(r.td,{children:"avgFillPrc"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"average fill price of all fills attributed parent order"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"259"}),(0,s.jsx)(r.td,{children:"cumFillQuan"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"cumulative fill quantity attributed to parent order"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"262"}),(0,s.jsx)(r.td,{children:"numChildOrders"}),(0,s.jsx)(r.td,{children:"ushort"}),(0,s.jsx)(r.td,{children:"total number of child orders generated by this parent broker (parent number)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"265"}),(0,s.jsx)(r.td,{children:"numDayChildOrders"}),(0,s.jsx)(r.td,{children:"ushort"}),(0,s.jsx)(r.td,{children:"total number of child orders generated by this parent broker (all day; base parent number)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"268"}),(0,s.jsx)(r.td,{children:"openOrderSize"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"open order size"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"271"}),(0,s.jsx)(r.td,{children:"actionOrderSize"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"order size available for immediate action (note: not all algo combinations allow immediate action)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"274"}),(0,s.jsx)(r.td,{children:"riskLimitSize"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"risk limit size (distance to most restrictive risk limit associated with this parent order)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"277"}),(0,s.jsx)(r.td,{children:"riskLimitDesc"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrRisk",children:"enum : SpdrRisk"})}),(0,s.jsx)(r.td,{children:"reason for size reduction (identifies the most restrictive risk limit)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"372"}),(0,s.jsx)(r.td,{children:"riskLimitLevel"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrRiskLevel",children:"enum : SpdrRiskLevel"})}),(0,s.jsx)(r.td,{children:"risk limit level responsible for reduction"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"280"}),(0,s.jsx)(r.td,{children:"riskLimitDetail"}),(0,s.jsx)(r.td,{children:"text1"}),(0,s.jsx)(r.td,{children:"risk limit level responsible for reduction"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"283"}),(0,s.jsx)(r.td,{children:"limitRefUPrc"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"effective reference underlier price @ record publish (usually either mid or bid/ask depending on limit type)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"286"}),(0,s.jsx)(r.td,{children:"limitPrice"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"parent simple prc limit (if any)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"289"}),(0,s.jsx)(r.td,{children:"limitVol"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"parent simple vol limit (if any)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"292"}),(0,s.jsx)(r.td,{children:"makeLimitPrice"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"effective order limit price @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"295"}),(0,s.jsx)(r.td,{children:"makeLimitErr"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/LimitError",children:"enum : LimitError"})}),(0,s.jsx)(r.td,{children:"limit price error code (if any)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"298"}),(0,s.jsx)(r.td,{children:"makeLimitErrDesc"}),(0,s.jsx)(r.td,{children:"text1"}),(0,s.jsx)(r.td,{children:"additional limit price error descriptive text"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"301"}),(0,s.jsx)(r.td,{children:"takeLimitPrice"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"effective order limit price @ record publish"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"304"}),(0,s.jsx)(r.td,{children:"takeLimitErr"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/LimitError",children:"enum : LimitError"})}),(0,s.jsx)(r.td,{children:"limit price error code (if any)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"307"}),(0,s.jsx)(r.td,{children:"takeLimitErrDesc"}),(0,s.jsx)(r.td,{children:"text1"}),(0,s.jsx)(r.td,{children:"additional limit price error descriptive text"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"310"}),(0,s.jsx)(r.td,{children:"brokerState"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/BrokerState",children:"enum : BrokerState"})}),(0,s.jsx)(r.td,{children:"broker monitor state"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"313"}),(0,s.jsx)(r.td,{children:"makeState"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/AlgoState",children:"enum : AlgoState"})}),(0,s.jsx)(r.td,{children:"[enum] current state of non-marketable order handler (maker)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"316"}),(0,s.jsx)(r.td,{children:"takeState"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/AlgoState",children:"enum : AlgoState"})}),(0,s.jsx)(r.td,{children:"[enum] current state of marketable order handler (taker)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"319"}),(0,s.jsx)(r.td,{children:"mktCrossState"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/MktCrossState",children:"enum : MktCrossState"})}),(0,s.jsx)(r.td,{children:"[enum] current state of mkt cross handler (if any)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"322"}),(0,s.jsx)(r.td,{children:"lastChildEvent"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/ChildEvent",children:"enum : ChildEvent"})}),(0,s.jsx)(r.td,{children:"most recent child handling event"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"325"}),(0,s.jsx)(r.td,{children:"spdrMktState"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrMarketState",children:"enum : SpdrMarketState"})}),(0,s.jsx)(r.td,{children:"market state code"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"328"}),(0,s.jsx)(r.td,{children:"numOrders"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"number active child orders @ record send"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"331"}),(0,s.jsx)(r.td,{children:"leavesQty"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"number of active child order contracts (sum of all active child orders) @ record send"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"334"}),(0,s.jsx)(r.td,{children:"childOrderLeaves"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"number of open child orders @ record send"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"337"}),(0,s.jsx)(r.td,{children:"arrivalSDiv"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"effective sdiv rate @ parent order arrival (fixed for life of parent order)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"340"}),(0,s.jsx)(r.td,{children:"arrivalRate"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"effective interest rate @ parent order arrival (fixed for life of parent order)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"343"}),(0,s.jsx)(r.td,{children:"arrivalDDiv"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"effective cumulative discrete dividend @ parent order arrival (fixed for life of parent order)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"346"}),(0,s.jsx)(r.td,{children:"hedgeSecKey"}),(0,s.jsx)(r.td,{children:"ExpiryKey"}),(0,s.jsx)(r.td,{children:"auto-hedge sec key"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"349"}),(0,s.jsx)(r.td,{children:"hedgeSecType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,s.jsx)(r.td,{children:"auto-hedge sec type"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"352"}),(0,s.jsx)(r.td,{children:"theoOpx"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"option theo prc (from theoVol)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"355"}),(0,s.jsx)(r.td,{children:"theoVol"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"option theo vol (from theoModel;if any)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"358"}),(0,s.jsx)(r.td,{children:"childOrderMask"}),(0,s.jsx)(r.td,{children:"uint"}),(0,s.jsx)(r.td,{children:"bit-mask of all exchange for which a child order was generated"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"361"}),(0,s.jsx)(r.td,{children:"priceFormat"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,s.jsx)(r.td,{children:"price display format code"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"364"}),(0,s.jsx)(r.td,{children:"uPriceFormat"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,s.jsx)(r.td,{children:"underlier price display format code"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"367"}),(0,s.jsx)(r.td,{children:"userName"}),(0,s.jsx)(r.td,{children:"string(24)"}),(0,s.jsx)(r.td,{children:"user associated with the most recent parent order"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"370"}),(0,s.jsx)(r.td,{children:"timestamp"}),(0,s.jsx)(r.td,{children:"DateTime"}),(0,s.jsx)(r.td,{children:"timestamp of last modification"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrParentBrkrEvent'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrParentBrkrEvent'\n\n"})})})]}),"\n",(0,s.jsx)(r.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentBrkrEvent\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'secKey|secType|accnt|spdrSource|groupingCode|orderSide|clientFirm|altAccnt|altUserName|eventNumber|stageType|stageReview|baseParentNumber|prevParentNumber|engineName|ticker|spdrBrokerStatus|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrComment|bidPrc|askPrc|bidIVol|askIVol|bidSize|askSize|uBid|uAsk|surfacePrc|surfaceVol|surfaceYrs|surfaceSDiv|surfaceRate|surfaceUPrc|surfaceDe|surfaceGa|surfaceTh|surfaceVe|surfaceRo|surfacePh|arriveNbboSize|arriveNbboExch|arriveCumSize|arriveNumExch|arriveLimitSize|arriveLimitPrc|avgFillPrc|cumFillQuan|numChildOrders|numDayChildOrders|openOrderSize|actionOrderSize|riskLimitSize|riskLimitDesc|riskLimitLevel|riskLimitDetail|limitRefUPrc|limitPrice|limitVol|makeLimitPrice|makeLimitErr|makeLimitErrDesc|takeLimitPrice|takeLimitErr|takeLimitErrDesc|brokerState|makeState|takeState|mktCrossState|lastChildEvent|spdrMktState|numOrders|leavesQty|childOrderLeaves|arrivalSDiv|arrivalRate|arrivalDDiv|hedgeSecKey|hedgeSecType|theoOpx|theoVol|childOrderMask|priceFormat|uPriceFormat|userName|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrParentBrkrEvent' \\\n--data-urlencode 'view=secKey|secType|accnt|spdrSource|groupingCode|orderSide|clientFirm|altAccnt|altUserName|eventNumber|stageType|stageReview|baseParentNumber|prevParentNumber|engineName|ticker|spdrBrokerStatus|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrComment|bidPrc|askPrc|bidIVol|askIVol|bidSize|askSize|uBid|uAsk|surfacePrc|surfaceVol|surfaceYrs|surfaceSDiv|surfaceRate|surfaceUPrc|surfaceDe|surfaceGa|surfaceTh|surfaceVe|surfaceRo|surfacePh|arriveNbboSize|arriveNbboExch|arriveCumSize|arriveNumExch|arriveLimitSize|arriveLimitPrc|avgFillPrc|cumFillQuan|numChildOrders|numDayChildOrders|openOrderSize|actionOrderSize|riskLimitSize|riskLimitDesc|riskLimitLevel|riskLimitDetail|limitRefUPrc|limitPrice|limitVol|makeLimitPrice|makeLimitErr|makeLimitErrDesc|takeLimitPrice|takeLimitErr|takeLimitErrDesc|brokerState|makeState|takeState|mktCrossState|lastChildEvent|spdrMktState|numOrders|leavesQty|childOrderLeaves|arrivalSDiv|arrivalRate|arrivalDDiv|hedgeSecKey|hedgeSecType|theoOpx|theoVol|childOrderMask|priceFormat|uPriceFormat|userName|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,s.jsx)(r.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentBrkrEvent\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'secKey|secType|accnt|spdrSource|groupingCode|orderSide|clientFirm|altAccnt|altUserName|eventNumber|stageType|stageReview|baseParentNumber|prevParentNumber|engineName|ticker|spdrBrokerStatus|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrComment|bidPrc|askPrc|bidIVol|askIVol|bidSize|askSize|uBid|uAsk|surfacePrc|surfaceVol|surfaceYrs|surfaceSDiv|surfaceRate|surfaceUPrc|surfaceDe|surfaceGa|surfaceTh|surfaceVe|surfaceRo|surfacePh|arriveNbboSize|arriveNbboExch|arriveCumSize|arriveNumExch|arriveLimitSize|arriveLimitPrc|avgFillPrc|cumFillQuan|numChildOrders|numDayChildOrders|openOrderSize|actionOrderSize|riskLimitSize|riskLimitDesc|riskLimitLevel|riskLimitDetail|limitRefUPrc|limitPrice|limitVol|makeLimitPrice|makeLimitErr|makeLimitErrDesc|takeLimitPrice|takeLimitErr|takeLimitErrDesc|brokerState|makeState|takeState|mktCrossState|lastChildEvent|spdrMktState|numOrders|leavesQty|childOrderLeaves|arrivalSDiv|arrivalRate|arrivalDDiv|hedgeSecKey|hedgeSecType|theoOpx|theoVol|childOrderMask|priceFormat|uPriceFormat|userName|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'secKey:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrParentBrkrEvent' \\\n--data-urlencode 'view=secKey|secType|accnt|spdrSource|groupingCode|orderSide|clientFirm|altAccnt|altUserName|eventNumber|stageType|stageReview|baseParentNumber|prevParentNumber|engineName|ticker|spdrBrokerStatus|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrComment|bidPrc|askPrc|bidIVol|askIVol|bidSize|askSize|uBid|uAsk|surfacePrc|surfaceVol|surfaceYrs|surfaceSDiv|surfaceRate|surfaceUPrc|surfaceDe|surfaceGa|surfaceTh|surfaceVe|surfaceRo|surfacePh|arriveNbboSize|arriveNbboExch|arriveCumSize|arriveNumExch|arriveLimitSize|arriveLimitPrc|avgFillPrc|cumFillQuan|numChildOrders|numDayChildOrders|openOrderSize|actionOrderSize|riskLimitSize|riskLimitDesc|riskLimitLevel|riskLimitDetail|limitRefUPrc|limitPrice|limitVol|makeLimitPrice|makeLimitErr|makeLimitErrDesc|takeLimitPrice|takeLimitErr|takeLimitErrDesc|brokerState|makeState|takeState|mktCrossState|lastChildEvent|spdrMktState|numOrders|leavesQty|childOrderLeaves|arrivalSDiv|arrivalRate|arrivalDDiv|hedgeSecKey|hedgeSecType|theoOpx|theoVol|childOrderMask|priceFormat|uPriceFormat|userName|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=secKey:ASC'\n"})})})]}),"\n",(0,s.jsx)(r.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentBrkrEvent\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'secKey|secType|accnt|spdrSource|groupingCode|orderSide|clientFirm|altAccnt|altUserName|eventNumber|stageType|stageReview|baseParentNumber|prevParentNumber|engineName|ticker|spdrBrokerStatus|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrComment|bidPrc|askPrc|bidIVol|askIVol|bidSize|askSize|uBid|uAsk|surfacePrc|surfaceVol|surfaceYrs|surfaceSDiv|surfaceRate|surfaceUPrc|surfaceDe|surfaceGa|surfaceTh|surfaceVe|surfaceRo|surfacePh|arriveNbboSize|arriveNbboExch|arriveCumSize|arriveNumExch|arriveLimitSize|arriveLimitPrc|avgFillPrc|cumFillQuan|numChildOrders|numDayChildOrders|openOrderSize|actionOrderSize|riskLimitSize|riskLimitDesc|riskLimitLevel|riskLimitDetail|limitRefUPrc|limitPrice|limitVol|makeLimitPrice|makeLimitErr|makeLimitErrDesc|takeLimitPrice|takeLimitErr|takeLimitErrDesc|brokerState|makeState|takeState|mktCrossState|lastChildEvent|spdrMktState|numOrders|leavesQty|childOrderLeaves|arrivalSDiv|arrivalRate|arrivalDDiv|hedgeSecKey|hedgeSecType|theoOpx|theoVol|childOrderMask|priceFormat|uPriceFormat|userName|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'secType|spdrSource|orderSide|stageType|stageReview|spdrBrokerStatus|spdrOrderStatus|spdrCloseReason|spdrRejectReason|arriveNbboExch|riskLimitDesc|riskLimitLevel|makeLimitErr|takeLimitErr|brokerState|makeState|takeState|mktCrossState|lastChildEvent|spdrMktState|hedgeSecType|priceFormat|uPriceFormat\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrParentBrkrEvent' \\\n--data-urlencode 'measure=secKey|secType|accnt|spdrSource|groupingCode|orderSide|clientFirm|altAccnt|altUserName|eventNumber|stageType|stageReview|baseParentNumber|prevParentNumber|engineName|ticker|spdrBrokerStatus|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrComment|bidPrc|askPrc|bidIVol|askIVol|bidSize|askSize|uBid|uAsk|surfacePrc|surfaceVol|surfaceYrs|surfaceSDiv|surfaceRate|surfaceUPrc|surfaceDe|surfaceGa|surfaceTh|surfaceVe|surfaceRo|surfacePh|arriveNbboSize|arriveNbboExch|arriveCumSize|arriveNumExch|arriveLimitSize|arriveLimitPrc|avgFillPrc|cumFillQuan|numChildOrders|numDayChildOrders|openOrderSize|actionOrderSize|riskLimitSize|riskLimitDesc|riskLimitLevel|riskLimitDetail|limitRefUPrc|limitPrice|limitVol|makeLimitPrice|makeLimitErr|makeLimitErrDesc|takeLimitPrice|takeLimitErr|takeLimitErrDesc|brokerState|makeState|takeState|mktCrossState|lastChildEvent|spdrMktState|numOrders|leavesQty|childOrderLeaves|arrivalSDiv|arrivalRate|arrivalDDiv|hedgeSecKey|hedgeSecType|theoOpx|theoVol|childOrderMask|priceFormat|uPriceFormat|userName|timestamp' \\\n--data-urlencode 'group=secType|spdrSource|orderSide|stageType|stageReview|spdrBrokerStatus|spdrOrderStatus|spdrCloseReason|spdrRejectReason|arriveNbboExch|riskLimitDesc|riskLimitLevel|makeLimitErr|takeLimitErr|brokerState|makeState|takeState|mktCrossState|lastChildEvent|spdrMktState|hedgeSecType|priceFormat|uPriceFormat' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,s.jsx)(r.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentBrkrEvent\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrParentBrkrEvent' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},19365:(e,r,t)=>{t.d(r,{A:()=>d});t(96540);var s=t(34164);const i={tabItem:"tabItem_Ymn6"};var n=t(74848);function d(e){let{children:r,hidden:t,className:d}=e;return(0,n.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,d),hidden:t,children:r})}},11470:(e,r,t)=>{t.d(r,{A:()=>b});var s=t(96540),i=t(34164),n=t(23104),d=t(56347),a=t(205),l=t(57485),c=t(31682),o=t(70679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:t}=e;return(0,s.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:t,attributes:s,default:i}}=e;return{value:r,label:t,attributes:s,default:i}}))}(t);return function(e){const r=(0,c.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function m(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function x(e){let{queryString:r=!1,groupId:t}=e;const i=(0,d.W6)(),n=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,l.aZ)(n),(0,s.useCallback)((e=>{if(!n)return;const r=new URLSearchParams(i.location.search);r.set(n,e),i.replace({...i.location,search:r.toString()})}),[n,i])]}function j(e){const{defaultValue:r,queryString:t=!1,groupId:i}=e,n=u(e),[d,l]=(0,s.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!m({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:r,tabValues:n}))),[c,h]=x({queryString:t,groupId:i}),[j,p]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[i,n]=(0,o.Dv)(t);return[i,(0,s.useCallback)((e=>{t&&n.set(e)}),[t,n])]}({groupId:i}),v=(()=>{const e=c??j;return m({value:e,tabValues:n})?e:null})();(0,a.A)((()=>{v&&l(v)}),[v]);return{selectedValue:d,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),p(e)}),[h,p,n]),tabValues:n}}var p=t(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function S(e){let{className:r,block:t,selectedValue:s,selectValue:d,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,n.a_)(),o=e=>{const r=e.currentTarget,t=l.indexOf(r),i=a[t].value;i!==s&&(c(r),d(i))},h=e=>{let r=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;r=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;r=l[t]??l[l.length-1];break}}r?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},r),children:a.map((e=>{let{value:r,label:t,attributes:n}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:s===r?0:-1,"aria-selected":s===r,ref:e=>l.push(e),onKeyDown:h,onClick:o,...n,className:(0,i.A)("tabs__item",v.tabItem,n?.className,{"tabs__item--active":s===r}),children:t??r},r)}))})}function g(e){let{lazy:r,children:t,selectedValue:i}=e;const n=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=n.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:n.map(((e,r)=>(0,s.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function k(e){const r=j(e);return(0,f.jsxs)("div",{className:(0,i.A)("tabs-container",v.tabList),children:[(0,f.jsx)(S,{...r,...e}),(0,f.jsx)(g,{...r,...e})]})}function b(e){const r=(0,p.A)();return(0,f.jsx)(k,{...e,children:h(e.children)},String(r))}},28453:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>a});var s=t(96540);const i={},n=s.createContext(i);function d(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(n.Provider,{value:r},e.children)}}}]);