"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[95217],{97851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var r=t(74848),a=t(28453);const i={},l=void 0,d={id:"MessageSchemas/Schema/SRSE Products/SRTrade/AutoHedgeControlGateway/AutoHedgeControlGateway",title:"AutoHedgeControlGateway",description:"V8 Message Definiton",source:"@site/versioned_docs/version-8.4.10.4/MessageSchemas/Schema/SRSE Products/SRTrade/AutoHedgeControlGateway/AutoHedgeControlGateway.md",sourceDirName:"MessageSchemas/Schema/SRSE Products/SRTrade/AutoHedgeControlGateway",slug:"/MessageSchemas/Schema/SRSE Products/SRTrade/AutoHedgeControlGateway/",permalink:"/docs/8.4.10.4/MessageSchemas/Schema/SRSE Products/SRTrade/AutoHedgeControlGateway/",draft:!1,unlisted:!1,tags:[],version:"8.4.10.4",frontMatter:{},sidebar:"messageSchemasSidebar",previous:{title:"AuctionState",permalink:"/docs/8.4.10.4/MessageSchemas/Schema/SRSE Products/SRTrade/AuctionState/"},next:{title:"AutoHedgeSymbol",permalink:"/docs/8.4.10.4/MessageSchemas/Schema/SRSE Products/SRTrade/AutoHedgeSymbol/"}},c={},s=[{value:"METADATA",id:"metadata",level:3},{value:"Table Definition",id:"table-definition",level:3},{value:"PRIMARY KEY DEFINITION (Unique)",id:"primary-key-definition-unique",level:3},{value:"CREATE TABLE EXAMPLE QUERY",id:"create-table-example-query",level:3},{value:"SELECT TABLE EXAMPLE QUERY",id:"select-table-example-query",level:3},{value:"UPDATE TABLE EXAMPLE QUERY",id:"update-table-example-query",level:3},{value:"INSERT TABLE EXAMPLE QUERY",id:"insert-table-example-query",level:3},{value:"DELETE TABLE EXAMPLE QUERY",id:"delete-table-example-query",level:3},{value:"Doc Columns Query",id:"doc-columns-query",level:3}];function o(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"../../../Topics/srse-gateway/AutoHedgeControlGateway",children:"V8 Message Definiton"})}),"\n",(0,r.jsx)(n.p,{children:"SpdrAutoHedgeControl contains autohedge / risk group control details.  Can be uploaded from SRSE, created from ExecutionEngines, or created by SR tools."}),"\n",(0,r.jsx)(n.h3,{id:"metadata",children:"METADATA"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Attribute"}),(0,r.jsx)(n.th,{children:"Value"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Topic"}),(0,r.jsx)(n.td,{children:"5120-srse-gateway"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"MLink Token"}),(0,r.jsx)(n.td,{children:"Internal"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Product"}),(0,r.jsx)(n.td,{children:"SRTrade"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"accessType"}),(0,r.jsx)(n.td,{children:"SELECT,UPDATE,INSERT,DELETE"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"table-definition",children:"Table Definition"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Key"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Comment"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"accnt"}),(0,r.jsx)(n.td,{children:"VARCHAR(16)"}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"riskGroupId"}),(0,r.jsx)(n.td,{children:"CHAR(19)"}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"'0000-0000-0000-0000'"}),(0,r.jsx)(n.td,{children:"riskGroupId  0 means hedgeScope  Accnt"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_at"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/AssetType",children:"enum - AssetType"})}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"Execution Hedge SecKey from SpdrParentExecutionhedgeSecKey"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_ts"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/TickerSrc",children:"enum - TickerSrc"})}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"Execution Hedge SecKey from SpdrParentExecutionhedgeSecKey"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_tk"}),(0,r.jsx)(n.td,{children:"VARCHAR(12)"}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"Execution Hedge SecKey from SpdrParentExecutionhedgeSecKey"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_yr"}),(0,r.jsx)(n.td,{children:"SMALLINT UNSIGNED"}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"2000"}),(0,r.jsx)(n.td,{children:"Execution Hedge SecKey from SpdrParentExecutionhedgeSecKey"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_mn"}),(0,r.jsx)(n.td,{children:"TINYINT UNSIGNED"}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"Execution Hedge SecKey from SpdrParentExecutionhedgeSecKey"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_dy"}),(0,r.jsx)(n.td,{children:"TINYINT UNSIGNED"}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"Execution Hedge SecKey from SpdrParentExecutionhedgeSecKey"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/SpdrKeyType",children:"enum - SpdrKeyType"})}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"Execution Hedge SecType Stock or Future"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"clientFirm"}),(0,r.jsx)(n.td,{children:"VARCHAR(16)"}),(0,r.jsx)(n.td,{children:"PRI"}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"altOrderId"}),(0,r.jsx)(n.td,{children:"VARCHAR(24)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"alternate order ID usually clOrdId from client"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"altAccnt"}),(0,r.jsx)(n.td,{children:"VARCHAR(32)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"alternate client assigned long account string optional used to map between client and SR account strings"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"altUserName"}),(0,r.jsx)(n.td,{children:"VARCHAR(24)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"alternate client assigned user name optional used to map between client and SR account strings"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"srcRoutingCode"}),(0,r.jsx)(n.td,{children:"VARCHAR(65)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"inbound FIX routing code or SRSEtool server appID if any"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"accntRouteCode"}),(0,r.jsx)(n.td,{children:"TINYTEXT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"accntRoute acronym"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"externExDest"}),(0,r.jsx)(n.td,{children:"VARCHAR(16)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"routing code for orders directed to an external order router default  null should match FixRoutingTabledestination in SR accnt config"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"externParams"}),(0,r.jsx)(n.td,{children:"TINYTEXT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"external algo namesparameters usually just an algo name"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"strategy"}),(0,r.jsx)(n.td,{children:"VARCHAR(36)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"clientsupplied strategy stringvisible on SpiderRock GUI tools and other order reports"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"userName"}),(0,r.jsx)(n.td,{children:"VARCHAR(24)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"''"}),(0,r.jsx)(n.td,{children:"name of the user entering the order"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"autoHedge"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/AutoHedge",children:"enum - AutoHedge"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"autohedge algorithm used for restoring tickets"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeTarget"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/HedgeTarget",children:"enum - HedgeTarget"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"minHedgeDDelta"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"do not generate autohedge orders if total group Delta is between minHedgeDDelta and maxHedgeDDelta eg100000 100000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"maxHedgeDDelta"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"orderSize"}),(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"initial and maximum size of a hedge parent buy or sell order  note actual working size will be controlled by the autohedge server based on filled deltas but working size cannot exceed orderSize"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ssaleFlag"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/ShortSaleFlag",children:"enum - ShortSaleFlag"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"maxExposureSize"}),(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"-1"}),(0,r.jsx)(n.td,{children:"maximum simultaneous cumulative child order public size exposure 1  orderActiveSize order can overfill if  orderActiveSize and numMakeExchanges  1"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"numMakeExchanges"}),(0,r.jsx)(n.td,{children:"TINYINT UNSIGNED"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"number of exchanges 1  4 on which to publish public making orders  Effective number might be less than requested number if sufficient exchanges are not available"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"publicSize"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/PublicSizeHandling",children:"enum - PublicSizeHandling"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"public order size handling Noneuse default size handling usually limits public size to typical market size Randomizerandomize public size FullSizeexpose entire order size where possible"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"canOverlapCxlRepl"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum - YesNo"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"can execution engines overlap cancelreplace operations order can overfill if YES at most one active overlapping cxlreplace operation for each parent order"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"progressRule"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/ProgressRule",children:"enum - ProgressRule"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"Immediate  all size immediately available TWAP  size released in time intervalsVWAP  size released in volume intervalsTwapForce  size released in intervalsexecution forced at the end of interval"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"progressSliceCnt"}),(0,r.jsx)(n.td,{children:"TINYINT UNSIGNED"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"number of twap slices to use default  4 or 8 max 20"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"progressExposeTime"}),(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"minimum time secs to expose order 0  no minimum used to guarantee that the order is exposed at midmarket for some time before actively taking"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"vwapParticipation"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"target vwap participation rate target  of trade activity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"minMktOnClosePct"}),(0,r.jsx)(n.td,{children:"TINYINT UNSIGNED"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"Minimum pct 0  100 of order reserved for the onclose auction"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"maxMakeExchFee"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"maximum making exchange fee in point value zero  no limit use nonzero number for limit to apply"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"maxTakeExchFee"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"maximum taking exchange fee in point value zero  no limit use nonzero number for limit to apply"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"incTakeExchFee"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/IncExchFee",children:"enum - IncExchFee"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"include exchange fee in probability"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"incMakeExchFee"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/IncExchFee",children:"enum - IncExchFee"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"include exchange fee in probability"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"makeExchRule"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/MakeExchRule",children:"enum - MakeExchRule"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"ActiveMaker exchange preference rule MaxPart will pick exchanges to maximize participation FeeOrder will pick exchanges to minimize fees maximize rebates ImprvOnly will only make when improving NBBO"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"maxChildOrders"}),(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"maximum number of child orders that can be generated by this parent order order will terminate ifwhen this cap is reachedzero or neg  unlimited"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"exchMask"}),(0,r.jsx)(n.td,{children:"INT UNSIGNED"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"eligible exchanges 0  all"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"marketSession"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/MarketSession",children:"enum - MarketSession"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'RegMkt'"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"startDttm"}),(0,r.jsx)(n.td,{children:"DATETIME(6)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'1900-01-01 00:00:00.000000'"}),(0,r.jsx)(n.td,{children:"optional parent order start time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"orderDuration"}),(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"optional number of seconds"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"activeDuration"}),(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"goodTillDttm"}),(0,r.jsx)(n.td,{children:"DATETIME(6)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'1900-01-01 00:00:00.000000'"}),(0,r.jsx)(n.td,{children:"optional default 20990101"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"parentOrderHandling"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/ParentOrderHandling",children:"enum - ParentOrderHandling"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"parentBalanceHandling"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/ParentBalanceHandling",children:"enum - ParentBalanceHandling"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"orderLimitType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/SpdrLimitType",children:"enum - SpdrLimitType"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"takeLimitClass"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/SpdrLimitClass",children:"enum - SpdrLimitClass"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'Simple'"}),(0,r.jsx)(n.td,{children:"Simple  LimitPrice Probability  BESTLimitPrice ProbLimit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"makeLimitClass"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/SpdrLimitClass",children:"enum - SpdrLimitClass"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'Simple'"}),(0,r.jsx)(n.td,{children:"Simple  LimitPrice Probability  BESTLimitPrice ProbLimit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"orderPrcLimit"}),(0,r.jsx)(n.td,{children:"DOUBLE"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"Applies if LimitType  Prc"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"orderPrcOffset"}),(0,r.jsx)(n.td,{children:"DOUBLE"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"default0"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"stateModel"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/StateModel",children:"enum - StateModel"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"takeAlphaType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/AlphaType",children:"enum - AlphaType"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"Applies if takeLimitClass  Probability"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"makeAlphaType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/AlphaType",children:"enum - AlphaType"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'None'"}),(0,r.jsx)(n.td,{children:"Applies if makeLimitClass  Probability"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"takeAlphaFactor"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"22 takeProbLimit  MAXtakeProbability takeProbAvg  takeAlphaFactor  takeProbStd if AlphaType  Relative"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"makeAlphaFactor"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"22 makeProbLimit  MAXmakeProbability makeProbAvg  makeAlphaFactor  makeProbStd if AlphaType  Relative"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"takeProbability"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"takeProbLimit  takeProbability if AlphaType  Static"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"makeProbability"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"makeProbLimit  makeProbability if AlphaType  Static"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"timestamp"}),(0,r.jsx)(n.td,{children:"DATETIME(6)"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"'1900-01-01 00:00:00.000000'"}),(0,r.jsx)(n.td,{children:"record timestamp"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"primary-key-definition-unique",children:"PRIMARY KEY DEFINITION (Unique)"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Sequence"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"accnt"}),(0,r.jsx)(n.td,{children:"1"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"riskGroupId"}),(0,r.jsx)(n.td,{children:"2"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_tk"}),(0,r.jsx)(n.td,{children:"3"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_yr"}),(0,r.jsx)(n.td,{children:"4"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_mn"}),(0,r.jsx)(n.td,{children:"5"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_dy"}),(0,r.jsx)(n.td,{children:"6"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_at"}),(0,r.jsx)(n.td,{children:"7"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecKey_ts"}),(0,r.jsx)(n.td,{children:"8"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hedgeSecType"}),(0,r.jsx)(n.td,{children:"9"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"clientFirm"}),(0,r.jsx)(n.td,{children:"10"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"create-table-example-query",children:"CREATE TABLE EXAMPLE QUERY"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE `SRTrade`.`MsgAutoHedgeControlGateway` (\n    `accnt` VARCHAR(16) NOT NULL DEFAULT '',\n    `riskGroupId` CHAR(19) NOT NULL DEFAULT '0000-0000-0000-0000' COMMENT 'riskGroupId = 0 means hedgeScope = Accnt',\n    `hedgeSecKey_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)',\n    `hedgeSecKey_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','EUX','ANY','CXE','DXE','NXAM','NXBR','NXLS','NXML','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)',\n    `hedgeSecKey_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)',\n    `hedgeSecKey_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 2000 COMMENT 'Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)',\n    `hedgeSecKey_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)',\n    `hedgeSecKey_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)',\n    `hedgeSecType` ENUM('None','Stock','Future','Option','MLeg') NOT NULL DEFAULT 'None' COMMENT 'Execution Hedge SecType (Stock or Future)',\n    `clientFirm` VARCHAR(16) NOT NULL DEFAULT '',\n    `altOrderId` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'alternate order ID (usually clOrdId from client)',\n    `altAccnt` VARCHAR(32) NOT NULL DEFAULT '' COMMENT 'alternate (client assigned) \"long\" account string (optional) [used to map between client and SR account strings]',\n    `altUserName` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'alternate (client assigned) user name (optional) [used to map between client and SR account strings]',\n    `srcRoutingCode` VARCHAR(65) NOT NULL DEFAULT '' COMMENT 'inbound FIX routing code or SRSE/tool server appID (if any)',\n    `accntRouteCode` TINYTEXT NOT NULL DEFAULT '' COMMENT 'accntRoute acronym',\n    `externExDest` VARCHAR(16) NOT NULL DEFAULT '' COMMENT 'routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)',\n    `externParams` TINYTEXT NOT NULL DEFAULT '' COMMENT 'external algo names/parameters (usually just an algo name)',\n    `strategy` VARCHAR(36) NOT NULL DEFAULT '' COMMENT 'client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.',\n    `userName` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'name of the user entering the order',\n    `autoHedge` ENUM('None','Static','AutoMid','AutoCrx','AutoTrn','SpdrAuto','Spdr10S','Spdr30S','Spdr90S','Spdr5M','Spdr30M','SpdrDay','SmartFast','SmartNorm','FastCrx','FastDark','SlowDark','AlphaVwap1pct','AlphaVwap2pct','AlphaVwap5pct','AlphaVwap25pct','Custom','AwayAlgo') NOT NULL DEFAULT 'None' COMMENT 'auto-hedge algorithm (used for restoring tickets)',\n    `hedgeTarget` ENUM('None','HedgeToZero','HedgeToBand') NOT NULL DEFAULT 'None',\n    `minHedgeDDelta` FLOAT NOT NULL DEFAULT 0 COMMENT 'do not generate autohedge orders if total group $Delta is between [minHedgeDDelta and maxHedgeDDelta] (eg.[-$100,000, +$100,000])',\n    `maxHedgeDDelta` FLOAT NOT NULL DEFAULT 0,\n    `orderSize` INT NOT NULL DEFAULT 0 COMMENT 'initial (and maximum) size of a hedge parent buy or sell order.  note: actual working size will be controlled by the autohedge server based on filled deltas but working size cannot exceed orderSize',\n    `ssaleFlag` ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') NOT NULL DEFAULT 'None',\n    `maxExposureSize` INT NOT NULL DEFAULT -1 COMMENT 'maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]',\n    `numMakeExchanges` TINYINT UNSIGNED NOT NULL DEFAULT 1 COMMENT 'number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.',\n    `publicSize` ENUM('None','Randomize','MktSize','FullSize','MktSizeA','MktSizeB','MktSizeC','FullSizeR','Max25Pct','Max50Pct','Max75Pct','NoSize') NOT NULL DEFAULT 'None' COMMENT 'public order size handling: None=use default size handling (usually limits public size to ''typical'' market size); Randomize=randomize public size; FullSize=expose entire order size where possible',\n    `canOverlapCxlRepl` ENUM('None','Yes','No') NOT NULL DEFAULT 'None' COMMENT 'can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)',\n    `progressRule` ENUM('None','Twap','Vwap','TwapReset','VwapReset','FastReset','SlowReset','TwapAlpha','VwapAlpha','TwapAlphaC','VwapAlphaC','AutoComplete','AllowImmediate','Manual','SpdrPulse','IOC') NOT NULL DEFAULT 'None' COMMENT 'Immediate = all size immediately available; TWAP = size released in time intervals;VWAP = size released in volume intervals;TwapForce = size released in intervals/execution forced at the end of interval',\n    `progressSliceCnt` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'number of twap slices to use (default = 4 or 8) [max 20]',\n    `progressExposeTime` INT NOT NULL DEFAULT 0 COMMENT 'minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)',\n    `vwapParticipation` FLOAT NOT NULL DEFAULT 0 COMMENT 'target vwap participation rate (target % of trade activity)',\n    `minMktOnClosePct` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Minimum pct [0 - 100] of order reserved for the on-close auction',\n    `maxMakeExchFee` FLOAT NOT NULL DEFAULT 0 COMMENT 'maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]',\n    `maxTakeExchFee` FLOAT NOT NULL DEFAULT 0 COMMENT 'maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]',\n    `incTakeExchFee` ENUM('None','ExclFee','IncFee') NOT NULL DEFAULT 'None' COMMENT 'include exchange fee in probability',\n    `incMakeExchFee` ENUM('None','ExclFee','IncFee') NOT NULL DEFAULT 'None' COMMENT 'include exchange fee in probability',\n    `makeExchRule` ENUM('None','MaxPart','FeeOptimal','ImprvOnly','FeeStrict','RoundRobin','ProRataOptim') NOT NULL DEFAULT 'None' COMMENT 'ActiveMaker exchange preference rule: ''MaxPart'' will pick exchanges to maximize participation; ''FeeOrder'' will pick exchanges to minimize fees [maximize rebates]; ''ImprvOnly'' will only make when improving NBBO.',\n    `maxChildOrders` INT NOT NULL DEFAULT 0 COMMENT 'maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]',\n    `exchMask` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'eligible exchanges (0 = all)',\n    `marketSession` ENUM('None','PreMkt','RegMkt','PostMkt','PreRegMkt','RegPostMkt','AllDay') NOT NULL DEFAULT 'RegMkt',\n    `startDttm` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT '[optional] (parent order start time)',\n    `orderDuration` INT NOT NULL DEFAULT 0 COMMENT '[optional] (number of seconds)',\n    `activeDuration` INT NOT NULL DEFAULT 0,\n    `goodTillDttm` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT '[optional] (default: 2099-01-01)',\n    `parentOrderHandling` ENUM('None','ActiveTaker','PostOnly','DMA','MktOnOpn','MktOnCls','Facilitate','Matrix','Legger','Seeker','SeekerLegger','CrossResponse','AuctionResponse','MLegAuctionResp','RFQRequest','AwayAlgo','ExchPing','BlockAuction','BlockResponse','SweepTake','CobMaker','FaceOmni','TestParent') NOT NULL DEFAULT 'None',\n    `parentBalanceHandling` ENUM('None','PostWith','PostTurn','PostImprove','PostLimit','MaxIntern','PostWthF','PostImprvR','PostFlash','PostFlashW','PostPeg','PostFlashI') NOT NULL DEFAULT 'None',\n    `orderLimitType` ENUM('None','Market','MarketArrival','Prc','PrcDe','PrcDeX','PrcDeT','PrcDeP','PrcDeXT','PrcDeXP','Vol','VolX','PrcV','PrcVX','NoLimit','RelMid','RelJoin','RelCross','SmrtFast','SmrtNorm','RelTurn','PrcDeEm','VolEm','Aux','UPrcPct','PkgNeutral','RcPrem','SynthLimitMM','SynthLimitBW','SynthLimitWW') NOT NULL DEFAULT 'None',\n    `takeLimitClass` ENUM('Simple','Surface','Probability','SurfProb') NOT NULL DEFAULT 'Simple' COMMENT 'Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)',\n    `makeLimitClass` ENUM('Simple','Surface','Probability','SurfProb') NOT NULL DEFAULT 'Simple' COMMENT 'Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)',\n    `orderPrcLimit` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Applies if LimitType = Prc[]',\n    `orderPrcOffset` DOUBLE NOT NULL DEFAULT 0 COMMENT 'default=0',\n    `stateModel` ENUM('None','M1','M2','M3','M4') NOT NULL DEFAULT 'None',\n    `takeAlphaType` ENUM('None','Static','Eagle','Hawk','Falcon','Relative') NOT NULL DEFAULT 'None' COMMENT 'Applies if takeLimitClass = Probability',\n    `makeAlphaType` ENUM('None','Static','Eagle','Hawk','Falcon','Relative') NOT NULL DEFAULT 'None' COMMENT 'Applies if makeLimitClass = Probability',\n    `takeAlphaFactor` FLOAT NOT NULL DEFAULT 0 COMMENT '[-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]',\n    `makeAlphaFactor` FLOAT NOT NULL DEFAULT 0 COMMENT '[-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]',\n    `takeProbability` FLOAT NOT NULL DEFAULT 0 COMMENT 'takeProbLimit = takeProbability [if AlphaType = Static]',\n    `makeProbability` FLOAT NOT NULL DEFAULT 0 COMMENT 'makeProbLimit = makeProbability [if AlphaType = Static]',\n    `timestamp` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT 'record timestamp',\n    CONSTRAINT nonnegative_riskGroupId CHECK(ASCII(riskGroupId) < 56),\n    PRIMARY KEY USING HASH (`accnt`,`riskGroupId`,`hedgeSecKey_tk`,`hedgeSecKey_yr`,`hedgeSecKey_mn`,`hedgeSecKey_dy`,`hedgeSecKey_at`,`hedgeSecKey_ts`,`hedgeSecType`,`clientFirm`)\n) ENGINE=SRSE DEFAULT CHARSET=LATIN1 COMMENT='SpdrAutoHedgeControl contains autohedge / risk group control details.  Can be uploaded from SRSE, created from ExecutionEngines, or created by SR tools.';\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"select-table-example-query",children:"SELECT TABLE EXAMPLE QUERY"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n    `accnt`,\n    `riskGroupId`,\n    `hedgeSecKey_at`,\n    `hedgeSecKey_ts`,\n    `hedgeSecKey_tk`,\n    `hedgeSecKey_yr`,\n    `hedgeSecKey_mn`,\n    `hedgeSecKey_dy`,\n    `hedgeSecType`,\n    `clientFirm`,\n    `altOrderId`,\n    `altAccnt`,\n    `altUserName`,\n    `srcRoutingCode`,\n    `accntRouteCode`,\n    `externExDest`,\n    `externParams`,\n    `strategy`,\n    `userName`,\n    `autoHedge`,\n    `hedgeTarget`,\n    `minHedgeDDelta`,\n    `maxHedgeDDelta`,\n    `orderSize`,\n    `ssaleFlag`,\n    `maxExposureSize`,\n    `numMakeExchanges`,\n    `publicSize`,\n    `canOverlapCxlRepl`,\n    `progressRule`,\n    `progressSliceCnt`,\n    `progressExposeTime`,\n    `vwapParticipation`,\n    `minMktOnClosePct`,\n    `maxMakeExchFee`,\n    `maxTakeExchFee`,\n    `incTakeExchFee`,\n    `incMakeExchFee`,\n    `makeExchRule`,\n    `maxChildOrders`,\n    `exchMask`,\n    `marketSession`,\n    `startDttm`,\n    `orderDuration`,\n    `activeDuration`,\n    `goodTillDttm`,\n    `parentOrderHandling`,\n    `parentBalanceHandling`,\n    `orderLimitType`,\n    `takeLimitClass`,\n    `makeLimitClass`,\n    `orderPrcLimit`,\n    `orderPrcOffset`,\n    `stateModel`,\n    `takeAlphaType`,\n    `makeAlphaType`,\n    `takeAlphaFactor`,\n    `makeAlphaFactor`,\n    `takeProbability`,\n    `makeProbability`,\n    `timestamp`\nFROM `SRTrade`.`MsgAutoHedgeControlGateway`\nWHERE \n    /* Replace with a VARCHAR(16) */ \n    `accnt` = 'Example_accnt'\n  AND\n    /* Replace with a CHAR(19) */\n    `riskGroupId` = 'Example_riskGroupId'\n  AND\n    /* Replace with a ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') */\n    `hedgeSecKey_at` = 'None'\n  AND\n    /* Replace with a ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','EUX','ANY','CXE','DXE','NXAM','NXBR','NXLS','NXML','NXOS','NXP','EUREX','CEDX','ICEFE') */\n    `hedgeSecKey_ts` = 'None'\n  AND\n    /* Replace with a VARCHAR(12) */\n    `hedgeSecKey_tk` = 'Example_hedgeSecKey_tk'\n  AND\n    /* Replace with a SMALLINT UNSIGNED */\n    `hedgeSecKey_yr` = 123\n  AND\n    /* Replace with a TINYINT UNSIGNED */ \n    `hedgeSecKey_mn` = 1\n  AND\n    /* Replace with a TINYINT UNSIGNED */ \n    `hedgeSecKey_dy` = 1\n  AND\n    /* Replace with a ENUM('None','Stock','Future','Option','MLeg') */ \n    `hedgeSecType` = 'None'\n  AND\n    /* Replace with a VARCHAR(16) */ \n    `clientFirm` = 'Example_clientFirm';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"update-table-example-query",children:"UPDATE TABLE EXAMPLE QUERY"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"UPDATE `SRTrade`.`MsgAutoHedgeControlGateway` \nSET\n    /* Replace with a VARCHAR(24) */ \n    `altOrderId` = 'Example_altOrderId',\n    /* Replace with a VARCHAR(32) */ \n    `altAccnt` = 'Example_altAccnt',\n    /* Replace with a VARCHAR(24) */ \n    `altUserName` = 'Example_altUserName',\n    /* Replace with a VARCHAR(65) */ \n    `srcRoutingCode` = 'Example_srcRoutingCode',\n    /* Replace with a TINYTEXT */ \n    `accntRouteCode` = 'dummy tiny text',\n    /* Replace with a VARCHAR(16) */ \n    `externExDest` = 'Example_externExDest',\n    /* Replace with a TINYTEXT */ \n    `externParams` = 'dummy tiny text',\n    /* Replace with a VARCHAR(36) */ \n    `strategy` = 'Example_strategy',\n    /* Replace with a VARCHAR(24) */ \n    `userName` = 'Example_userName',\n    /* Replace with a ENUM('None','Static','AutoMid','AutoCrx','AutoTrn','SpdrAuto','Spdr10S','Spdr30S','Spdr90S','Spdr5M','Spdr30M','SpdrDay','SmartFast','SmartNorm','FastCrx','FastDark','SlowDark','AlphaVwap1pct','AlphaVwap2pct','AlphaVwap5pct','AlphaVwap25pct','Custom','AwayAlgo') */ \n    `autoHedge` = 'None',\n    /* Replace with a ENUM('None','HedgeToZero','HedgeToBand') */ \n    `hedgeTarget` = 'None',\n    /* Replace with a FLOAT */ \n    `minHedgeDDelta` = 1.23,\n    /* Replace with a FLOAT */ \n    `maxHedgeDDelta` = 1.23,\n    /* Replace with a INT */ \n    `orderSize` = 5,\n    /* Replace with a ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') */ \n    `ssaleFlag` = 'None',\n    /* Replace with a INT */\n    `maxExposureSize` = 5,\n    /* Replace with a TINYINT UNSIGNED */\n    `numMakeExchanges` = 1,\n    /* Replace with a ENUM('None','Randomize','MktSize','FullSize','MktSizeA','MktSizeB','MktSizeC','FullSizeR','Max25Pct','Max50Pct','Max75Pct','NoSize') */ \n    `publicSize` = 'None',\n    /* Replace with a ENUM('None','Yes','No') */ \n    `canOverlapCxlRepl` = 'None',\n    /* Replace with a ENUM('None','Twap','Vwap','TwapReset','VwapReset','FastReset','SlowReset','TwapAlpha','VwapAlpha','TwapAlphaC','VwapAlphaC','AutoComplete','AllowImmediate','Manual','SpdrPulse','IOC') */ \n    `progressRule` = 'None',\n    /* Replace with a TINYINT UNSIGNED */ \n    `progressSliceCnt` = 1,\n    /* Replace with a INT */ \n    `progressExposeTime` = 5,\n    /* Replace with a FLOAT */ \n    `vwapParticipation` = 1.23,\n    /* Replace with a TINYINT UNSIGNED */\n    `minMktOnClosePct` = 1,\n    /* Replace with a FLOAT */ \n    `maxMakeExchFee` = 1.23,\n    /* Replace with a FLOAT */ \n    `maxTakeExchFee` = 1.23,\n    /* Replace with a ENUM('None','ExclFee','IncFee') */ \n    `incTakeExchFee` = 'None',\n    /* Replace with a ENUM('None','ExclFee','IncFee') */ \n    `incMakeExchFee` = 'None',\n    /* Replace with a ENUM('None','MaxPart','FeeOptimal','ImprvOnly','FeeStrict','RoundRobin','ProRataOptim') */ \n    `makeExchRule` = 'None',\n    /* Replace with a INT */ \n    `maxChildOrders` = 5,\n    /* Replace with a INT UNSIGNED */ \n    `exchMask` = 0,\n    /* Replace with a ENUM('None','PreMkt','RegMkt','PostMkt','PreRegMkt','RegPostMkt','AllDay') */\n    `marketSession` = 'RegMkt',\n    /* Replace with a DATETIME(6) */\n    `startDttm` = '2022-01-01 12:34:56.000000',\n    /* Replace with a INT */ \n    `orderDuration` = 5,\n    /* Replace with a INT */ \n    `activeDuration` = 5,\n    /* Replace with a DATETIME(6) */\n    `goodTillDttm` = '2022-01-01 12:34:56.000000',\n    /* Replace with a ENUM('None','ActiveTaker','PostOnly','DMA','MktOnOpn','MktOnCls','Facilitate','Matrix','Legger','Seeker','SeekerLegger','CrossResponse','AuctionResponse','MLegAuctionResp','RFQRequest','AwayAlgo','ExchPing','BlockAuction','BlockResponse','SweepTake','CobMaker','FaceOmni','TestParent') */ \n    `parentOrderHandling` = 'None',\n    /* Replace with a ENUM('None','PostWith','PostTurn','PostImprove','PostLimit','MaxIntern','PostWthF','PostImprvR','PostFlash','PostFlashW','PostPeg','PostFlashI') */ \n    `parentBalanceHandling` = 'None',\n    /* Replace with a ENUM('None','Market','MarketArrival','Prc','PrcDe','PrcDeX','PrcDeT','PrcDeP','PrcDeXT','PrcDeXP','Vol','VolX','PrcV','PrcVX','NoLimit','RelMid','RelJoin','RelCross','SmrtFast','SmrtNorm','RelTurn','PrcDeEm','VolEm','Aux','UPrcPct','PkgNeutral','RcPrem','SynthLimitMM','SynthLimitBW','SynthLimitWW') */ \n    `orderLimitType` = 'None',\n    /* Replace with a ENUM('Simple','Surface','Probability','SurfProb') */ \n    `takeLimitClass` = 'Simple',\n    /* Replace with a ENUM('Simple','Surface','Probability','SurfProb') */ \n    `makeLimitClass` = 'Simple',\n    /* Replace with a DOUBLE */ \n    `orderPrcLimit` = 4.56,\n    /* Replace with a DOUBLE */ \n    `orderPrcOffset` = 4.56,\n    /* Replace with a ENUM('None','M1','M2','M3','M4') */ \n    `stateModel` = 'None',\n    /* Replace with a ENUM('None','Static','Eagle','Hawk','Falcon','Relative') */ \n    `takeAlphaType` = 'None',\n    /* Replace with a ENUM('None','Static','Eagle','Hawk','Falcon','Relative') */ \n    `makeAlphaType` = 'None',\n    /* Replace with a FLOAT */ \n    `takeAlphaFactor` = 1.23,\n    /* Replace with a FLOAT */ \n    `makeAlphaFactor` = 1.23,\n    /* Replace with a FLOAT */ \n    `takeProbability` = 1.23,\n    /* Replace with a FLOAT */ \n    `makeProbability` = 1.23,\n    /* Replace with a DATETIME(6) */\n    `timestamp` = '2022-01-01 12:34:56.000000'\nWHERE\n    /* Replace with a VARCHAR(16) */ \n    `accnt` = 'Example_accnt'\n  AND\n    /* Replace with a CHAR(19) */\n    `riskGroupId` = 'Example_riskGroupId'\n  AND\n    /* Replace with a ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') */\n    `hedgeSecKey_at` = 'None'\n  AND\n    /* Replace with a ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','EUX','ANY','CXE','DXE','NXAM','NXBR','NXLS','NXML','NXOS','NXP','EUREX','CEDX','ICEFE') */\n    `hedgeSecKey_ts` = 'None'\n  AND\n    /* Replace with a VARCHAR(12) */\n    `hedgeSecKey_tk` = 'Example_hedgeSecKey_tk'\n  AND\n    /* Replace with a SMALLINT UNSIGNED */\n    `hedgeSecKey_yr` = 123\n  AND\n    /* Replace with a TINYINT UNSIGNED */ \n    `hedgeSecKey_mn` = 1\n  AND\n    /* Replace with a TINYINT UNSIGNED */ \n    `hedgeSecKey_dy` = 1\n  AND\n    /* Replace with a ENUM('None','Stock','Future','Option','MLeg') */ \n    `hedgeSecType` = 'None'\n  AND\n    /* Replace with a VARCHAR(16) */ \n    `clientFirm` = 'Example_clientFirm';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"insert-table-example-query",children:"INSERT TABLE EXAMPLE QUERY"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"INSERT INTO `SRTrade`.`MsgAutoHedgeControlGateway`(\n    /* Replace with a VARCHAR(16) */ \n    `accnt`,\n    /* Replace with a CHAR(19) */\n    `riskGroupId`,\n    /* Replace with a ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') */\n    `hedgeSecKey_at`,\n    /* Replace with a ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','EUX','ANY','CXE','DXE','NXAM','NXBR','NXLS','NXML','NXOS','NXP','EUREX','CEDX','ICEFE') */\n    `hedgeSecKey_ts`,\n    /* Replace with a VARCHAR(12) */\n    `hedgeSecKey_tk`,\n    /* Replace with a SMALLINT UNSIGNED */\n    `hedgeSecKey_yr`,\n    /* Replace with a TINYINT UNSIGNED */ \n    `hedgeSecKey_mn`,\n    /* Replace with a TINYINT UNSIGNED */ \n    `hedgeSecKey_dy`,\n    /* Replace with a ENUM('None','Stock','Future','Option','MLeg') */ \n    `hedgeSecType`,\n    /* Replace with a VARCHAR(16) */ \n    `clientFirm`,\n    /* Replace with a VARCHAR(24) */ \n    `altOrderId`,\n    /* Replace with a VARCHAR(32) */ \n    `altAccnt`,\n    /* Replace with a VARCHAR(24) */ \n    `altUserName`,\n    /* Replace with a VARCHAR(65) */ \n    `srcRoutingCode`,\n    /* Replace with a TINYTEXT */ \n    `accntRouteCode`,\n    /* Replace with a VARCHAR(16) */ \n    `externExDest`,\n    /* Replace with a TINYTEXT */ \n    `externParams`,\n    /* Replace with a VARCHAR(36) */ \n    `strategy`,\n    /* Replace with a VARCHAR(24) */ \n    `userName`,\n    /* Replace with a ENUM('None','Static','AutoMid','AutoCrx','AutoTrn','SpdrAuto','Spdr10S','Spdr30S','Spdr90S','Spdr5M','Spdr30M','SpdrDay','SmartFast','SmartNorm','FastCrx','FastDark','SlowDark','AlphaVwap1pct','AlphaVwap2pct','AlphaVwap5pct','AlphaVwap25pct','Custom','AwayAlgo') */ \n    `autoHedge`,\n    /* Replace with a ENUM('None','HedgeToZero','HedgeToBand') */ \n    `hedgeTarget`,\n    /* Replace with a FLOAT */ \n    `minHedgeDDelta`,\n    /* Replace with a FLOAT */ \n    `maxHedgeDDelta`,\n    /* Replace with a INT */ \n    `orderSize`,\n    /* Replace with a ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') */ \n    `ssaleFlag`,\n    /* Replace with a INT */\n    `maxExposureSize`,\n    /* Replace with a TINYINT UNSIGNED */\n    `numMakeExchanges`,\n    /* Replace with a ENUM('None','Randomize','MktSize','FullSize','MktSizeA','MktSizeB','MktSizeC','FullSizeR','Max25Pct','Max50Pct','Max75Pct','NoSize') */ \n    `publicSize`,\n    /* Replace with a ENUM('None','Yes','No') */ \n    `canOverlapCxlRepl`,\n    /* Replace with a ENUM('None','Twap','Vwap','TwapReset','VwapReset','FastReset','SlowReset','TwapAlpha','VwapAlpha','TwapAlphaC','VwapAlphaC','AutoComplete','AllowImmediate','Manual','SpdrPulse','IOC') */ \n    `progressRule`,\n    /* Replace with a TINYINT UNSIGNED */ \n    `progressSliceCnt`,\n    /* Replace with a INT */ \n    `progressExposeTime`,\n    /* Replace with a FLOAT */ \n    `vwapParticipation`,\n    /* Replace with a TINYINT UNSIGNED */\n    `minMktOnClosePct`,\n    /* Replace with a FLOAT */ \n    `maxMakeExchFee`,\n    /* Replace with a FLOAT */ \n    `maxTakeExchFee`,\n    /* Replace with a ENUM('None','ExclFee','IncFee') */ \n    `incTakeExchFee`,\n    /* Replace with a ENUM('None','ExclFee','IncFee') */ \n    `incMakeExchFee`,\n    /* Replace with a ENUM('None','MaxPart','FeeOptimal','ImprvOnly','FeeStrict','RoundRobin','ProRataOptim') */ \n    `makeExchRule`,\n    /* Replace with a INT */ \n    `maxChildOrders`,\n    /* Replace with a INT UNSIGNED */ \n    `exchMask`,\n    /* Replace with a ENUM('None','PreMkt','RegMkt','PostMkt','PreRegMkt','RegPostMkt','AllDay') */\n    `marketSession`,\n    /* Replace with a DATETIME(6) */\n    `startDttm`,\n    /* Replace with a INT */ \n    `orderDuration`,\n    /* Replace with a INT */ \n    `activeDuration`,\n    /* Replace with a DATETIME(6) */\n    `goodTillDttm`,\n    /* Replace with a ENUM('None','ActiveTaker','PostOnly','DMA','MktOnOpn','MktOnCls','Facilitate','Matrix','Legger','Seeker','SeekerLegger','CrossResponse','AuctionResponse','MLegAuctionResp','RFQRequest','AwayAlgo','ExchPing','BlockAuction','BlockResponse','SweepTake','CobMaker','FaceOmni','TestParent') */ \n    `parentOrderHandling`,\n    /* Replace with a ENUM('None','PostWith','PostTurn','PostImprove','PostLimit','MaxIntern','PostWthF','PostImprvR','PostFlash','PostFlashW','PostPeg','PostFlashI') */ \n    `parentBalanceHandling`,\n    /* Replace with a ENUM('None','Market','MarketArrival','Prc','PrcDe','PrcDeX','PrcDeT','PrcDeP','PrcDeXT','PrcDeXP','Vol','VolX','PrcV','PrcVX','NoLimit','RelMid','RelJoin','RelCross','SmrtFast','SmrtNorm','RelTurn','PrcDeEm','VolEm','Aux','UPrcPct','PkgNeutral','RcPrem','SynthLimitMM','SynthLimitBW','SynthLimitWW') */ \n    `orderLimitType`,\n    /* Replace with a ENUM('Simple','Surface','Probability','SurfProb') */ \n    `takeLimitClass`,\n    /* Replace with a ENUM('Simple','Surface','Probability','SurfProb') */ \n    `makeLimitClass`,\n    /* Replace with a DOUBLE */ \n    `orderPrcLimit`,\n    /* Replace with a DOUBLE */ \n    `orderPrcOffset`,\n    /* Replace with a ENUM('None','M1','M2','M3','M4') */ \n    `stateModel`,\n    /* Replace with a ENUM('None','Static','Eagle','Hawk','Falcon','Relative') */ \n    `takeAlphaType`,\n    /* Replace with a ENUM('None','Static','Eagle','Hawk','Falcon','Relative') */ \n    `makeAlphaType`,\n    /* Replace with a FLOAT */ \n    `takeAlphaFactor`,\n    /* Replace with a FLOAT */ \n    `makeAlphaFactor`,\n    /* Replace with a FLOAT */ \n    `takeProbability`,\n    /* Replace with a FLOAT */ \n    `makeProbability`,\n    /* Replace with a DATETIME(6) */\n    `timestamp`\n) \nVALUES(\n    'Example_accnt',\n    'Example_riskGroupId',\n    'None',\n    'None',\n    'Example_hedgeSecKey_tk',\n    123,\n    1,\n    1,\n    'None',\n    'Example_clientFirm',\n    'Example_altOrderId',\n    'Example_altAccnt',\n    'Example_altUserName',\n    'Example_srcRoutingCode',\n    'dummy tiny text',\n    'Example_externExDest',\n    'dummy tiny text',\n    'Example_strategy',\n    'Example_userName',\n    'None',\n    'None',\n    1.23,\n    1.23,\n    5,\n    'None',\n    5,\n    1,\n    'None',\n    'None',\n    'None',\n    1,\n    5,\n    1.23,\n    1,\n    1.23,\n    1.23,\n    'None',\n    'None',\n    'None',\n    5,\n    0,\n    'RegMkt',\n    '2022-01-01 12:34:56.000000',\n    5,\n    5,\n    '2022-01-01 12:34:56.000000',\n    'None',\n    'None',\n    'None',\n    'Simple',\n    'Simple',\n    4.56,\n    4.56,\n    'None',\n    'None',\n    'None',\n    1.23,\n    1.23,\n    1.23,\n    1.23,\n    '2022-01-01 12:34:56.000000'\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"delete-table-example-query",children:"DELETE TABLE EXAMPLE QUERY"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"DELETE FROM `SRTrade`.`MsgAutoHedgeControlGateway` \nWHERE\n    /* Replace with a VARCHAR(16) */ \n    `accnt` = 'Example_accnt'\n  AND\n    /* Replace with a CHAR(19) */\n    `riskGroupId` = 'Example_riskGroupId'\n  AND\n    /* Replace with a ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') */\n    `hedgeSecKey_at` = 'None'\n  AND\n    /* Replace with a ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','EUX','ANY','CXE','DXE','NXAM','NXBR','NXLS','NXML','NXOS','NXP','EUREX','CEDX','ICEFE') */\n    `hedgeSecKey_ts` = 'None'\n  AND\n    /* Replace with a VARCHAR(12) */\n    `hedgeSecKey_tk` = 'Example_hedgeSecKey_tk'\n  AND\n    /* Replace with a SMALLINT UNSIGNED */\n    `hedgeSecKey_yr` = 123\n  AND\n    /* Replace with a TINYINT UNSIGNED */ \n    `hedgeSecKey_mn` = 1\n  AND\n    /* Replace with a TINYINT UNSIGNED */ \n    `hedgeSecKey_dy` = 1\n  AND\n    /* Replace with a ENUM('None','Stock','Future','Option','MLeg') */ \n    `hedgeSecType` = 'None'\n  AND\n    /* Replace with a VARCHAR(16) */ \n    `clientFirm` = 'Example_clientFirm';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"doc-columns-query",children:"Doc Columns Query"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM SRTrade.doccolumns WHERE TABLE_NAME='AutoHedgeControlGateway' ORDER BY ordinal_position ASC;\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var r=t(96540);const a={},i=r.createContext(a);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);