"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[71003],{39143:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=r(74848),s=r(28453);const o={title:"Formula Base Limits",sidebar_position:4},n=void 0,a={id:"SpiderRockConnectATS/FormulaBasedLimits",title:"Formula Base Limits",description:"SpiderRock Connect Limit Types",source:"@site/docs/SpiderRockConnectATS/4.FormulaBasedLimits.md",sourceDirName:"SpiderRockConnectATS",slug:"/SpiderRockConnectATS/FormulaBasedLimits",permalink:"/docs/SpiderRockConnectATS/FormulaBasedLimits",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Formula Base Limits",sidebar_position:4},sidebar:"spiderRockConnectATSSidebar",previous:{title:"FLASH Auctions",permalink:"/docs/SpiderRockConnectATS/FlashAuctions"},next:{title:"Responder Allocation Rule",permalink:"/docs/SpiderRockConnectATS/MatchAllocations"}},c={},d=[{value:"SpiderRock Connect Limit Types",id:"spiderrock-connect-limit-types",level:2}];function l(e){const t={h2:"h2",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"spiderrock-connect-limit-types",children:"SpiderRock Connect Limit Types"}),"\n",(0,i.jsx)(t.p,{children:"SpiderRock Connect auctions allow both initiators and responders to use formula based limit prices.  These prices are resolved at the start of a trial auction price and become the actionable match price levels at which trading can occur."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Limit Types"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Static"})}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"MatchPrice = StaticPrice"})," ",(0,i.jsx)("br",{}),"Maintains an unadjusted price for the life of the order. This is also known as \u201cPackage\u201d for spreads than contain more than one leg."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Neutral"})}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"MatchPrice = NeutralPrice + StockDir * 0.01 * StockShares * URefPrice"})," ",(0,i.jsx)("br",{}),"This LimitType is available as a convenience for option spreads that contain a stock leg. NeutralPrice can be interpreted as the price for the option legs of the spread by themselves. The resulting MatchPrice is static for the life of the order (does not change as all parts are also static)."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"RC Premium"})}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:"MatchPrice = NeutralPrice - StockDir * StrikePrice"})," ",(0,i.jsx)("br",{}),"This limit type is only available for reversal/conversion strategies and is also for convenience as the resulting MatchPrice remains static for the life of the order."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsxs)(t.strong,{children:["Delta ",(0,i.jsx)("br",{})," (2-way)"]})}),(0,i.jsxs)(t.td,{children:[(0,i.jsxs)(t.strong,{children:["MatchPrice = Delta2WayPrice + refDelta * dUPrc + 0.5 * refGamma * dUPrc * dUPrc where: ",(0,i.jsx)("br",{}),"dUPrc = uPrcNbboMid - URefPrice (URefType=Mid) OR ",(0,i.jsx)("br",{}),"dUPrc = uPrcNbboCross - URefPrice (URefType=Cross)"]})," ",(0,i.jsx)("br",{}),"This limit type is used to dynamically adjust the limit price on outright option series as well as option spreads with and without stock legs. For spreads that include a stock leg Delta (2-way) will allow the user to adjust on a delta that is different from the stock ratio used on the package.  refDelta, refGamma, and uRefType and uRefPrice can be selected by the party entering the order or they can default to SpiderRock suggested values. Note that uPrcNbboCross is interpreted as relative to the underlier direction that would be necessary to hedge the series or spread refDelta. (ie. BID for positive refDelta, and ASK for negative refDelta). Also note that the initiator and responder(s) do NOT need to agree on the refDelta, refGamma, uRefType, or uRefPrice"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsxs)(t.strong,{children:["Delta ",(0,i.jsx)("br",{})," (1-way)"]})}),(0,i.jsxs)(t.td,{children:[(0,i.jsxs)(t.strong,{children:["MatchPrice = Delta1WayPrice OR Delta1WayPrice + refDelta * dUPrc + 0.5 * refGamma * dUPrc * dUPrc (whichever is less agressive) where: ",(0,i.jsx)("br",{}),"dUPrc = uPrcNbboMid - URefPrice (URefType=Mid) OR ",(0,i.jsx)("br",{}),"dUPrc = uPrcNbboCross - URefPrice (URefType=Cross)"]})," ",(0,i.jsx)("br",{}),"This limit type differs from Delta (2-way) in that the adjustment is bounded by the original (starting) limit.  This limit type is most useful for clients who wish to take advantage of a dynamic limit but have a level above or below which they do not want to trade."]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>a});var i=r(96540);const s={},o=i.createContext(s);function n(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);