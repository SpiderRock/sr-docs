"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[15342],{43165:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>n,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=t(74848),i=t(28453);const r={title:"Platform Architecture"},n=void 0,o={id:"Documentation/PlatformFeatures/PlatformArchitecture",title:"Platform Architecture",description:"Overview",source:"@site/docs/Documentation/PlatformFeatures/PlatformArchitecture.md",sourceDirName:"Documentation/PlatformFeatures",slug:"/Documentation/PlatformFeatures/PlatformArchitecture",permalink:"/docs/Documentation/PlatformFeatures/PlatformArchitecture",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Platform Architecture"},sidebar:"documentationSidebar",previous:{title:"Order Execution",permalink:"/docs/Documentation/PlatformFeatures/OrderExecution/"},next:{title:"Risk Management",permalink:"/docs/Documentation/PlatformFeatures/RiskManagement/"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"Message Design",id:"message-design",level:2},{value:"Message Life Cycle",id:"message-life-cycle",level:3},{value:"Message Transport and Update",id:"message-transport-and-update",level:3},{value:"Message Organization",id:"message-organization",level:3},{value:"MBus Security Keys",id:"mbus-security-keys",level:3},{value:"MBus Access APIs",id:"mbus-access-apis",level:3},{value:"SRSE",id:"srse",level:4},{value:"MLink",id:"mlink",level:4},{value:"Message Archiving",id:"message-archiving",level:3}];function d(e){const s={h2:"h2",h3:"h3",h4:"h4",p:"p",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(s.p,{children:"The SpiderRock Platform is a data processing system that enables both trading and risk management at scale. Most of the message traffic created by the equity, future, and option markets are captured and described by millions of messages within SpiderRock. These messages are categorized into several hundred distinct message classes and are transported between the multiple processes that a production instance of the platform consists of."}),"\n",(0,a.jsx)(s.p,{children:"These messages, in various contexts, are referred to as records, instances, classes, or objects and make up the SpiderRock message bus (MBus) framework. These messages are actively distributed within and between SpiderRock datacenters and service process and are used between UI tools and backend servers.  Additionally, a subset of these messages is used for communication between SpiderRock systems and client systems."}),"\n",(0,a.jsx)(s.h2,{id:"message-design",children:"Message Design"}),"\n",(0,a.jsx)(s.p,{children:"MBus messages comprise of a collection of fields with typical types (string, float, double, int, text, etc.). Each of these collections can have repeating groups (small groups of fields that repeat 0 to N times within a message). The standard size of individual MBus messages, inclusive of all repeating groups, is less than 10KB in binary format. In other formats, the size can be somewhat smaller or larger."}),"\n",(0,a.jsx)(s.p,{children:"Most MBus messages have unique primary keys and are typically processed sequentially with each new message fully replacing any previous message with the same primary key. Message processing is optimized for the extremely high data update rates typically associated with market data. It is routine for individual SpiderRock server processes to consume market data messages at sustained rates exceeding 1 million msg/sec (binary encode/decode latency < 1us) while utilizing only one core on either the producing or consuming server."}),"\n",(0,a.jsx)(s.p,{children:"All MBus messages have well-defined schemas and can be transformed into a number of protocols including SR binary (proprietary), JSON, Protobuf, AVRO, Parquet, and simple CSV or TAB formats. These message schemas can be programmatically accessed via both SRSE (MariaDB tables) and MLink (HTTP/REST/web-socket) APIs, as well as by accessing file formats with embedded schema support (AVRO and Parquet)."}),"\n",(0,a.jsx)(s.p,{children:"The SpiderRock internal MBus message set contains a mix of public, exchange controlled, external vendor controlled, and client firm specific messages. Access to individual messages within the system is limited to clients / users with the appropriate credentials and permissions with appropriate ACL rules strictly enforced in the SRSE and MLink APIs and all UI tools."}),"\n",(0,a.jsx)(s.h3,{id:"message-life-cycle",children:"Message Life Cycle"}),"\n",(0,a.jsx)(s.p,{children:"The life span of messages can vary. In general, messages multicast between processes will live until proactively deleted. As this is a distributed system, messages can be deleted either locally within a single process or they can be marked as deleted and sent to the other remote processes in the system. Distributed deletion is on a best effort basis (no guarantee of successful deletion throughout the cluster). However, all processes in the system typically stop and re-start at regular intervals (daily, weekly, etc.) that coincide with natural lulls in market activity.  On restart, processes request current copies of all active (non-deleted) messages that are currently tracking from a cluster of MLink/Cache servers. This ensures that messages will eventually be purged from the system even if a distributed delete fails for some reason."}),"\n",(0,a.jsx)(s.p,{children:"Proactive message deletion can be initiated by any process in the system. However, most deletion events are initiated by one of the MLink/Cache servers as part of a message cleanup operation.  At regular intervals (usually every 30 minutes), all MLink/Cache servers sweep through all in-memory messages and check each message for deletion by rule. If a message deletion rule is in effect and triggered, the MLink/Cache server will initiate a distributed delete for that individual message."}),"\n",(0,a.jsx)(s.h3,{id:"message-transport-and-update",children:"Message Transport and Update"}),"\n",(0,a.jsx)(s.p,{children:"There are multiple core server processes and each of which internally multicast (or send) messages to other peer processes. In-memory copies are maintained of most, if not all, messages received from peers."}),"\n",(0,a.jsx)(s.p,{children:"On a typical day, there will be around a total of 500 different message types and around 100 million total message instances (unique primary keys) that make up the SpiderRock MBus data collection. These messages can update at sustained rates of (at most) 1,000,000 records per second during market hours."}),"\n",(0,a.jsx)(s.p,{children:"Data transport at these rates is performed by utilizing specialized (40GB/100GB FPGA/Kernel Bypass) network cards and highly optimized software drivers along with high performance code generated message serialization/deserialization techniques. Core CPU to CPU transport latencies are typically less than 10 microseconds for 99.99% of all packets/records."}),"\n",(0,a.jsx)(s.h3,{id:"message-organization",children:"Message Organization"}),"\n",(0,a.jsx)(s.p,{children:"SpiderRock MBus messages are organized into subjects or groups denoted by MLink Tokens such as: EquityDefinition, EqtMktData, OptMktData, OptAnalytics, ClientRisk, etc."}),"\n",(0,a.jsx)(s.p,{children:"MLink Tokens organization allows medium grain organization of message classes for both resource provisioning as well as query and ACL/product organization.  Typically, for example, clients of the external platform APIs will be provisioned for access to a specific list of MLink Tokens and will be charged only for the tokens they have access to."}),"\n",(0,a.jsx)(s.p,{children:"Also, individual MBus messages can (but are not required to) have one or more of the following standard fields: StripeKey, ClientFirm, TickerKey, ExpiryKey, OptionKey, UserName."}),"\n",(0,a.jsx)(s.p,{children:"These are sometimes referred to as XRay fields and are used to systematically control access record instances and to organize message instance streams into stripe groups for load balancing."}),"\n",(0,a.jsx)(s.h3,{id:"mbus-security-keys",children:"MBus Security Keys"}),"\n",(0,a.jsx)(s.p,{children:"MBus messages feature a set of standard security keys (TickerKey, ExpiryKey, and OptionKey). These security keys are composable and make up a consistent set of keys for referring to all the market and products described by the platform."}),"\n",(0,a.jsx)(s.p,{children:"A TickerKey consists of the triple (Ticker, TickerSrc, and AssetType) where Ticker is a string of up to 12 characters and TickerSrc and AssetType are single byte enums."}),"\n",(0,a.jsx)(s.p,{children:"These securities keys represent unique reference keys for the variety of tradeable instruments and related structures in the platform and are often found in the primary keys of MBus messages.  The exact instrument that a given key refers to depends on the context in which the key use found."}),"\n",(0,a.jsx)(s.p,{children:"For example, within the TickerDefinition.PKey set, the TickerKey (MSFT-NMS-EQT) refers to Microsoft listed stock shares but within the RootDefinition.PKey the same TickerKey (MSFT-NMS-EQT) would refer to Microsoft listed equity options."}),"\n",(0,a.jsx)(s.p,{children:"Depending on context, individual TickerKeys can refer to stock shares, future roots, commodity codes, option roots, and other items. A TickerKey in general, can refer to anything that can be uniquely keyed by a (Symbol, TickerSrc, AssetType) triple."}),"\n",(0,a.jsx)(s.p,{children:"Similarly, an ExpiryKey consists of a TickerKey + ExpiryDate and an OptionKey refers to an ExpiryKey + Strike + CallPutFlag."}),"\n",(0,a.jsx)(s.h3,{id:"mbus-access-apis",children:"MBus Access APIs"}),"\n",(0,a.jsx)(s.p,{children:"The platform features two primary APIs for receiving and publishing MBus messages: SRSE and MLink."}),"\n",(0,a.jsx)(s.h4,{id:"srse",children:"SRSE"}),"\n",(0,a.jsx)(s.p,{children:"SRSE is a proprietary custom MariaDB storage engine that is accessible remotely using standard MySQL/MariaDB database drivers. This access point features SQL-like access to all underlying MBus messages including live market data messages and live trading messages. Client programs can access data via SQL select statements and can also, for some message types, send messages to the platform by inserting either individual records or complete files of records."}),"\n",(0,a.jsx)(s.p,{children:"With this API, the SRSE storage engine acts as a gateway between the live in-memory messages that make up the platform and the database engine.  SELECT statements are returning data from this in-memory message backing store and INSERT statements are publishing messages both into this in-memory message store and through the platform."}),"\n",(0,a.jsx)(s.p,{children:"This API supports the normal complement of SQL statements including indexes, where clauses, and joins and it has very high performance for most fast batch style interactions."}),"\n",(0,a.jsx)(s.h4,{id:"mlink",children:"MLink"}),"\n",(0,a.jsx)(s.p,{children:"With this API, client programs initiate HTTP/GET, HTTP/POST, or HTTP/WS connections and then send or receive either JSON or Protobuf encoded messages. MLink offers access to the same basic messages as SRSE however MLink is optimized for very fast / stateless GET/POST operations using standard web application technology and does not allow complex joins between messages. Additionally, the MLink API supports subscriptions and active (asynchronous) streaming of messages for applications that require relatively low latency (1-2ms) message notification / delivery."}),"\n",(0,a.jsx)(s.h3,{id:"message-archiving",children:"Message Archiving"}),"\n",(0,a.jsx)(s.p,{children:"Individual MBus messages can be archived to either ElasticSearch (JSON) and the SpiderRock private HDFS cluster (AVRO) by any core platform server. Specialized DataArchive servers run continuously during normal market hours and publish copies of market related messages at regular intervals (every minute, every 5 minutes, end-of-trading period, etc.) to the HDFS cluster.  These messages are a primary source information for SpiderRock historical data products."})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>n,x:()=>o});var a=t(96540);const i={},r=a.createContext(i);function n(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);