"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[50168],{18455:(e,N,r)=>{r.r(N),r.d(N,{assets:()=>L,contentTitle:()=>T,default:()=>i,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var n=r(74848),E=r(28453);const s={title:"SpreadBookMarkup"},T=void 0,a={id:"MessageSchemas/Schema/SRSE Products/SRSpread/SpreadBookMarkup/SpreadBookMarkup",title:"SpreadBookMarkup",description:"V8 Message Definition",source:"@site/docs/MessageSchemas/Schema/SRSE Products/SRSpread/SpreadBookMarkup/SpreadBookMarkup.md",sourceDirName:"MessageSchemas/Schema/SRSE Products/SRSpread/SpreadBookMarkup",slug:"/MessageSchemas/Schema/SRSE Products/SRSpread/SpreadBookMarkup/",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRSpread/SpreadBookMarkup/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"SpreadBookMarkup"},sidebar:"messageSchemasSidebar",previous:{title:"SRSpread",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRSpread/"},next:{title:"SpreadBookQuote",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRSpread/SpreadBookQuote/"}},L={},o=[];function t(e){const N={a:"a",code:"code",p:"p",pre:"pre",...(0,E.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(N.p,{children:(0,n.jsx)(N.a,{href:"../../../Topics/market-data-spreads/SpreadBookMarkup",children:"V8 Message Definition"})}),"\n",(0,n.jsx)(N.pre,{children:(0,n.jsx)(N.code,{className:"language-sql",children:"CREATE TABLE `SRSpread`.`MsgSpreadBookMarkup` (\n    `skey_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'SR Spread Key (should have corresponding ProductDefinition record)',\n    `skey_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'SR Spread Key (should have corresponding ProductDefinition record)',\n    `skey_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'SR Spread Key (should have corresponding ProductDefinition record)',\n    `isTest` ENUM('None','Yes','No') NOT NULL DEFAULT 'None' COMMENT 'Yes indicates that response is made of entirely of isTest=Yes SpreadExchOrders',\n    `ticker_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'common spread underlier',\n    `ticker_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'common spread underlier',\n    `ticker_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'common spread underlier',\n    `SRspreadID` BIGINT NOT NULL DEFAULT 0,\n    `priceFormat` ENUM('None','N0','N1','N2','N3','N4','N5','N6','N7','F4','F8','Q8','F16','F32','H32','Q32','F64','H64','FullPenny','PartPenny','PartNickle','EQT','V1','V2','V3','V4','V5','V6','V7','V8','V9','V10','V11','V12','V13','V14','V15','A0','A1','A2','A3','A4','A5','A6','A7','E32') NOT NULL DEFAULT 'None',\n    `bidPrice1` DOUBLE NOT NULL DEFAULT 0 COMMENT 'bid price',\n    `isBidPrice1Valid` ENUM('None','Yes','No') NOT NULL DEFAULT 'None',\n    `askPrice1` DOUBLE NOT NULL DEFAULT 0 COMMENT 'ask price',\n    `isAskPrice1Valid` ENUM('None','Yes','No') NOT NULL DEFAULT 'None',\n    `bidSize1` INT NOT NULL DEFAULT 0 COMMENT 'cumulative size at bidPrice',\n    `askSize1` INT NOT NULL DEFAULT 0 COMMENT 'cumulative size at askPrice',\n    `bidMask1` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'exchange bid bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)',\n    `askMask1` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'exchange ask bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)',\n    `bidExch1` ENUM('None','AMEX','BOX','CBOE','ISE','NYSE','PHLX','NSDQ','BATS','C2','NQBX','MIAX','GMNI','CME','CBOT','NYMEX','COMEX','ICE','EDGO','MCRY','MPRL','SDRK','DQTE','EMLD','CFE','MEMX','EUREX','CEDX','NXAM','NXBR','NXLS','NXML','NXOS','NXP','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'exchange at bid price with the largest size (if any)',\n    `askExch1` ENUM('None','AMEX','BOX','CBOE','ISE','NYSE','PHLX','NSDQ','BATS','C2','NQBX','MIAX','GMNI','CME','CBOT','NYMEX','COMEX','ICE','EDGO','MCRY','MPRL','SDRK','DQTE','EMLD','CFE','MEMX','EUREX','CEDX','NXAM','NXBR','NXLS','NXML','NXOS','NXP','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'exchange at ask price with the largest size (if any)',\n    `bidTime` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT 'last bid price or size change',\n    `askTime` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT 'last ask price or size change',\n    `updateType` ENUM('None','PrcChange','SizeOnly','PrevPeriod') NOT NULL DEFAULT 'None',\n    `numStkLegs` TINYINT UNSIGNED NOT NULL DEFAULT 0,\n    `numFutLegs` TINYINT UNSIGNED NOT NULL DEFAULT 0,\n    `numOptLegs` TINYINT UNSIGNED NOT NULL DEFAULT 0,\n    `userDefined` ENUM('None','Yes','No') NOT NULL DEFAULT 'None',\n    `spreadClass` ENUM('None','Stk','Fut','Call','Put','Synth','RevCon','Box','JRoll','Roll','Straddle','Strangle','CSpread','PSpread','VStrip','VSpread','HStrip','HSpread','BFly','RiskRev','Mixed','VarSwap') NOT NULL DEFAULT 'None',\n    `containsHedge` ENUM('None','Yes','No') NOT NULL DEFAULT 'None',\n    `legBidPrc` DOUBLE NOT NULL DEFAULT 0,\n    `legAskPrc` DOUBLE NOT NULL DEFAULT 0,\n    `legBidSz` INT NOT NULL DEFAULT 0,\n    `legAskSz` INT NOT NULL DEFAULT 0,\n    `surfPrc` DOUBLE NOT NULL DEFAULT 0,\n    `surfDelta` FLOAT NOT NULL DEFAULT 0,\n    `surfGamma` FLOAT NOT NULL DEFAULT 0,\n    `surfVega` FLOAT NOT NULL DEFAULT 0,\n    `surfWtVega` FLOAT NOT NULL DEFAULT 0,\n    `surfError` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'error code from surface price calc (if any)',\n    `minExpiry` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT 'expiry of earliest option leg(s)',\n    `maxExpiry` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT 'expiry of latest option leg(s)',\n    `minYears` FLOAT NOT NULL DEFAULT 0,\n    `maxYears` FLOAT NOT NULL DEFAULT 0,\n    `refUPrc` FLOAT NOT NULL DEFAULT 0 COMMENT 'reference underlier price',\n    `printPrice` FLOAT NOT NULL DEFAULT 0 COMMENT 'last spread print price (if any)',\n    `printTime` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000',\n    `printSize` INT NOT NULL DEFAULT 0 COMMENT 'last spread print size (if any)',\n    `printVolume` INT NOT NULL DEFAULT 0,\n    `grpNum` INT NOT NULL DEFAULT 0,\n    `securityDesc` VARCHAR(24) NOT NULL DEFAULT '',\n    `filterId` BIGINT NOT NULL DEFAULT 0 COMMENT 'tool server filter request ID',\n    `timestamp` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000',\n    `MarkupLegsList` JSON NOT NULL DEFAULT JSON_OBJECT() CHECK(JSON_VALID(MarkupLegsList)),\n    PRIMARY KEY USING HASH (`skey_tk`,`skey_at`,`skey_ts`,`isTest`)\n) ENGINE=SRSE DEFAULT CHARSET=LATIN1 COMMENT='Live spread quotes with SpiderRock markup details for equity and future option spreads.';\n\n"})})]})}function i(e={}){const{wrapper:N}={...(0,E.R)(),...e.components};return N?(0,n.jsx)(N,{...e,children:(0,n.jsx)(t,{...e})}):t(e)}},28453:(e,N,r)=>{r.d(N,{R:()=>T,x:()=>a});var n=r(96540);const E={},s=n.createContext(E);function T(e){const N=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(N):{...N,...e}}),[N,e])}function a(e){let N;return N=e.disableParentContext?"function"==typeof e.components?e.components(E):e.components||E:T(e.components),n.createElement(s.Provider,{value:N},e.children)}}}]);