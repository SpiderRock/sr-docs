"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["59786"],{94148:function(e,r,i){i.r(r),i.d(r,{default:()=>x,frontMatter:()=>a,metadata:()=>n,assets:()=>o,toc:()=>h,contentTitle:()=>c});var n=JSON.parse('{"id":"MessageSchemas/Schema/Topics/execution-engine/SpdrRiskExecution","title":"SpdrRiskExecution","description":"SpdrRiskExecution records are published every time a SpdrParentExecution record is published","source":"@site/versioned_docs/version-8.5.3.3/MessageSchemas/Schema/Topics/2270-execution-engine/SpdrRiskExecution.md","sourceDirName":"MessageSchemas/Schema/Topics/2270-execution-engine","slug":"/MessageSchemas/Schema/Topics/execution-engine/SpdrRiskExecution","permalink":"/docs/8.5.3.3/MessageSchemas/Schema/Topics/execution-engine/SpdrRiskExecution","draft":false,"unlisted":false,"tags":[],"version":"8.5.3.3","frontMatter":{"title":"SpdrRiskExecution"},"sidebar":"messageSchemasSidebar","previous":{"title":"ExternAggGroupReport","permalink":"/docs/8.5.3.3/MessageSchemas/Schema/Topics/execution-engine/ExternAggGroupReport"},"next":{"title":"SpdrSweepDetail","permalink":"/docs/8.5.3.3/MessageSchemas/Schema/Topics/execution-engine/SpdrSweepDetail"}}'),l=i("52676"),s=i("91503"),t=i("71386"),d=i("9641");let a={title:"SpdrRiskExecution"},c="Schema: SpdrRiskExecution (ID: 2325)",o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){let r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r.header,{children:(0,l.jsxs)(r.h1,{id:"schema-spdrriskexecution-id-2325",children:["Schema: SpdrRiskExecution ",(0,l.jsx)("span",{className:"small-text",children:"(ID: 2325)"})]})}),"\n",(0,l.jsx)(r.p,{children:"SpdrRiskExecution records are published every time a SpdrParentExecution record is published"}),"\n",(0,l.jsx)(r.h3,{id:"metadata",children:"METADATA"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{children:"Attribute"}),(0,l.jsx)(r.th,{children:"Value"})]})}),(0,l.jsxs)(r.tbody,{children:[(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"Topic"}),(0,l.jsx)(r.td,{children:"2270-execution-engine"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"MLink Token"}),(0,l.jsx)(r.td,{children:"ClientTrading"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"SRSE Product"}),(0,l.jsx)(r.td,{children:"SRTrade"})]})]})]}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"Note:"})," The symbol ",(0,l.jsx)(r.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"body",children:"BODY"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{children:"#"}),(0,l.jsx)(r.th,{children:"Field"}),(0,l.jsx)(r.th,{children:"Type"}),(0,l.jsx)(r.th,{children:"Comment"})]})}),(0,l.jsxs)(r.tbody,{children:[(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"10="}),(0,l.jsx)(r.td,{children:"fillNumber"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SpiderRock execution number (globally unique over trailing 10 days)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"100"}),(0,l.jsx)(r.td,{children:"sysRealm"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SysRealm",children:"enum : SysRealm"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"103"}),(0,l.jsx)(r.td,{children:"sysEnvironment"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SysEnvironment",children:"enum : SysEnvironment"})}),(0,l.jsx)(r.td,{children:"original (source) sys environment [Stable, Current, etc]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"106"}),(0,l.jsx)(r.td,{children:"runStatus"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RunStatus",children:"enum : RunStatus"})}),(0,l.jsx)(r.td,{children:"original (source) run status [Prod,Beta]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"109"}),(0,l.jsx)(r.td,{children:"version"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"112"}),(0,l.jsx)(r.td,{children:"execStatus"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ExecStatus",children:"enum : ExecStatus"})}),(0,l.jsx)(r.td,{children:"SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"115"}),(0,l.jsx)(r.td,{children:"execShape"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ExecShape",children:"enum : ExecShape"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"118"}),(0,l.jsx)(r.td,{children:"packageId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR package Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"121"}),(0,l.jsx)(r.td,{children:"parentNumber"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR parent number"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"124"}),(0,l.jsx)(r.td,{children:"parentVersion"}),(0,l.jsx)(r.td,{children:"short"}),(0,l.jsx)(r.td,{children:"SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"127"}),(0,l.jsx)(r.td,{children:"baseParentNumber"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"130"}),(0,l.jsx)(r.td,{children:"clOrdId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR child order clOrdID resulting in fill"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"133"}),(0,l.jsx)(r.td,{children:"riskGroupId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"riskGroupId (parent order group ID) for this execution report"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"142"}),(0,l.jsx)(r.td,{children:"parentShape"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrOrderShape",children:"enum : SpdrOrderShape"})}),(0,l.jsx)(r.td,{children:"shape of originating parent order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"145"}),(0,l.jsx)(r.td,{children:"secKey"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"execution security key"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"148"}),(0,l.jsx)(r.td,{children:"secType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{children:"execution security type [Stock, Future, Option]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"151"}),(0,l.jsx)(r.td,{children:"ticker"}),(0,l.jsx)(r.td,{children:"TickerKey"}),(0,l.jsx)(r.td,{children:"base stock key (used for symbol risk aggregation)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"154"}),(0,l.jsx)(r.td,{children:"accnt"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"SpiderRock trading accnt [broker pkey]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"157"}),(0,l.jsx)(r.td,{children:"clientFirm"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"SR client firm"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"160"}),(0,l.jsx)(r.td,{children:"spdrSource"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrSource",children:"enum : SpdrSource"})}),(0,l.jsx)(r.td,{children:"SpiderRock parent order source code [broker pkey]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"163"}),(0,l.jsx)(r.td,{children:"groupingCode"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SpiderRock parent broker number [broker pkey]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"353"}),(0,l.jsx)(r.td,{children:"engineName"}),(0,l.jsx)(r.td,{children:"string(32)"}),(0,l.jsx)(r.td,{children:"SpiderRock execution engine that handled the parent order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"169"}),(0,l.jsx)(r.td,{children:"execRole"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ExecRole",children:"enum : ExecRole"})}),(0,l.jsx)(r.td,{children:"SpiderRock relationship to this execution record"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"172"}),(0,l.jsx)(r.td,{children:"childOrderHandling"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"child order handling string from the algo that generated the child order responsible for this fill"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"175"}),(0,l.jsx)(r.td,{children:"childAlgoHandler"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ChildHandler",children:"enum : ChildHandler"})}),(0,l.jsx)(r.td,{children:"algo handler for this child order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"178"}),(0,l.jsx)(r.td,{children:"childSSaleFlag"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{children:"short sale flag"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"181"}),(0,l.jsx)(r.td,{children:"userName"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"user name associated with the parent order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"184"}),(0,l.jsx)(r.td,{children:"orderSide"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{children:"order side"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"187"}),(0,l.jsx)(r.td,{children:"spdrOrderStatus"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrOrderStatus",children:"enum : SpdrOrderStatus"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"190"}),(0,l.jsx)(r.td,{children:"spdrCloseReason"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrCloseReason",children:"enum : SpdrCloseReason"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"193"}),(0,l.jsx)(r.td,{children:"cumFillQuantity"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"cumulative fills (this parent number only)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"196"}),(0,l.jsx)(r.td,{children:"avgFillPrice"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"199"}),(0,l.jsx)(r.td,{children:"cumLegFillQuantity"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"cumulative fills (spread only)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"202"}),(0,l.jsx)(r.td,{children:"avgLegFillPrice"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"205"}),(0,l.jsx)(r.td,{children:"leavesQty"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"208"}),(0,l.jsx)(r.td,{children:"priceType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PriceType",children:"enum : PriceType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"211"}),(0,l.jsx)(r.td,{children:"firmType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/FirmType",children:"enum : FirmType"})}),(0,l.jsx)(r.td,{children:"child order firm type [Customer, ProCust, Firm, MM, etc]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"214"}),(0,l.jsx)(r.td,{children:"priAggGroup"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"primary aggregation group"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"217"}),(0,l.jsx)(r.td,{children:"secAggGroup"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"secondary aggregation group"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"220"}),(0,l.jsx)(r.td,{children:"fillTransactDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"transaction date/time as reported by exchange or down stream broker"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"223"}),(0,l.jsx)(r.td,{children:"fillDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"Date/time of fill arrival (SRDateTime)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"226"}),(0,l.jsx)(r.td,{children:"fillExch"}),(0,l.jsx)(r.td,{children:"string(12)"}),(0,l.jsx)(r.td,{children:"ExDest code from child order execution report"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"229"}),(0,l.jsx)(r.td,{children:"fillExecId"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"street side execution Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"232"}),(0,l.jsx)(r.td,{children:"fillExecRefId"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"street side execution ref Id (only used when busting an execution)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"235"}),(0,l.jsx)(r.td,{children:"fillLegRefId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"legRefId for multileg fills"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"238"}),(0,l.jsx)(r.td,{children:"fillLegRatio"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"legRatio (if spread order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"241"}),(0,l.jsx)(r.td,{children:"fillExchFee"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"SpiderRock estimate of the exchange fee based on liquidity tags (best effort)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"244"}),(0,l.jsx)(r.td,{children:"fillMarket"}),(0,l.jsx)(r.td,{children:"string(8)"}),(0,l.jsx)(r.td,{children:"usually from execReport.lastMkt as reported by child order venue"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"247"}),(0,l.jsx)(r.td,{children:"fillPrice"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"fill price"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"250"}),(0,l.jsx)(r.td,{children:"fillQuantity"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"fill quantity"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"253"}),(0,l.jsx)(r.td,{children:"fillBid"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market bid @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"256"}),(0,l.jsx)(r.td,{children:"fillAsk"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market ask @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"259"}),(0,l.jsx)(r.td,{children:"fillMark"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"mid-market (or SR surface price if option) @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"262"}),(0,l.jsx)(r.td,{children:"fillUBid"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier market bid @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"265"}),(0,l.jsx)(r.td,{children:"fillUAsk"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier market bid @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"268"}),(0,l.jsx)(r.td,{children:"fillVol"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill volatility @ fillLimitRefUPrc"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"271"}),(0,l.jsx)(r.td,{children:"fillVe"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill vega"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"274"}),(0,l.jsx)(r.td,{children:"fillGa"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill gamma"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"277"}),(0,l.jsx)(r.td,{children:"fillDe"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill delta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"280"}),(0,l.jsx)(r.td,{children:"fillTh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill theta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"286"}),(0,l.jsx)(r.td,{children:"fillBeta"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"SpiderRock estimate of beta to SPX"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"354"}),(0,l.jsx)(r.td,{children:"riskVega"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk vega"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"355"}),(0,l.jsx)(r.td,{children:"riskWtVega"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk gamma"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"356"}),(0,l.jsx)(r.td,{children:"riskNValue"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk delta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"357"}),(0,l.jsx)(r.td,{children:"riskDelta"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk delta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"358"}),(0,l.jsx)(r.td,{children:"riskDDelta"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk ddelta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"359"}),(0,l.jsx)(r.td,{children:"riskRm1"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"360"}),(0,l.jsx)(r.td,{children:"riskRm2"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"361"}),(0,l.jsx)(r.td,{children:"riskRm3"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"362"}),(0,l.jsx)(r.td,{children:"riskRm4"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"363"}),(0,l.jsx)(r.td,{children:"riskRm5"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"364"}),(0,l.jsx)(r.td,{children:"riskRm6"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"365"}),(0,l.jsx)(r.td,{children:"riskRm7"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"366"}),(0,l.jsx)(r.td,{children:"marginUDnVDn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier down, vol down"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"367"}),(0,l.jsx)(r.td,{children:"marginUDnVUp"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier down, vol up"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"368"}),(0,l.jsx)(r.td,{children:"marginUUpVDn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier up, vol down"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"369"}),(0,l.jsx)(r.td,{children:"marginUUpVUp"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier up, vol up"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"370"}),(0,l.jsx)(r.td,{children:"riskU50Dn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier dn 50% shock slide"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"371"}),(0,l.jsx)(r.td,{children:"riskU50Up"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier up 50% shock slide"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"322"}),(0,l.jsx)(r.td,{children:"years"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"years to expiration"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"325"}),(0,l.jsx)(r.td,{children:"underliersPerCn"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"option delivery underliers per contract"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"328"}),(0,l.jsx)(r.td,{children:"underlierType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/UnderlierType",children:"enum : UnderlierType"})}),(0,l.jsx)(r.td,{children:"type of underlier (affects $greek calculations)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"331"}),(0,l.jsx)(r.td,{children:"tickValue"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"$NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"334"}),(0,l.jsx)(r.td,{children:"pointValue"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"$NLV value of a single point change in display premium (pointValue = tickValue / tickSize)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"337"}),(0,l.jsx)(r.td,{children:"pointCurrency"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"340"}),(0,l.jsx)(r.td,{children:"uPrcRatio"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"UPrcRatio (SymbolRatio) from product definition"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"343"}),(0,l.jsx)(r.td,{children:"minTickSize"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"minimum market price variation (dnTickSize if on a boundary)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"346"}),(0,l.jsx)(r.td,{children:"priceFormat"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,l.jsx)(r.td,{children:"SpiderRock price display format code"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"349"}),(0,l.jsx)(r.td,{children:"uPriceFormat"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,l.jsx)(r.td,{children:"SpiderRock underlier price display format code"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"352"}),(0,l.jsx)(r.td,{children:"timestamp"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"timestamp of this record [not necessarily the timestamp of the fill itself]"})]})]})]}),"\n",(0,l.jsx)(r.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsx)(d.Z,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrRiskExecution'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,l.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrRiskExecution'\n\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsx)(d.Z,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrRiskExecution\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrRiskExecution' \\\n--data-urlencode 'view=sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsx)(d.Z,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrRiskExecution\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'sysRealm:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrRiskExecution' \\\n--data-urlencode 'view=sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=sysRealm:ASC'\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsx)(d.Z,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrRiskExecution\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'sysRealm|sysEnvironment|runStatus|execStatus|execShape|parentShape|secType|spdrSource|execRole|childAlgoHandler|childSSaleFlag|orderSide|spdrOrderStatus|spdrCloseReason|priceType|firmType|underlierType|pointCurrency|priceFormat|uPriceFormat\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrRiskExecution' \\\n--data-urlencode 'measure=sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp' \\\n--data-urlencode 'group=sysRealm|sysEnvironment|runStatus|execStatus|execShape|parentShape|secType|spdrSource|execRole|childAlgoHandler|childSSaleFlag|orderSide|spdrOrderStatus|spdrCloseReason|priceType|firmType|underlierType|pointCurrency|priceFormat|uPriceFormat' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,l.jsxs)(t.Z,{children:[(0,l.jsx)(d.Z,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrRiskExecution\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrRiskExecution' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function x(e={}){let{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},9641:function(e,r,i){i.d(r,{Z:()=>s});var n=i("52676");i("75271");var l=i("54461");function s(e){let{children:r,hidden:i,className:s}=e;return(0,n.jsx)("div",{role:"tabpanel",className:(0,l.Z)("tabItem_SSzl",s),hidden:i,children:r})}},71386:function(e,r,i){i.d(r,{Z:()=>f});var n=i("52676"),l=i("75271"),s=i("54461"),t=i("52289"),d=i("3225"),a=i("42834"),c=i("40578"),o=i("35834"),h=i("79616");function u(e){return l.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||l.isValidElement(e)&&function(e){let{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function x(e){let{value:r,tabValues:i}=e;return i.some(e=>e.value===r)}var p=i("44537");function m(e){let{className:r,block:i,selectedValue:l,selectValue:d,tabValues:a}=e,c=[],{blockElementScrollPositionUntilNextRender:o}=(0,t.o5)(),h=e=>{let r=e.currentTarget,i=a[c.indexOf(r)].value;i!==l&&(o(r),d(i))},u=e=>{let r=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let i=c.indexOf(e.currentTarget)+1;r=c[i]??c[0];break}case"ArrowLeft":{let i=c.indexOf(e.currentTarget)-1;r=c[i]??c[c.length-1]}}r?.focus()};return(0,n.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":i},r),children:a.map(e=>{let{value:r,label:i,attributes:t}=e;return(0,n.jsx)("li",{role:"tab",tabIndex:l===r?0:-1,"aria-selected":l===r,ref:e=>c.push(e),onKeyDown:u,onClick:h,...t,className:(0,s.Z)("tabs__item","tabItem_aitt",t?.className,{"tabs__item--active":l===r}),children:i??r},r)})})}function j(e){let{lazy:r,children:i,selectedValue:t}=e,d=(Array.isArray(i)?i:[i]).filter(Boolean);if(r){let e=d.find(e=>e.props.value===t);return e?(0,l.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,n.jsx)("div",{className:"margin-top--md",children:d.map((e,r)=>(0,l.cloneElement)(e,{key:r,hidden:e.props.value!==t}))})}function g(e){let r=function(e){let{defaultValue:r,queryString:i=!1,groupId:n}=e,s=function(e){let{values:r,children:i}=e;return(0,l.useMemo)(()=>{let e=r??u(i).map(e=>{let{props:{value:r,label:i,attributes:n,default:l}}=e;return{value:r,label:i,attributes:n,default:l}});return!function(e){let r=(0,o.lx)(e,(e,r)=>e.value===r.value);if(r.length>0)throw Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[r,i])}(e),[t,p]=(0,l.useState)(()=>(function(e){let{defaultValue:r,tabValues:i}=e;if(0===i.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!x({value:r,tabValues:i}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${i.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}let n=i.find(e=>e.default)??i[0];if(!n)throw Error("Unexpected error: 0 tabValues");return n.value})({defaultValue:r,tabValues:s})),[m,j]=function(e){let{queryString:r=!1,groupId:i}=e,n=(0,d.k6)(),s=function(e){let{queryString:r=!1,groupId:i}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!i)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:r,groupId:i});return[(0,c._X)(s),(0,l.useCallback)(e=>{if(!s)return;let r=new URLSearchParams(n.location.search);r.set(s,e),n.replace({...n.location,search:r.toString()})},[s,n])]}({queryString:i,groupId:n}),[g,f]=function(e){let{groupId:r}=e,i=r?`docusaurus.tab.${r}`:null,[n,s]=(0,h.Nk)(i);return[n,(0,l.useCallback)(e=>{i&&s.set(e)},[i,s])]}({groupId:n}),y=(()=>{let e=m??g;return x({value:e,tabValues:s})?e:null})();return(0,a.Z)(()=>{y&&p(y)},[y]),{selectedValue:t,selectValue:(0,l.useCallback)(e=>{if(!x({value:e,tabValues:s}))throw Error(`Can't select invalid tab value=${e}`);p(e),j(e),f(e)},[j,f,s]),tabValues:s}}(e);return(0,n.jsxs)("div",{className:(0,s.Z)("tabs-container","tabList_ArS0"),children:[(0,n.jsx)(m,{...r,...e}),(0,n.jsx)(j,{...r,...e})]})}function f(e){let r=(0,p.Z)();return(0,n.jsx)(g,{...e,children:u(e.children)},String(r))}},91503:function(e,r,i){i.d(r,{Z:function(){return d},a:function(){return t}});var n=i(75271);let l={},s=n.createContext(l);function t(e){let r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);