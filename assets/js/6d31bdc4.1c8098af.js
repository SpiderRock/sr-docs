"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[45170],{61762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(74848),i=t(28453);const a={title:"Order Management",sidebar_position:4},o=void 0,s={id:"Documentation/PlatformFeatures/OrderManagement/OrderManagement",title:"Order Management",description:"Execution Engine Overview",source:"@site/docs/Documentation/PlatformFeatures/OrderManagement/OrderManagement.md",sourceDirName:"Documentation/PlatformFeatures/OrderManagement",slug:"/Documentation/PlatformFeatures/OrderManagement/",permalink:"/docs/Documentation/PlatformFeatures/OrderManagement/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Order Management",sidebar_position:4},sidebar:"documentationSidebar",previous:{title:"Market Analytics",permalink:"/docs/Documentation/PlatformFeatures/Analytics/"},next:{title:"Execution Algorithms",permalink:"/docs/Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms"}},d={},c=[{value:"Execution Engine Overview",id:"execution-engine-overview",level:2},{value:"Execution Algorithms",id:"execution-algorithms",level:2},{value:"Primary and Secondary Order Limits",id:"primary-and-secondary-order-limits",level:2},{value:"Integrated Risk Controls",id:"integrated-risk-controls",level:2},{value:"Integrated Compliance Controls",id:"integrated-compliance-controls",level:2},{value:"Active Taking",id:"active-taking",level:2},{value:"Active Making",id:"active-making",level:2},{value:"Contingent Cancelling",id:"contingent-cancelling",level:2},{value:"Progression Algos",id:"progression-algos",level:2},{value:"Spreads vs Singles",id:"spreads-vs-singles",level:2},{value:"AutoHedging",id:"autohedging",level:2},{value:"Legging Orders",id:"legging-orders",level:2},{value:"Contingent Taking",id:"contingent-taking",level:2},{value:"Accessing The SpiderRock Connect ATS",id:"accessing-the-spiderrock-connect-ats",level:2},{value:"Exchange Auction Responding",id:"exchange-auction-responding",level:2},{value:"Away Order Routing",id:"away-order-routing",level:2},{value:"Market Data Considerations",id:"market-data-considerations",level:2},{value:"Embedded Exchange Simulators",id:"embedded-exchange-simulators",level:2},{value:"TCA Metrics",id:"tca-metrics",level:2}];function l(e){const n={h2:"h2",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"execution-engine-overview",children:"Execution Engine Overview"}),"\n",(0,r.jsx)(n.p,{children:"SpiderRock Execution Engines are at the center of order and execution management within the SpiderRock platform.  Each of these engines is responsible for parent and child order handling and adjacent tasks for a subset of the SpiderRock product universe.  At present, this product universe is divided into 10 US Equity/Option stripes, 1 CME Future/Option stripe, 1 CFE Future/Option stripe, and 1 EUX Future/Option stripe with stripes and their associated engines located near the relevant exchange matching engine.  All execution engines process all of the market data for their product subset regardless of whether resting parent order or client interest exists for a specific product within a subset. As a result, our execution engine topology reflects both geography as well as market data load balancing considerations and is subject to change over time."}),"\n",(0,r.jsx)(n.p,{children:"In addition, SpiderRock operates a collection of street gateways located between our execution engines and the various exchange and market access points. These street gateways are responsible for routing child (exchange or broker class) order and quotes either directly to exchange matching engines and other alternative trading systems or to other market access brokers for forwarding."}),"\n",(0,r.jsx)(n.p,{children:"All client orders that enter SpiderRock execution engines are considered parent orders (from our perspective) regardless of the order source (eg. SpiderRock Tools, SRSE or MLink Parent Order Gateways, FIX Client Gateways).  Upon arrival, the first parent order in a cancel/replace sequence will create a ParentBroker within an execution engine, initialize that broker, and potential begin generating child orders according the instructions attached to that parent order.  Subsequent parent orders in the same chain will act to modify or cancel the resting instructions of the associated ParentBroker."}),"\n",(0,r.jsx)(n.p,{children:"ParentBrokers, one initialized, continually monitor markets and generate child orders as instructed.  Either until the instructions have been fully satified, expire, or are cancelled.  Some ParentBrokers are desiged to generate at most one child order.  Others create and cancel many child orders over time, typically as a result of related markets moving around."}),"\n",(0,r.jsx)(n.p,{children:"SpiderRock execution engines are optimized for high performance (low latency) between SpiderRock ParentBrokers, the SpiderRock's street gateways, and the markets themselves and medium performance (500us or so) between client system and SpiderRock ParentBrokers. In large measure, this is due to the inherent cost of validating and initializing ParentBrokers and their related risk counters."}),"\n",(0,r.jsx)(n.h2,{id:"execution-algorithms",children:"Execution Algorithms"}),"\n",(0,r.jsx)(n.h2,{id:"primary-and-secondary-order-limits",children:"Primary and Secondary Order Limits"}),"\n",(0,r.jsx)(n.h2,{id:"integrated-risk-controls",children:"Integrated Risk Controls"}),"\n",(0,r.jsx)(n.h2,{id:"integrated-compliance-controls",children:"Integrated Compliance Controls"}),"\n",(0,r.jsx)(n.h2,{id:"active-taking",children:"Active Taking"}),"\n",(0,r.jsx)(n.h2,{id:"active-making",children:"Active Making"}),"\n",(0,r.jsx)(n.h2,{id:"contingent-cancelling",children:"Contingent Cancelling"}),"\n",(0,r.jsx)(n.h2,{id:"progression-algos",children:"Progression Algos"}),"\n",(0,r.jsx)(n.h2,{id:"spreads-vs-singles",children:"Spreads vs Singles"}),"\n",(0,r.jsx)(n.h2,{id:"autohedging",children:"AutoHedging"}),"\n",(0,r.jsx)(n.h2,{id:"legging-orders",children:"Legging Orders"}),"\n",(0,r.jsx)(n.h2,{id:"contingent-taking",children:"Contingent Taking"}),"\n",(0,r.jsx)(n.h2,{id:"accessing-the-spiderrock-connect-ats",children:"Accessing The SpiderRock Connect ATS"}),"\n",(0,r.jsx)(n.h2,{id:"exchange-auction-responding",children:"Exchange Auction Responding"}),"\n",(0,r.jsx)(n.h2,{id:"away-order-routing",children:"Away Order Routing"}),"\n",(0,r.jsx)(n.h2,{id:"market-data-considerations",children:"Market Data Considerations"}),"\n",(0,r.jsx)(n.h2,{id:"embedded-exchange-simulators",children:"Embedded Exchange Simulators"}),"\n",(0,r.jsx)(n.h2,{id:"tca-metrics",children:"TCA Metrics"})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(96540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);