"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["43688"],{21660:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>d,metadata:()=>r,assets:()=>o,toc:()=>m,contentTitle:()=>c});var r=JSON.parse('{"id":"MessageSchemas/Schema/Topics/strategy-autohedge/SpdrAutoHedgeControl","title":"SpdrAutoHedgeControl","description":"SpdrAutoHedgeControl contains autohedge / risk group control details.  Can be uploaded from SRSE, created from ExecutionEngines, or created by SR tools.BridgeFromV7:SpdrRiskGroupControl","source":"@site/docs/MessageSchemas/Schema/Topics/5290-strategy-autohedge/SpdrAutoHedgeControl.md","sourceDirName":"MessageSchemas/Schema/Topics/5290-strategy-autohedge","slug":"/MessageSchemas/Schema/Topics/strategy-autohedge/SpdrAutoHedgeControl","permalink":"/docs/next/MessageSchemas/Schema/Topics/strategy-autohedge/SpdrAutoHedgeControl","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SpdrAutoHedgeControl"},"sidebar":"messageSchemasSidebar","previous":{"title":"AutoHedgeSymbol","permalink":"/docs/next/MessageSchemas/Schema/Topics/strategy-autohedge/AutoHedgeSymbol"},"next":{"title":"SpdrAutoHedgeState","permalink":"/docs/next/MessageSchemas/Schema/Topics/strategy-autohedge/SpdrAutoHedgeState"}}'),a=t("52676"),s=t("91503"),i=t("71386"),l=t("9641");let d={title:"SpdrAutoHedgeControl"},c="Schema: SpdrAutoHedgeControl (ID: 5295)",o={},m=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3},{value:"Post Msgs API Call",id:"post-msgs-api-call",level:3}];function h(e){let n={a:"a",annotation:"annotation",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsxs)(n.h1,{id:"schema-spdrautohedgecontrol-id-5295",children:["Schema: SpdrAutoHedgeControl ",(0,a.jsx)("span",{className:"small-text",children:"(ID: 5295)"})]})}),"\n",(0,a.jsxs)(n.p,{children:["SpdrAutoHedgeControl contains autohedge / risk group control details.  Can be uploaded from SRSE, created from ExecutionEngines, or created by SR tools.",(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),"BridgeFromV7",":SpdrRiskGroupControl"]}),"\n",(0,a.jsx)(n.h3,{id:"metadata",children:"METADATA"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Attribute"}),(0,a.jsx)(n.th,{children:"Value"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Topic"}),(0,a.jsx)(n.td,{children:"5290-strategy-autohedge"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"MLink Token"}),(0,a.jsx)(n.td,{children:"ClientTrading"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"SRSE Product"}),(0,a.jsx)(n.td,{children:"SRTrade"})]})]})]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Note:"})," The symbol ",(0,a.jsx)(n.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"body",children:"BODY"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"#"}),(0,a.jsx)(n.th,{children:"Field"}),(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Comment"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"10="}),(0,a.jsx)(n.td,{children:"accnt"}),(0,a.jsx)(n.td,{children:"string(16)"}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"11="}),(0,a.jsx)(n.td,{children:"riskGroupId"}),(0,a.jsx)(n.td,{children:"long"}),(0,a.jsx)(n.td,{children:"riskGroupId = 0 means hedgeScope = Accnt"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"12="}),(0,a.jsx)(n.td,{children:"hedgeSecKey"}),(0,a.jsx)(n.td,{children:"ExpiryKey"}),(0,a.jsx)(n.td,{children:"Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"13="}),(0,a.jsx)(n.td,{children:"hedgeSecType"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,a.jsx)(n.td,{children:"Execution Hedge SecType (Stock or Future)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"14="}),(0,a.jsx)(n.td,{children:"clientFirm"}),(0,a.jsx)(n.td,{children:"string(16)"}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"103"}),(0,a.jsx)(n.td,{children:"altOrderId"}),(0,a.jsx)(n.td,{children:"string(24)"}),(0,a.jsx)(n.td,{children:"alternate order ID (usually clOrdId from client)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"106"}),(0,a.jsx)(n.td,{children:"altAccnt"}),(0,a.jsx)(n.td,{children:"string(32)"}),(0,a.jsx)(n.td,{children:'alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]'})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"109"}),(0,a.jsx)(n.td,{children:"altUserName"}),(0,a.jsx)(n.td,{children:"string(24)"}),(0,a.jsx)(n.td,{children:"alternate (client assigned) user name (optional) [used to map between client and SR account strings]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"112"}),(0,a.jsx)(n.td,{children:"srcRoutingCode"}),(0,a.jsx)(n.td,{children:"string(65)"}),(0,a.jsx)(n.td,{children:"inbound FIX routing code or SRSE/tool server appID (if any)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"254"}),(0,a.jsx)(n.td,{children:"execBrkrCode"}),(0,a.jsx)(n.td,{children:"string(16)"}),(0,a.jsx)(n.td,{children:"(optional) override the default execBrkrCode for this order"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"255"}),(0,a.jsx)(n.td,{children:"externExDest"}),(0,a.jsx)(n.td,{children:"string(16)"}),(0,a.jsx)(n.td,{children:"routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"121"}),(0,a.jsx)(n.td,{children:"externParams"}),(0,a.jsx)(n.td,{children:"text1"}),(0,a.jsx)(n.td,{children:"external algo names/parameters (usually just an algo name)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"124"}),(0,a.jsx)(n.td,{children:"strategy"}),(0,a.jsx)(n.td,{children:"string(36)"}),(0,a.jsx)(n.td,{children:"client-supplied strategy string;visible on SpiderRock GUI tools and other order reports."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"127"}),(0,a.jsx)(n.td,{children:"userName"}),(0,a.jsx)(n.td,{children:"string(24)"}),(0,a.jsx)(n.td,{children:"name of the user entering the order"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"130"}),(0,a.jsx)(n.td,{children:"autoHedge"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/AutoHedge",children:"enum : AutoHedge"})}),(0,a.jsx)(n.td,{children:"auto-hedge algorithm (used for restoring tickets)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"133"}),(0,a.jsx)(n.td,{children:"hedgeTarget"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/HedgeTarget",children:"enum : HedgeTarget"})}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"136"}),(0,a.jsx)(n.td,{children:"minHedgeDDelta"}),(0,a.jsx)(n.td,{children:"float"}),(0,a.jsxs)(n.td,{children:["do not generate autohedge orders if total group ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"D"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mi,{children:"a"}),(0,a.jsx)(n.mi,{children:"i"}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"b"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mi,{children:"w"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"["}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"i"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"H"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"d"}),(0,a.jsx)(n.mi,{children:"g"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"D"}),(0,a.jsx)(n.mi,{children:"D"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mi,{children:"a"}),(0,a.jsx)(n.mi,{children:"a"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"d"}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"a"}),(0,a.jsx)(n.mi,{children:"x"}),(0,a.jsx)(n.mi,{children:"H"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"d"}),(0,a.jsx)(n.mi,{children:"g"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"D"}),(0,a.jsx)(n.mi,{children:"D"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mi,{children:"a"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"]"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"("}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"g"}),(0,a.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,a.jsx)(n.mo,{stretchy:"false",children:"["}),(0,a.jsx)(n.mo,{children:"\u2212"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"Delta is between [minHedgeDDelta and maxHedgeDDelta] (eg.[-"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"De"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"lt"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"ai"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"b"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02691em"},children:"tw"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"ee"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mopen",children:"["}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"min"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"He"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"eDDe"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"lt"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"aan"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"ma"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"He"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"eDDe"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"lt"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,a.jsx)(n.span,{className:"mclose",children:"]"}),(0,a.jsx)(n.span,{className:"mopen",children:"("}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,a.jsx)(n.span,{className:"mord",children:"."}),(0,a.jsx)(n.span,{className:"mopen",children:"["}),(0,a.jsx)(n.span,{className:"mord",children:"\u2212"})]})})]}),"100,000, +$100,000])"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"139"}),(0,a.jsx)(n.td,{children:"maxHedgeDDelta"}),(0,a.jsx)(n.td,{children:"float"}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"142"}),(0,a.jsx)(n.td,{children:"orderSize"}),(0,a.jsx)(n.td,{children:"int"}),(0,a.jsx)(n.td,{children:"initial (and maximum) size of a hedge parent buy or sell order.  note: actual working size will be controlled by the autohedge server based on filled deltas but working size cannot exceed orderSize"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"145"}),(0,a.jsx)(n.td,{children:"ssaleFlag"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"251"}),(0,a.jsx)(n.td,{children:"positionType"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"148"}),(0,a.jsx)(n.td,{children:"maxExposureSize"}),(0,a.jsx)(n.td,{children:"int"}),(0,a.jsx)(n.td,{children:"maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"151"}),(0,a.jsx)(n.td,{children:"numMakeExchanges"}),(0,a.jsx)(n.td,{children:"byte"}),(0,a.jsx)(n.td,{children:"number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"154"}),(0,a.jsx)(n.td,{children:"publicSize"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/PublicSizeHandling",children:"enum : PublicSizeHandling"})}),(0,a.jsx)(n.td,{children:"public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"157"}),(0,a.jsx)(n.td,{children:"canOverlapCxlRepl"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,a.jsx)(n.td,{children:"can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"160"}),(0,a.jsx)(n.td,{children:"progressRule"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/ProgressRule",children:"enum : ProgressRule"})}),(0,a.jsx)(n.td,{children:"Immediate = all size immediately available; TWAP = size released in time intervals;VWAP = size released in volume intervals;TwapForce = size released in intervals/execution forced at the end of interval"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"163"}),(0,a.jsx)(n.td,{children:"progressSliceCnt"}),(0,a.jsx)(n.td,{children:"byte"}),(0,a.jsx)(n.td,{children:"number of twap slices to use (default = 4 or 8) [max 20]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"166"}),(0,a.jsx)(n.td,{children:"progressExposeTime"}),(0,a.jsx)(n.td,{children:"int"}),(0,a.jsx)(n.td,{children:"minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"169"}),(0,a.jsx)(n.td,{children:"vwapParticipation"}),(0,a.jsx)(n.td,{children:"float"}),(0,a.jsx)(n.td,{children:"target vwap participation rate (target % of trade activity)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"172"}),(0,a.jsx)(n.td,{children:"minMktOnClosePct"}),(0,a.jsx)(n.td,{children:"byte"}),(0,a.jsx)(n.td,{children:"Minimum pct [0 - 100] of order reserved for the on-close auction"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"175"}),(0,a.jsx)(n.td,{children:"maxMakeExchFee"}),(0,a.jsx)(n.td,{children:"float"}),(0,a.jsx)(n.td,{children:"maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"178"}),(0,a.jsx)(n.td,{children:"maxTakeExchFee"}),(0,a.jsx)(n.td,{children:"float"}),(0,a.jsx)(n.td,{children:"maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"181"}),(0,a.jsx)(n.td,{children:"incTakeExchFee"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/IncExchFee",children:"enum : IncExchFee"})}),(0,a.jsx)(n.td,{children:"include exchange fee in probability"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"184"}),(0,a.jsx)(n.td,{children:"incMakeExchFee"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/IncExchFee",children:"enum : IncExchFee"})}),(0,a.jsx)(n.td,{children:"include exchange fee in probability"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"187"}),(0,a.jsx)(n.td,{children:"makeExchRule"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/MakeExchRule",children:"enum : MakeExchRule"})}),(0,a.jsx)(n.td,{children:"ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"190"}),(0,a.jsx)(n.td,{children:"maxChildOrders"}),(0,a.jsx)(n.td,{children:"int"}),(0,a.jsx)(n.td,{children:"maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"193"}),(0,a.jsx)(n.td,{children:"exchMask"}),(0,a.jsx)(n.td,{children:"uint"}),(0,a.jsx)(n.td,{children:"eligible exchanges (0 = all)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"252"}),(0,a.jsx)(n.td,{children:"marketSession"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/MarketSession",children:"enum : MarketSession"})}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"199"}),(0,a.jsx)(n.td,{children:"startDttm"}),(0,a.jsx)(n.td,{children:"DateTime"}),(0,a.jsx)(n.td,{children:"[optional] (parent order start time)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"202"}),(0,a.jsx)(n.td,{children:"orderDuration"}),(0,a.jsx)(n.td,{children:"int"}),(0,a.jsx)(n.td,{children:"[optional] (number of seconds)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"253"}),(0,a.jsx)(n.td,{children:"activeDuration"}),(0,a.jsx)(n.td,{children:"int"}),(0,a.jsx)(n.td,{children:"[optional] (number of seconds)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"205"}),(0,a.jsx)(n.td,{children:"goodTillDttm"}),(0,a.jsx)(n.td,{children:"DateTime"}),(0,a.jsx)(n.td,{children:"[optional] (default: 2099-01-01)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"208"}),(0,a.jsx)(n.td,{children:"parentOrderHandling"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/ParentOrderHandling",children:"enum : ParentOrderHandling"})}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"211"}),(0,a.jsx)(n.td,{children:"parentBalanceHandling"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/ParentBalanceHandling",children:"enum : ParentBalanceHandling"})}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"214"}),(0,a.jsx)(n.td,{children:"orderLimitType"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/SpdrLimitType",children:"enum : SpdrLimitType"})}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"217"}),(0,a.jsx)(n.td,{children:"takeLimitClass"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,a.jsx)(n.td,{children:"Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"220"}),(0,a.jsx)(n.td,{children:"makeLimitClass"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,a.jsx)(n.td,{children:"Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"256"}),(0,a.jsx)(n.td,{children:"hedgeFillUMarkLmtPrc"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,a.jsx)(n.td,{children:"set a price limit on the autohedge order based on the most recent option fillUMark"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"223"}),(0,a.jsx)(n.td,{children:"orderPrcLimit"}),(0,a.jsx)(n.td,{children:"double"}),(0,a.jsx)(n.td,{children:"Applies if LimitType = Prc[]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"226"}),(0,a.jsx)(n.td,{children:"orderPrcOffset"}),(0,a.jsx)(n.td,{children:"double"}),(0,a.jsx)(n.td,{children:"default=0"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"229"}),(0,a.jsx)(n.td,{children:"stateModel"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/StateModel",children:"enum : StateModel"})}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"232"}),(0,a.jsx)(n.td,{children:"takeAlphaType"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,a.jsx)(n.td,{children:"Applies if takeLimitClass = Probability"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"235"}),(0,a.jsx)(n.td,{children:"makeAlphaType"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,a.jsx)(n.td,{children:"Applies if makeLimitClass = Probability"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"238"}),(0,a.jsx)(n.td,{children:"takeAlphaFactor"}),(0,a.jsx)(n.td,{children:"float"}),(0,a.jsx)(n.td,{children:"[-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"241"}),(0,a.jsx)(n.td,{children:"makeAlphaFactor"}),(0,a.jsx)(n.td,{children:"float"}),(0,a.jsx)(n.td,{children:"[-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"244"}),(0,a.jsx)(n.td,{children:"takeProbability"}),(0,a.jsx)(n.td,{children:"float"}),(0,a.jsx)(n.td,{children:"takeProbLimit = takeProbability [if AlphaType = Static]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"247"}),(0,a.jsx)(n.td,{children:"makeProbability"}),(0,a.jsx)(n.td,{children:"float"}),(0,a.jsx)(n.td,{children:"makeProbLimit = makeProbability [if AlphaType = Static]"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"250"}),(0,a.jsx)(n.td,{children:"timestamp"}),(0,a.jsx)(n.td,{children:"DateTime"}),(0,a.jsx)(n.td,{children:"record timestamp"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrAutoHedgeControl'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrAutoHedgeControl'\n\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAutoHedgeControl\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'altOrderId|altAccnt|altUserName|srcRoutingCode|execBrkrCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|positionType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|hedgeFillUMarkLmtPrc|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrAutoHedgeControl' \\\n--data-urlencode 'view=altOrderId|altAccnt|altUserName|srcRoutingCode|execBrkrCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|positionType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|hedgeFillUMarkLmtPrc|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAutoHedgeControl\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'altOrderId|altAccnt|altUserName|srcRoutingCode|execBrkrCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|positionType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|hedgeFillUMarkLmtPrc|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'altOrderId:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrAutoHedgeControl' \\\n--data-urlencode 'view=altOrderId|altAccnt|altUserName|srcRoutingCode|execBrkrCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|positionType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|hedgeFillUMarkLmtPrc|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=altOrderId:ASC'\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAutoHedgeControl\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'altOrderId|altAccnt|altUserName|srcRoutingCode|execBrkrCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|positionType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|hedgeFillUMarkLmtPrc|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'autoHedge|hedgeTarget|ssaleFlag|positionType|publicSize|canOverlapCxlRepl|progressRule|incTakeExchFee|incMakeExchFee|makeExchRule|marketSession|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|hedgeFillUMarkLmtPrc|stateModel|takeAlphaType|makeAlphaType\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrAutoHedgeControl' \\\n--data-urlencode 'measure=altOrderId|altAccnt|altUserName|srcRoutingCode|execBrkrCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|positionType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|hedgeFillUMarkLmtPrc|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp' \\\n--data-urlencode 'group=autoHedge|hedgeTarget|ssaleFlag|positionType|publicSize|canOverlapCxlRepl|progressRule|incTakeExchFee|incMakeExchFee|makeExchRule|marketSession|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|hedgeFillUMarkLmtPrc|stateModel|takeAlphaType|makeAlphaType' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAutoHedgeControl\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrAutoHedgeControl' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"post-msgs-api-call",children:"Post Msgs API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import requests\n\n# Replace with your desired MLINK URL\nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Request Parameters\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'postmsgs\',\n    "postaction": "U", # (U)pdate, (I)nsert, (R)eplace, or (D)elete\n    "postmerge": "Y", # (Y)es or (N)o\n}\n\npayload = {\n    "header": {\n        "mTyp": "SpdrAutoHedgeControl"\n    },\n    "message": {\n        "pkey": {\n            "accnt": "exampleString", // string\n            "riskGroupId": 1, // long\n            "hedgeSecKey": {\n                "at": "EQT",\n                "ts": "NMS",\n                "tk": "AAPL",\n                "dt": "2025-01-01"\n            },\n            "hedgeSecType": "enumValue", // enum(SpdrKeyType) - None, Stock, Future, Option, MLeg\n            "clientFirm": "exampleString" // string\n        },\n        "altOrderId": "exampleString", // string\n        "altAccnt": "exampleString", // string\n        "altUserName": "exampleString", // string\n        "srcRoutingCode": "exampleString", // string\n        "execBrkrCode": "exampleString", // string\n        "externExDest": "exampleString", // string\n        "externParams": "exampleString", // text1\n        "strategy": "exampleString", // string\n        "userName": "exampleString", // string\n        "autoHedge": "enumValue", // enum(AutoHedge) - None, Static, AutoMid, AutoCrx, AutoTrn, SpdrAuto, Spdr10S, Spdr30S, Spdr90S, Spdr5M, Spdr30M, SpdrDay, SmartFast, SmartNorm, FastCrx, FastDark, SlowDark, AlphaVwap1pct, AlphaVwap2pct, AlphaVwap5pct, AlphaVwap25pct, Custom, AwayAlgo\n        "hedgeTarget": "enumValue", // enum(HedgeTarget) - None, HedgeToZero, HedgeToBand\n        "minHedgeDDelta": 1.0, // float\n        "maxHedgeDDelta": 1.0, // float\n        "orderSize": 1, // int\n        "ssaleFlag": "enumValue", // enum(ShortSaleFlag) - None, Long, Short, Exempt, Auto, Open, Close, Cover, NA\n        "positionType": "enumValue", // enum(PositionType) - None, Opening, Closing, Auto\n        "maxExposureSize": 1, // int\n        "numMakeExchanges": 1, // byte\n        "publicSize": "enumValue", // enum(PublicSizeHandling) - None, Randomize, MktSize, FullSize, MktSizeA, MktSizeB, MktSizeC, FullSizeR, Max25Pct, Max50Pct, Max75Pct, NoSize\n        "canOverlapCxlRepl": "enumValue", // enum(YesNo) - None, Yes, No\n        "progressRule": "enumValue", // enum(ProgressRule) - None, Twap, Vwap, TwapReset, VwapReset, FastReset, SlowReset, TwapAlpha, VwapAlpha, TwapAlphaC, VwapAlphaC, AutoComplete, AllowImmediate, Manual, SpdrPulse, IOC, FlashMakeTake\n        "progressSliceCnt": 1, // byte\n        "progressExposeTime": 1, // int\n        "vwapParticipation": 1.0, // float\n        "minMktOnClosePct": 1, // byte\n        "maxMakeExchFee": 1.0, // float\n        "maxTakeExchFee": 1.0, // float\n        "incTakeExchFee": "enumValue", // enum(IncExchFee) - None, ExclFee, IncFee\n        "incMakeExchFee": "enumValue", // enum(IncExchFee) - None, ExclFee, IncFee\n        "makeExchRule": "enumValue", // enum(MakeExchRule) - None, MaxPart, FeeOptimal, ImprvOnly, FeeStrict, RoundRobin, ProRataOptim\n        "maxChildOrders": 1, // int\n        "exchMask": 1, // uint\n        "marketSession": "enumValue", // enum(MarketSession) - None, PreMkt, RegMkt, PostMkt, PreRegMkt, RegPostMkt, AllDay\n        "startDttm": "2025-01-01 12:00:00.000000", // yyyy-MM-dd HH:mm:ss.SSSSSS\n        "orderDuration": 1, // int\n        "activeDuration": 1, // int\n        "goodTillDttm": "2025-01-01 12:00:00.000000", // yyyy-MM-dd HH:mm:ss.SSSSSS\n        "parentOrderHandling": "enumValue", // enum(ParentOrderHandling) - None, ActiveTaker, PostOnly, DMA, MktOnOpn, MktOnCls, Facilitate, Matrix, Legger, Seeker, SeekerLegger, CrossResponse, AuctionResponse, MLegAuctionResp, RFQRequest, AwayAlgo, ExchPing, BlockAuction, BlockResponse, SweepTake, CobMaker, FaceOmni, TestParent\n        "parentBalanceHandling": "enumValue", // enum(ParentBalanceHandling) - None, PostWith, PostTurn, PostImprove, PostLimit, MaxIntern, PostWthF, PostImprvR, PostFlash, PostFlashW, PostPeg, PostFlashI\n        "orderLimitType": "enumValue", // enum(SpdrLimitType) - None, Market, MarketArrival, Prc, PrcDe, PrcDeX, PrcDeT, PrcDeP, PrcDeXT, PrcDeXP, Vol, VolX, PrcV, PrcVX, NoLimit, RelMid, RelJoin, RelCross, SmrtFast, SmrtNorm, RelTurn, PrcDeEm, VolEm, Aux, UPrcPct, PkgNeutral, RcPrem, SynthLimitMM, SynthLimitBW, SynthLimitWW\n        "takeLimitClass": "enumValue", // enum(SpdrLimitClass) - Simple, Surface, Probability, SurfProb\n        "makeLimitClass": "enumValue", // enum(SpdrLimitClass) - Simple, Surface, Probability, SurfProb\n        "hedgeFillUMarkLmtPrc": "enumValue", // enum(YesNo) - None, Yes, No\n        "orderPrcLimit": 1.0, // double\n        "orderPrcOffset": 1.0, // double\n        "stateModel": "enumValue", // enum(StateModel) - None, M1, M2, M3, M4\n        "takeAlphaType": "enumValue", // enum(AlphaType) - None, Static, Eagle, Hawk, Falcon, Relative\n        "makeAlphaType": "enumValue", // enum(AlphaType) - None, Static, Eagle, Hawk, Falcon, Relative\n        "takeAlphaFactor": 1.0, // float\n        "makeAlphaFactor": 1.0, // float\n        "takeProbability": 1.0, // float\n        "makeProbability": 1.0, // float\n        "timestamp": "2025-01-01 12:00:00.000000" // yyyy-MM-dd HH:mm:ss.SSSSSS\n    }\n}\n\nresponse = requests.post(MLINK_PROD_URL, params=params, json=payload)\n'})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -X POST \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\' \\\n--data-urlencode \'apiKey=XXXX-XXXX-XXXX-XXXX\' \\\n--data-urlencode \'cmd=postmsgs\' \\\n--data-urlencode \'postaction=U\' \\ # (U)pdate, (I)nsert, (R)eplace, or (D)elete\n--data-urlencode \'postmerge=Y\' \\ # (Y)es or (N)o\n--header \'Content-Type: application/json\' \\\n--data \'{\n    "header": {\n        "mTyp": "SpdrAutoHedgeControl"\n    },\n    "message": {\n        "pkey": {\n            "accnt": "exampleString", // string\n            "riskGroupId": 1, // long\n            "hedgeSecKey": {\n                "at": "EQT",\n                "ts": "NMS",\n                "tk": "AAPL",\n                "dt": "2025-01-01"\n            },\n            "hedgeSecType": "enumValue", // enum(SpdrKeyType) - None, Stock, Future, Option, MLeg\n            "clientFirm": "exampleString" // string\n        },\n        "altOrderId": "exampleString", // string\n        "altAccnt": "exampleString", // string\n        "altUserName": "exampleString", // string\n        "srcRoutingCode": "exampleString", // string\n        "execBrkrCode": "exampleString", // string\n        "externExDest": "exampleString", // string\n        "externParams": "exampleString", // text1\n        "strategy": "exampleString", // string\n        "userName": "exampleString", // string\n        "autoHedge": "enumValue", // enum(AutoHedge) - None, Static, AutoMid, AutoCrx, AutoTrn, SpdrAuto, Spdr10S, Spdr30S, Spdr90S, Spdr5M, Spdr30M, SpdrDay, SmartFast, SmartNorm, FastCrx, FastDark, SlowDark, AlphaVwap1pct, AlphaVwap2pct, AlphaVwap5pct, AlphaVwap25pct, Custom, AwayAlgo\n        "hedgeTarget": "enumValue", // enum(HedgeTarget) - None, HedgeToZero, HedgeToBand\n        "minHedgeDDelta": 1.0, // float\n        "maxHedgeDDelta": 1.0, // float\n        "orderSize": 1, // int\n        "ssaleFlag": "enumValue", // enum(ShortSaleFlag) - None, Long, Short, Exempt, Auto, Open, Close, Cover, NA\n        "positionType": "enumValue", // enum(PositionType) - None, Opening, Closing, Auto\n        "maxExposureSize": 1, // int\n        "numMakeExchanges": 1, // byte\n        "publicSize": "enumValue", // enum(PublicSizeHandling) - None, Randomize, MktSize, FullSize, MktSizeA, MktSizeB, MktSizeC, FullSizeR, Max25Pct, Max50Pct, Max75Pct, NoSize\n        "canOverlapCxlRepl": "enumValue", // enum(YesNo) - None, Yes, No\n        "progressRule": "enumValue", // enum(ProgressRule) - None, Twap, Vwap, TwapReset, VwapReset, FastReset, SlowReset, TwapAlpha, VwapAlpha, TwapAlphaC, VwapAlphaC, AutoComplete, AllowImmediate, Manual, SpdrPulse, IOC, FlashMakeTake\n        "progressSliceCnt": 1, // byte\n        "progressExposeTime": 1, // int\n        "vwapParticipation": 1.0, // float\n        "minMktOnClosePct": 1, // byte\n        "maxMakeExchFee": 1.0, // float\n        "maxTakeExchFee": 1.0, // float\n        "incTakeExchFee": "enumValue", // enum(IncExchFee) - None, ExclFee, IncFee\n        "incMakeExchFee": "enumValue", // enum(IncExchFee) - None, ExclFee, IncFee\n        "makeExchRule": "enumValue", // enum(MakeExchRule) - None, MaxPart, FeeOptimal, ImprvOnly, FeeStrict, RoundRobin, ProRataOptim\n        "maxChildOrders": 1, // int\n        "exchMask": 1, // uint\n        "marketSession": "enumValue", // enum(MarketSession) - None, PreMkt, RegMkt, PostMkt, PreRegMkt, RegPostMkt, AllDay\n        "startDttm": "2025-01-01 12:00:00.000000", // yyyy-MM-dd HH:mm:ss.SSSSSS\n        "orderDuration": 1, // int\n        "activeDuration": 1, // int\n        "goodTillDttm": "2025-01-01 12:00:00.000000", // yyyy-MM-dd HH:mm:ss.SSSSSS\n        "parentOrderHandling": "enumValue", // enum(ParentOrderHandling) - None, ActiveTaker, PostOnly, DMA, MktOnOpn, MktOnCls, Facilitate, Matrix, Legger, Seeker, SeekerLegger, CrossResponse, AuctionResponse, MLegAuctionResp, RFQRequest, AwayAlgo, ExchPing, BlockAuction, BlockResponse, SweepTake, CobMaker, FaceOmni, TestParent\n        "parentBalanceHandling": "enumValue", // enum(ParentBalanceHandling) - None, PostWith, PostTurn, PostImprove, PostLimit, MaxIntern, PostWthF, PostImprvR, PostFlash, PostFlashW, PostPeg, PostFlashI\n        "orderLimitType": "enumValue", // enum(SpdrLimitType) - None, Market, MarketArrival, Prc, PrcDe, PrcDeX, PrcDeT, PrcDeP, PrcDeXT, PrcDeXP, Vol, VolX, PrcV, PrcVX, NoLimit, RelMid, RelJoin, RelCross, SmrtFast, SmrtNorm, RelTurn, PrcDeEm, VolEm, Aux, UPrcPct, PkgNeutral, RcPrem, SynthLimitMM, SynthLimitBW, SynthLimitWW\n        "takeLimitClass": "enumValue", // enum(SpdrLimitClass) - Simple, Surface, Probability, SurfProb\n        "makeLimitClass": "enumValue", // enum(SpdrLimitClass) - Simple, Surface, Probability, SurfProb\n        "hedgeFillUMarkLmtPrc": "enumValue", // enum(YesNo) - None, Yes, No\n        "orderPrcLimit": 1.0, // double\n        "orderPrcOffset": 1.0, // double\n        "stateModel": "enumValue", // enum(StateModel) - None, M1, M2, M3, M4\n        "takeAlphaType": "enumValue", // enum(AlphaType) - None, Static, Eagle, Hawk, Falcon, Relative\n        "makeAlphaType": "enumValue", // enum(AlphaType) - None, Static, Eagle, Hawk, Falcon, Relative\n        "takeAlphaFactor": 1.0, // float\n        "makeAlphaFactor": 1.0, // float\n        "takeProbability": 1.0, // float\n        "makeProbability": 1.0, // float\n        "timestamp": "2025-01-01 12:00:00.000000" // yyyy-MM-dd HH:mm:ss.SSSSSS\n    }\n}\'\n'})})})]})]})}function u(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},9641:function(e,n,t){t.d(n,{Z:()=>s});var r=t("52676");t("75271");var a=t("54461");function s(e){let{children:n,hidden:t,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)("tabItem_SSzl",s),hidden:t,children:n})}},71386:function(e,n,t){t.d(n,{Z:()=>S});var r=t("52676"),a=t("75271"),s=t("54461"),i=t("52289"),l=t("3225"),d=t("42834"),c=t("40578"),o=t("35834"),m=t("79616");function h(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||a.isValidElement(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var p=t("44537");function x(e){let{className:n,block:t,selectedValue:a,selectValue:l,tabValues:d}=e,c=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.o5)(),m=e=>{let n=e.currentTarget,t=d[c.indexOf(n)].value;t!==a&&(o(n),l(t))},h=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{let t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{let t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1]}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n),children:d.map(e=>{let{value:n,label:t,attributes:i}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>c.push(e),onKeyDown:h,onClick:m,...i,className:(0,s.Z)("tabs__item","tabItem_aitt",i?.className,{"tabs__item--active":a===n}),children:t??n},n)})})}function g(e){let{lazy:n,children:t,selectedValue:i}=e,l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=l.find(e=>e.props.value===i);return e?(0,a.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i}))})}function j(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:r}=e,s=function(e){let{values:n,children:t}=e;return(0,a.useMemo)(()=>{let e=n??h(t).map(e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}});return!function(e){let n=(0,o.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}(e),[i,p]=(0,a.useState)(()=>(function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let r=t.find(e=>e.default)??t[0];if(!r)throw Error("Unexpected error: 0 tabValues");return r.value})({defaultValue:n,tabValues:s})),[x,g]=function(e){let{queryString:n=!1,groupId:t}=e,r=(0,l.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(s),(0,a.useCallback)(e=>{if(!s)return;let n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})},[s,r])]}({queryString:t,groupId:r}),[j,S]=function(e){let{groupId:n}=e,t=n?`docusaurus.tab.${n}`:null,[r,s]=(0,m.Nk)(t);return[r,(0,a.useCallback)(e=>{t&&s.set(e)},[t,s])]}({groupId:r}),k=(()=>{let e=x??j;return u({value:e,tabValues:s})?e:null})();return(0,d.Z)(()=>{k&&p(k)},[k]),{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!u({value:e,tabValues:s}))throw Error(`Can't select invalid tab value=${e}`);p(e),g(e),S(e)},[g,S,s]),tabValues:s}}(e);return(0,r.jsxs)("div",{className:(0,s.Z)("tabs-container","tabList_ArS0"),children:[(0,r.jsx)(x,{...n,...e}),(0,r.jsx)(g,{...n,...e})]})}function S(e){let n=(0,p.Z)();return(0,r.jsx)(j,{...e,children:h(e.children)},String(n))}},91503:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return i}});var r=t(75271);let a={},s=r.createContext(a);function i(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);