"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[83361],{12699:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=s(74848),n=s(28453);const i={title:"ExternAggGroupGateway"},a="Schema: ExternAggGroupGateway (ID: 5140)",d={id:"Schemas/Schema/Topics/srse-gateway/ExternAggGroupGateway",title:"ExternAggGroupGateway",description:"This table allows clients to enter start-of-day positions, and quantity bot/sld today for each market.  AggGroup is a code issued by SpiderRock to indentify the aggregation group that the reported positions and trades belong to. This will usually be your SpiderRock assigned ClientFirm code unless your firm has more than one aggregation unit.  Note that start-of-day positions can be truncated if the truncation will not affect order marking.  Contact SpiderRock support for details if this is what you intend.",source:"@site/docs/Schemas/Schema/Topics/5120-srse-gateway/ExternAggGroupGateway.md",sourceDirName:"Schemas/Schema/Topics/5120-srse-gateway",slug:"/Schemas/Schema/Topics/srse-gateway/ExternAggGroupGateway",permalink:"/docs/Schemas/Schema/Topics/srse-gateway/ExternAggGroupGateway",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ExternAggGroupGateway"},sidebar:"schemaSidebar",previous:{title:"AwayStockLocateGateway",permalink:"/docs/Schemas/Schema/Topics/srse-gateway/AwayStockLocateGateway"},next:{title:"FutAwayTktGateway",permalink:"/docs/Schemas/Schema/Topics/srse-gateway/FutAwayTktGateway"}},o={},c=[{value:"METADATA",id:"metadata",level:3},{value:"PRIMARY KEY",id:"primary-key",level:3},{value:"BODY",id:"body",level:3}];function l(e){const t={a:"a",h1:"h1",h3:"h3",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.h1,{id:"schema-externagggroupgateway-id-5140",children:["Schema: ExternAggGroupGateway ",(0,r.jsx)("span",{className:"small-text",children:"(ID: 5140)"})]}),"\n",(0,r.jsx)(t.p,{children:"This table allows clients to enter start-of-day positions, and quantity bot/sld today for each market.  AggGroup is a code issued by SpiderRock to indentify the aggregation group that the reported positions and trades belong to. This will usually be your SpiderRock assigned ClientFirm code unless your firm has more than one aggregation unit.  Note that start-of-day positions can be truncated if the truncation will not affect order marking.  Contact SpiderRock support for details if this is what you intend."}),"\n",(0,r.jsxs)("div",{className:"single-message-meta",children:[(0,r.jsx)(t.h3,{id:"metadata",children:"METADATA"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Attribute"}),(0,r.jsx)(t.th,{children:"Value"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"MLink Token"}),(0,r.jsx)(t.td,{children:"SystemData"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Topic"}),(0,r.jsx)(t.td,{children:"srse-gateway"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"SRSE Product"}),(0,r.jsx)(t.td,{children:"SRTrade"})]})]})]})]}),"\n",(0,r.jsxs)("div",{className:"single-message-primarykey",children:[(0,r.jsx)(t.h3,{id:"primary-key",children:"PRIMARY KEY"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Comment"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"secKey"}),(0,r.jsx)(t.td,{children:"OptionKey"}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"secType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,r.jsx)(t.td,{children:"Security Type [Stock, Future, Option]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"aggGroup"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{children:"SpiderRock-assigned aggGroup identifier (up to 16 characters) [stkAggGroup, futAggGroup, or optAggGroup] (defaults to ClientFirm if blank)"})]})]})]})]}),"\n",(0,r.jsxs)("div",{className:"single-message-body",children:[(0,r.jsx)(t.h3,{id:"body",children:"BODY"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Comment"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"botQuantity"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{children:"quantity bot today (can be zero if reported via execution drops)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"clientFirm"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{children:"client firm of the user who entered this record via SRSE;blank otherwise"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"openPosType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/OpenPosType",children:"enum : OpenPosType"})}),(0,r.jsx)(t.td,{children:"note: if set to Truncated trading will be suspended when total quantity traded today would flip position from long to short or visa-versa"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"openPosition"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{children:"start-of-day position (aggregate firm position for all accnts in this aggGroup) [can be truncated if necessary]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"sldQuantity"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{children:"quantity sld today (can be zero if reported via execution drops)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"timestamp"}),(0,r.jsx)(t.td,{children:"DateTime"}),(0,r.jsx)(t.td,{})]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>d});var r=s(96540);const n={},i=r.createContext(n);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);