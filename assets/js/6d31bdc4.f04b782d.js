"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[45170],{61762:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=a(74848),i=a(28453);const s={title:"Order Management",sidebar_position:4},t=void 0,o={id:"Documentation/PlatformFeatures/OrderManagement/OrderManagement",title:"Order Management",description:"Execution Engine Overview",source:"@site/docs/Documentation/PlatformFeatures/OrderManagement/OrderManagement.md",sourceDirName:"Documentation/PlatformFeatures/OrderManagement",slug:"/Documentation/PlatformFeatures/OrderManagement/",permalink:"/docs/Documentation/PlatformFeatures/OrderManagement/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Order Management",sidebar_position:4},sidebar:"documentationSidebar",previous:{title:"Market Analytics",permalink:"/docs/Documentation/PlatformFeatures/Analytics/"},next:{title:"Execution Algorithms",permalink:"/docs/Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms"}},l={},c=[{value:"Execution Engine Overview",id:"execution-engine-overview",level:2},{value:"Execution Algorithms",id:"execution-algorithms",level:2},{value:"Primary and Secondary Order Limits",id:"primary-and-secondary-order-limits",level:2},{value:"Integrated Risk Controls",id:"integrated-risk-controls",level:2},{value:"Integrated Compliance Controls",id:"integrated-compliance-controls",level:2},{value:"Active Taking",id:"active-taking",level:2},{value:"Active Making",id:"active-making",level:2},{value:"Contingent Cancelling",id:"contingent-cancelling",level:2},{value:"Progression Algos",id:"progression-algos",level:2},{value:"Spreads vs Singles",id:"spreads-vs-singles",level:2},{value:"AutoHedging",id:"autohedging",level:2},{value:"Legging Orders",id:"legging-orders",level:2},{value:"Contingent Taking",id:"contingent-taking",level:2},{value:"Child Order Flow Control",id:"child-order-flow-control",level:2},{value:"Accessing The SpiderRock Connect ATS",id:"accessing-the-spiderrock-connect-ats",level:2},{value:"Exchange Auction Responding",id:"exchange-auction-responding",level:2},{value:"Away Order Routing",id:"away-order-routing",level:2},{value:"Market Data Considerations",id:"market-data-considerations",level:2},{value:"Embedded Exchange Simulators",id:"embedded-exchange-simulators",level:2},{value:"TCA Metrics",id:"tca-metrics",level:2}];function d(e){const n={annotation:"annotation",h2:"h2",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",semantics:"semantics",span:"span",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"execution-engine-overview",children:"Execution Engine Overview"}),"\n",(0,r.jsx)(n.p,{children:"SpiderRock Execution Engines are at the center of order and execution management within the SpiderRock platform.  Each engine is responsible for parent and child order handling and adjacent tasks for a subset of the SpiderRock product universe.  At present, this product universe is divided into 10 US Equity/Option stripes, 1 CME Future/Option stripe, 1 CFE Future/Option stripe, and 1 EUX Future/Option stripe with stripes and their associated engines located near the relevant exchange matching engine.  All execution engines process all of the market data for their product subset regardless of whether resting parent order or client interest exists for a specific product within a subset. As a result, our execution engine topology reflects both geography as well as market data load balancing considerations and is subject to change over time."}),"\n",(0,r.jsx)(n.p,{children:"SpiderRock also operates street-side order gateway servers located between our execution engines and the various exchange and market access points. These street gateways are responsible for routing child (exchange or broker class) order and quotes either directly to exchange matching engines and other alternative trading systems or to other market access brokers for forwarding."}),"\n",(0,r.jsx)(n.p,{children:"All client orders that enter SpiderRock execution engines are considered parent orders (from our perspective) regardless of the order source (eg. SpiderRock Tools, SRSE or MLink Parent Order Gateways, FIX Client Gateways).  Upon arrival, the first parent order in a cancel/replace sequence will create a ParentBroker within an execution engine and initialize that broker which will begin generating child orders according the instructions attached to that parent order.  Subsequent parent orders in the same chain will act to modify or cancel the resting instructions of the associated ParentBroker."}),"\n",(0,r.jsx)(n.p,{children:"ParentBrokers, once initialized, continually monitor markets and create or cancel child orders as instructed until the instructions have been fully satified, expire, or are cancelled.  Some parent order instructions are desiged to generate at most one child order while others can create and cancel many child orders over time as related markets move around."}),"\n",(0,r.jsx)(n.p,{children:"SpiderRock execution engines are optimized for high performance (low latency) between SpiderRock ParentBrokers, street gateways, and the markets and normal performance (1 ms or so) between client system and SpiderRock ParentBrokers."}),"\n",(0,r.jsx)(n.h2,{id:"execution-algorithms",children:"Execution Algorithms"}),"\n",(0,r.jsx)(n.p,{children:"SpiderRock execution algorithms, or more specifically, parent order handling frameworks, are the engine components primarily responsible for creating and canceling child orders. The most commonly utilized frameworks are ActiveTaker and ActiveMaker which can operate either individually or in combination.  The ActiveTaker framework only generates child orders that are immediately marketable while the ActiveMaker framework only generates child orders that are NOT immediately marketable."}),"\n",(0,r.jsx)(n.p,{children:"These frameworks can be used for equities, futures, and options as well as spreads and are the underlying handlers for our longer running progression algo family."}),"\n",(0,r.jsx)(n.p,{children:"With the introduction of the SpiderRock Connect ATS active taker handlers are also capable of initiating flash auctions in some circumstances. In addition, both our active maker and active taker frameworks are capable of responding to SpiderRock Connect auction as well as all exchange or other ATS originated auctions."}),"\n",(0,r.jsx)(n.p,{children:"We also have special purpose order handling frameworks that can place child orders in exchange open/closing auctions, perform co-ordinated cross market sweeps, and execute other specialized order actions."}),"\n",(0,r.jsx)(n.p,{children:"At a higher level our engines also feature several types of mulit-step progression algos that work parent orders over time utilizing single purpose frameworks at each step. Examples include the VWAP, TWAP, and SpiderPulse as well as Seeker and Legger (spreads) algo families."}),"\n",(0,r.jsx)(n.h2,{id:"primary-and-secondary-order-limits",children:"Primary and Secondary Order Limits"}),"\n",(0,r.jsx)(n.p,{children:"All of our order handling frameworks feature split (primary and secondary) client limit price handling.  Clients directly supply the primary limit, either as a static limit or a simple formula based limit (volatility, delta/gamma adjusted, etc). The secondary limit is computed from a combination of an offset the client has supplied and a live fair market value that SpiderRock supplies. The effective limit when creating or canceling child orders is then the combination of the primary and secondary limit."}),"\n",(0,r.jsxs)(n.p,{children:["For example, a BUY order with a primary limit of ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mn,{children:"1.00"}),(0,r.jsx)(n.mi,{children:"a"}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mi,{children:"d"}),(0,r.jsx)(n.mi,{children:"a"}),(0,r.jsx)(n.mi,{children:"s"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{children:"c"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mi,{children:"d"}),(0,r.jsx)(n.mi,{children:"a"}),(0,r.jsx)(n.mi,{children:"r"}),(0,r.jsx)(n.mi,{children:"y"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"f"}),(0,r.jsx)(n.mi,{children:"f"}),(0,r.jsx)(n.mi,{children:"s"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{children:"t"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"f"}),(0,r.jsx)(n.mo,{children:"+"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"1.00 and a secondary offset of +"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.jsx)(n.span,{className:"mord",children:"1.00"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"an"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"seco"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"ryo"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"ff"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"se"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,r.jsx)(n.span,{className:"mord",children:"+"})]})})]}),"0.01 with the SpiderRock fair market value at ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mn,{children:"0.95"}),(0,r.jsx)(n.mi,{children:"w"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"u"}),(0,r.jsx)(n.mi,{children:"l"}),(0,r.jsx)(n.mi,{children:"d"}),(0,r.jsx)(n.mi,{children:"h"}),(0,r.jsx)(n.mi,{children:"a"}),(0,r.jsx)(n.mi,{children:"v"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{children:"a"}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{children:"f"}),(0,r.jsx)(n.mi,{children:"f"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{children:"c"}),(0,r.jsx)(n.mi,{children:"t"}),(0,r.jsx)(n.mi,{children:"i"}),(0,r.jsx)(n.mi,{children:"v"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{children:"l"}),(0,r.jsx)(n.mi,{children:"i"}),(0,r.jsx)(n.mi,{children:"m"}),(0,r.jsx)(n.mi,{children:"i"}),(0,r.jsx)(n.mi,{children:"t"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"f"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"0.95 would have an effective limit of "})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.jsx)(n.span,{className:"mord",children:"0.95"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02691em"},children:"w"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"ha"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"an"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"ff"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"ec"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"i"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"imi"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"})]})})]}),"0.96 (minimum of the primary and instantaneous secondary limit)."]}),"\n",(0,r.jsx)(n.p,{children:"SpiderRock engines have machine learning based fair price models that continuously compute fair market values for most bid/ask markets.  In addition we have surface based fair market values for most options markets."}),"\n",(0,r.jsx)(n.h2,{id:"integrated-risk-controls",children:"Integrated Risk Controls"}),"\n",(0,r.jsx)(n.h2,{id:"integrated-compliance-controls",children:"Integrated Compliance Controls"}),"\n",(0,r.jsx)(n.h2,{id:"active-taking",children:"Active Taking"}),"\n",(0,r.jsx)(n.h2,{id:"active-making",children:"Active Making"}),"\n",(0,r.jsx)(n.h2,{id:"contingent-cancelling",children:"Contingent Cancelling"}),"\n",(0,r.jsx)(n.h2,{id:"progression-algos",children:"Progression Algos"}),"\n",(0,r.jsx)(n.h2,{id:"spreads-vs-singles",children:"Spreads vs Singles"}),"\n",(0,r.jsx)(n.h2,{id:"autohedging",children:"AutoHedging"}),"\n",(0,r.jsx)(n.h2,{id:"legging-orders",children:"Legging Orders"}),"\n",(0,r.jsx)(n.h2,{id:"contingent-taking",children:"Contingent Taking"}),"\n",(0,r.jsx)(n.h2,{id:"child-order-flow-control",children:"Child Order Flow Control"}),"\n",(0,r.jsx)(n.p,{children:"SpiderRock execution engines are usually capable of generating child orders (much) faster than downstream systems can consume them.  This is especially common when simultaneously managing large numbers of orders in option markets with active/volitile underlying securities and tight cancel/replace child order thresholds. In order to successfully manage orders in this type of environment SpiderRock utilizes a sophisticated child order flow control design that classifies and priorizes child order flow to ensure that immediate high priority cancel bandwith is always available under normal operation at the potential cost of delaying creation of new child orders. This acts to protect down stream systems from queuing or rejecting child orders and cancels during market bursts, both of which can adversely affect execution quality.  To mitigate the impacts of this type of flow control SpiderRock monitors its' own exchange connectivity pool and adds capacity as necessary and also works with downstream brokers to ensure sufficient capacity on order handling sessions in which SpiderRock does not control the last leg of the exchange routing path."}),"\n",(0,r.jsx)(n.h2,{id:"accessing-the-spiderrock-connect-ats",children:"Accessing The SpiderRock Connect ATS"}),"\n",(0,r.jsx)(n.h2,{id:"exchange-auction-responding",children:"Exchange Auction Responding"}),"\n",(0,r.jsx)(n.h2,{id:"away-order-routing",children:"Away Order Routing"}),"\n",(0,r.jsx)(n.h2,{id:"market-data-considerations",children:"Market Data Considerations"}),"\n",(0,r.jsx)(n.h2,{id:"embedded-exchange-simulators",children:"Embedded Exchange Simulators"}),"\n",(0,r.jsx)(n.h2,{id:"tca-metrics",children:"TCA Metrics"})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>o});var r=a(96540);const i={},s=r.createContext(i);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);