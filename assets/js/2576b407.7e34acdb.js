"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["42849"],{93301:function(e,t,r){r.r(t),r.d(t,{default:()=>p,frontMatter:()=>i,metadata:()=>l,assets:()=>o,toc:()=>h,contentTitle:()=>c});var l=JSON.parse('{"id":"MessageSchemas/Schema/Topics/strategy-hedgepolicy/SpdrHedgePolicyState","title":"SpdrHedgePolicyState","description":"METADATA","source":"@site/versioned_docs/version-8.5.9.4/MessageSchemas/Schema/Topics/5280-strategy-hedgepolicy/SpdrHedgePolicyState.md","sourceDirName":"MessageSchemas/Schema/Topics/5280-strategy-hedgepolicy","slug":"/MessageSchemas/Schema/Topics/strategy-hedgepolicy/SpdrHedgePolicyState","permalink":"/docs/8.5.9.4/MessageSchemas/Schema/Topics/strategy-hedgepolicy/SpdrHedgePolicyState","draft":false,"unlisted":false,"tags":[],"version":"8.5.9.4","frontMatter":{"title":"SpdrHedgePolicyState"},"sidebar":"messageSchemasSidebar","previous":{"title":"5280-strategy-hedgepolicy","permalink":"/docs/8.5.9.4/MessageSchemas/Schema/Topics/strategy-hedgepolicy/"},"next":{"title":"5290-strategy-autohedge","permalink":"/docs/8.5.9.4/MessageSchemas/Schema/Topics/strategy-autohedge/"}}'),n=r("52676"),s=r("91503"),d=r("71386"),a=r("9641");let i={title:"SpdrHedgePolicyState"},c="Schema: SpdrHedgePolicyState (ID: 5280)",o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){let t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsxs)(t.h1,{id:"schema-spdrhedgepolicystate-id-5280",children:["Schema: SpdrHedgePolicyState ",(0,n.jsx)("span",{className:"small-text",children:"(ID: 5280)"})]})}),"\n",(0,n.jsx)(t.h3,{id:"metadata",children:"METADATA"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Attribute"}),(0,n.jsx)(t.th,{children:"Value"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Topic"}),(0,n.jsx)(t.td,{children:"5280-strategy-hedgepolicy"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"MLink Token"}),(0,n.jsx)(t.td,{children:"ClientTrading"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"SRSE Product"}),(0,n.jsx)(t.td,{children:"SRTrade"})]})]})]}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Note:"})," The symbol ",(0,n.jsx)(t.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"body",children:"BODY"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"#"}),(0,n.jsx)(t.th,{children:"Field"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Default Value"}),(0,n.jsx)(t.th,{children:"Comment"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"10="}),(0,n.jsx)(t.td,{children:"hedgeTarget"}),(0,n.jsx)(t.td,{children:"TickerKey"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"HedgeTarget"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"11="}),(0,n.jsx)(t.td,{children:"accnt"}),(0,n.jsx)(t.td,{children:"string(16)"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"12="}),(0,n.jsx)(t.td,{children:"clientFirm"}),(0,n.jsx)(t.td,{children:"string(16)"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"100"}),(0,n.jsx)(t.td,{children:"hedgeSecKey"}),(0,n.jsx)(t.td,{children:"ExpiryKey"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"101"}),(0,n.jsx)(t.td,{children:"hedgeSecType"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"102"}),(0,n.jsx)(t.td,{children:"securityDesc"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"103"}),(0,n.jsx)(t.td,{children:"ssaleFlag"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"current (live) short sale flag (stock)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"104"}),(0,n.jsx)(t.td,{children:"positionType"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"current (live) position type (future)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"105"}),(0,n.jsx)(t.td,{children:"hedgeState"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/HedgePolicyState",children:"enum : HedgePolicyState"})}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"106"}),(0,n.jsx)(t.td,{children:"hedgeText"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"107"}),(0,n.jsx)(t.td,{children:"uPrc"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"hedge target underlier price"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"108"}),(0,n.jsx)(t.td,{children:"isDeltaMixed"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"109"}),(0,n.jsx)(t.td,{children:"accumulatorError"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"110"}),(0,n.jsx)(t.td,{children:"grpDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"option delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"111"}),(0,n.jsx)(t.td,{children:"grpDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"112"}),(0,n.jsx)(t.td,{children:"grpDDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"option $delta bot (using uMid at time of option fill)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"113"}),(0,n.jsx)(t.td,{children:"grpDDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"114"}),(0,n.jsx)(t.td,{children:"lastGrpFillDttm"}),(0,n.jsx)(t.td,{children:"DateTime"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"115"}),(0,n.jsx)(t.td,{children:"ctrlDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"hedge target delta (units) bot"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"116"}),(0,n.jsx)(t.td,{children:"ctrlDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"117"}),(0,n.jsx)(t.td,{children:"ctrlDDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"hedge target $delta bot (using actual fill price)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"118"}),(0,n.jsx)(t.td,{children:"ctrlDDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"119"}),(0,n.jsx)(t.td,{children:"lastCtrlFillDttm"}),(0,n.jsx)(t.td,{children:"DateTime"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"120"}),(0,n.jsx)(t.td,{children:"absOptCn"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"total number of option contracts executed in this hedge group"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"121"}),(0,n.jsx)(t.td,{children:"netDelta"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"grpDeltaBot - grpDeltaSld + ctrlDeltaBot - ctrlDeltaSld"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"122"}),(0,n.jsx)(t.td,{children:"netDDelta"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"grpDDeltaBot - grpDDeltaSld + ctrlDDeltaBot - ctrlDDeltaSld"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"123"}),(0,n.jsx)(t.td,{children:"openHedgeTime"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"size weighted average time (in seconds) hedge risk has been open (executions to fills)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"124"}),(0,n.jsx)(t.td,{children:"hedgeTargetVol"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"implied / expected today (annualized) volatility for hedge target"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"125"}),(0,n.jsx)(t.td,{children:"expectedPrcRange"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"SQRT(avgHedgeTime x hedgeTargetVol) cone"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"126"}),(0,n.jsx)(t.td,{children:"opnDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"open risk delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"127"}),(0,n.jsx)(t.td,{children:"opnDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"128"}),(0,n.jsx)(t.td,{children:"opnDDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"open risk $delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"129"}),(0,n.jsx)(t.td,{children:"opnDDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"130"}),(0,n.jsx)(t.td,{children:"clsDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"close risk delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"131"}),(0,n.jsx)(t.td,{children:"clsDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"132"}),(0,n.jsx)(t.td,{children:"clsDDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"close risk $delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"133"}),(0,n.jsx)(t.td,{children:"clsDDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"134"}),(0,n.jsx)(t.td,{children:"slippagePnL"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"opnDeltaBot * (clsDeltaPrcSld - opnDeltaPrcBot) + opnDeltaSld * (opnDeltaPrcSld - clsDeltaPrcBot)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"135"}),(0,n.jsx)(t.td,{children:"slippageUnitPnL"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"slippagePnL / (grpDeltaBot + grpDeltaSld) [pnl / unit (share or fc)]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"136"}),(0,n.jsx)(t.td,{children:"slippageNormPnL"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"slippageUnitPnL / expectedPrcRange"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"137"}),(0,n.jsx)(t.td,{children:"minDDeltaBand"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"138"}),(0,n.jsx)(t.td,{children:"maxDDeltaBand"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"139"}),(0,n.jsx)(t.td,{children:"bParentNumber"}),(0,n.jsx)(t.td,{children:"long"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"140"}),(0,n.jsx)(t.td,{children:"bActiveSize"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"141"}),(0,n.jsx)(t.td,{children:"bBrkrStatus"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"142"}),(0,n.jsx)(t.td,{children:"bBrkrError"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"143"}),(0,n.jsx)(t.td,{children:"sParentNumber"}),(0,n.jsx)(t.td,{children:"long"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"144"}),(0,n.jsx)(t.td,{children:"sActiveSize"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"145"}),(0,n.jsx)(t.td,{children:"sBrkrStatus"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"146"}),(0,n.jsx)(t.td,{children:"sBrkrError"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"147"}),(0,n.jsx)(t.td,{children:"ddMult"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"148"}),(0,n.jsx)(t.td,{children:"underliersPerCn"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"future underliers per contract"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"149"}),(0,n.jsx)(t.td,{children:"underlierType"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/UnderlierType",children:"enum : UnderlierType"})}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"type of underlier (affects $greek calculations)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"150"}),(0,n.jsx)(t.td,{children:"pointValue"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"$NLV value of a single point change in display premium (hedge target)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"151"}),(0,n.jsx)(t.td,{children:"pointCurrency"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"152"}),(0,n.jsx)(t.td,{children:"liveHedgeMark"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"hedgeSecKey live mark (mid-market) [zero in SRSE]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"153"}),(0,n.jsx)(t.td,{children:"updtReason"}),(0,n.jsx)(t.td,{children:"string(20)"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"154"}),(0,n.jsx)(t.td,{children:"timestamp"}),(0,n.jsx)(t.td,{children:"DateTime"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"SR system timestamp"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,n.jsxs)(d.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrHedgePolicyState'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrHedgePolicyState'\n\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,n.jsxs)(d.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrHedgePolicyState\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'hedgeSecKey|hedgeSecType|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrHedgePolicyState' \\\n--data-urlencode 'view=hedgeSecKey|hedgeSecType|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,n.jsxs)(d.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrHedgePolicyState\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'hedgeSecKey|hedgeSecType|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'hedgeSecKey:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrHedgePolicyState' \\\n--data-urlencode 'view=hedgeSecKey|hedgeSecType|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=hedgeSecKey:ASC'\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,n.jsxs)(d.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrHedgePolicyState\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'hedgeSecKey|hedgeSecType|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'hedgeSecType|ssaleFlag|positionType|hedgeState|isDeltaMixed|underlierType|pointCurrency\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrHedgePolicyState' \\\n--data-urlencode 'measure=hedgeSecKey|hedgeSecType|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp' \\\n--data-urlencode 'group=hedgeSecType|ssaleFlag|positionType|hedgeState|isDeltaMixed|underlierType|pointCurrency' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,n.jsxs)(d.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrHedgePolicyState\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrHedgePolicyState' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function p(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},9641:function(e,t,r){r.d(t,{Z:()=>s});var l=r("52676");r("75271");var n=r("54461");function s(e){let{children:t,hidden:r,className:s}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,n.Z)("tabItem_SSzl",s),hidden:r,children:t})}},71386:function(e,t,r){r.d(t,{Z:()=>D});var l=r("52676"),n=r("75271"),s=r("54461"),d=r("52289"),a=r("3225"),i=r("42834"),c=r("40578"),o=r("35834"),h=r("79616");function u(e){return n.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||n.isValidElement(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){let{value:t,tabValues:r}=e;return r.some(e=>e.value===t)}var x=r("44537");function j(e){let{className:t,block:r,selectedValue:n,selectValue:a,tabValues:i}=e,c=[],{blockElementScrollPositionUntilNextRender:o}=(0,d.o5)(),h=e=>{let t=e.currentTarget,r=i[c.indexOf(t)].value;r!==n&&(o(t),a(r))},u=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let r=c.indexOf(e.currentTarget)+1;t=c[r]??c[0];break}case"ArrowLeft":{let r=c.indexOf(e.currentTarget)-1;t=c[r]??c[c.length-1]}}t?.focus()};return(0,l.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},t),children:i.map(e=>{let{value:t,label:r,attributes:d}=e;return(0,l.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>c.push(e),onKeyDown:u,onClick:h,...d,className:(0,s.Z)("tabs__item","tabItem_aitt",d?.className,{"tabs__item--active":n===t}),children:r??t},t)})})}function g(e){let{lazy:t,children:r,selectedValue:d}=e,a=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){let e=a.find(e=>e.props.value===d);return e?(0,n.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,l.jsx)("div",{className:"margin-top--md",children:a.map((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==d}))})}function m(e){let t=function(e){let{defaultValue:t,queryString:r=!1,groupId:l}=e,s=function(e){let{values:t,children:r}=e;return(0,n.useMemo)(()=>{let e=t??u(r).map(e=>{let{props:{value:t,label:r,attributes:l,default:n}}=e;return{value:t,label:r,attributes:l,default:n}});return!function(e){let t=(0,o.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,r])}(e),[d,x]=(0,n.useState)(()=>(function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}let l=r.find(e=>e.default)??r[0];if(!l)throw Error("Unexpected error: 0 tabValues");return l.value})({defaultValue:t,tabValues:s})),[j,g]=function(e){let{queryString:t=!1,groupId:r}=e,l=(0,a.k6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,c._X)(s),(0,n.useCallback)(e=>{if(!s)return;let t=new URLSearchParams(l.location.search);t.set(s,e),l.replace({...l.location,search:t.toString()})},[s,l])]}({queryString:r,groupId:l}),[m,D]=function(e){let{groupId:t}=e,r=t?`docusaurus.tab.${t}`:null,[l,s]=(0,h.Nk)(r);return[l,(0,n.useCallback)(e=>{r&&s.set(e)},[r,s])]}({groupId:l}),y=(()=>{let e=j??m;return p({value:e,tabValues:s})?e:null})();return(0,i.Z)(()=>{y&&x(y)},[y]),{selectedValue:d,selectValue:(0,n.useCallback)(e=>{if(!p({value:e,tabValues:s}))throw Error(`Can't select invalid tab value=${e}`);x(e),g(e),D(e)},[g,D,s]),tabValues:s}}(e);return(0,l.jsxs)("div",{className:(0,s.Z)("tabs-container","tabList_ArS0"),children:[(0,l.jsx)(j,{...t,...e}),(0,l.jsx)(g,{...t,...e})]})}function D(e){let t=(0,x.Z)();return(0,l.jsx)(m,{...e,children:u(e.children)},String(t))}},91503:function(e,t,r){r.d(t,{Z:function(){return a},a:function(){return d}});var l=r(75271);let n={},s=l.createContext(n);function d(e){let t=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),l.createElement(s.Provider,{value:t},e.children)}}}]);