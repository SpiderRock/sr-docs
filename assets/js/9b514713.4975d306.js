"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[19119],{20982:(e,t,N)=>{N.r(t),N.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>E,frontMatter:()=>i,metadata:()=>T,toc:()=>L});var r=N(74848),n=N(28453);const i={title:"ParentOrderGatewayExt"},a=void 0,T={id:"MessageSchemas/Schema/SRSE Products/SRTrade/ParentOrderGatewayExt/ParentOrderGatewayExt",title:"ParentOrderGatewayExt",description:"V8 Message Definition",source:"@site/docs/MessageSchemas/Schema/SRSE Products/SRTrade/ParentOrderGatewayExt/ParentOrderGatewayExt.md",sourceDirName:"MessageSchemas/Schema/SRSE Products/SRTrade/ParentOrderGatewayExt",slug:"/MessageSchemas/Schema/SRSE Products/SRTrade/ParentOrderGatewayExt/",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRTrade/ParentOrderGatewayExt/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ParentOrderGatewayExt"},sidebar:"messageSchemasSidebar",previous:{title:"ParentOrderGateway",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRTrade/ParentOrderGateway/"},next:{title:"ResponderMarkupBX",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRTrade/ResponderMarkupBX/"}},o={},L=[];function l(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"../../../Topics/srse-gateway/ParentOrderGatewayExt",children:"V8 Message Definition"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE `SRTrade`.`MsgParentOrderGatewayExt` (\n    `secKey_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'EQT' COMMENT 'SR SecKey',\n    `secKey_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'NMS' COMMENT 'SR SecKey',\n    `secKey_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'SR SecKey',\n    `secKey_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'SR SecKey',\n    `secKey_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'SR SecKey',\n    `secKey_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'SR SecKey',\n    `secKey_xx` DOUBLE NOT NULL DEFAULT 0 COMMENT 'SR SecKey',\n    `secKey_cp` ENUM('Call','Put','Pair') NOT NULL DEFAULT 'Call' COMMENT 'SR SecKey',\n    `secType` ENUM('None','Stock','Future','Option','MLeg') NOT NULL DEFAULT 'None' COMMENT 'SR SecKeyType (Stock, Future, or Option)',\n    `accnt` VARCHAR(16) NOT NULL DEFAULT '' COMMENT 'SR Account (default = primary account associated with SRSE login)',\n    `orderSide` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None' COMMENT 'Parent Order Size',\n    `groupingCode` CHAR(19) NOT NULL DEFAULT '0000-0000-0000-0000' COMMENT 'Parent Grouping Code',\n    `clientFirm` VARCHAR(16) NOT NULL DEFAULT '',\n    `spdrActionType` ENUM('Add','AddReplace','Replace','Cancel','Modify') NOT NULL DEFAULT 'Add' COMMENT '[Add (new order), AddReplace (add or replace order), Cancel (cxl existing), Replace (update existing only), Release (modify order active size)]',\n    `altOrderId` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'Alternate client order ID.  This order ID will be copied to all execution reports.',\n    `altAutoHedgeId` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'alternate order ID for child autohedge orders (if any)',\n    `altAccnt` VARCHAR(32) NOT NULL DEFAULT '' COMMENT 'alternate (client assigned) \"long\" account string (optional) [used to map between client and SR account strings]',\n    `altUserName` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'alternate (client assigned) user name (optional) [used to map between client and SR account strings]',\n    `accntRouteCode` VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'accntRoute acronym',\n    `externExDest` VARCHAR(16) NOT NULL DEFAULT '' COMMENT 'routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)',\n    `externParams` VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'external algo names/parameters (usually just an algo name)',\n    `strategy` VARCHAR(36) NOT NULL DEFAULT '' COMMENT 'Client strategy string.  This value will appear on the SR Trade Monitor and in execution reports.',\n    `securityDesc` VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'additional security description',\n    `orderDttm` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT 'order entry time (from client;if any)',\n    `orderSize` INT NOT NULL DEFAULT -1 COMMENT 'parent order size (contracts) [-1 = no change;used when spdrActionType=Release]',\n    `orderActiveSize` INT NOT NULL DEFAULT -1 COMMENT 'total activated size (total size released for execution) (-1 = all available size)',\n    `curCumFillQuantity` INT NOT NULL DEFAULT 0 COMMENT 'set order size = orderSize - Max(0, curCumFillQty - ee.cumFillQty) (used to ensure integrity of submitted cxl/replace orders)',\n    `addCumFillQuantity` ENUM('Yes','No') NOT NULL DEFAULT 'No' COMMENT 'If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing ''CumFillQuantity''.',\n    `exchMask` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'eligible exchanges (0 = all)',\n    `maxExposureSize` INT NOT NULL DEFAULT -1 COMMENT 'maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]',\n    `numMakeExchanges` TINYINT UNSIGNED NOT NULL DEFAULT 1 COMMENT 'number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.',\n    `publicSize` ENUM('None','Randomize','MktSize','FullSize','MktSizeA','MktSizeB','MktSizeC','FullSizeR') NOT NULL DEFAULT 'None' COMMENT 'public order size handling: None=use default size handling (usually limits public size to ''typical'' market size); Randomize=randomize public size; MktSize=expose only ''typical'' market size; FullSize=expose entire order size where possible',\n    `randomizeSize` ENUM('Yes','No') NOT NULL DEFAULT 'Yes' COMMENT 'randomize public order size',\n    `canOverlapCxlRepl` ENUM('Yes','No') NOT NULL DEFAULT 'No' COMMENT 'can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)',\n    `progressRule` ENUM('None','Twap','Vwap','TwapReset','VwapReset','FastReset','SlowReset','TwapAlpha','VwapAlpha','TwapAlphaC','VwapAlphaC','AutoComplete','AllowImmediate','Manual','SpdrPulse','IOC') NOT NULL DEFAULT 'None' COMMENT 'None = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;',\n    `twapSliceCnt` TINYINT UNSIGNED NOT NULL DEFAULT 4 COMMENT '[ProgressSliceCnt] number of progress slices to use (default = 4 or 8) [max 20]',\n    `progressExposeTime` INT NOT NULL DEFAULT 0 COMMENT 'minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)',\n    `auctionResponder` ENUM('None','Any') NOT NULL DEFAULT 'None' COMMENT 'if set, parent order can be an auction responder',\n    `maxMakeExchFee` FLOAT NOT NULL DEFAULT 0 COMMENT 'maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]',\n    `maxTakeExchFee` FLOAT NOT NULL DEFAULT 0 COMMENT 'maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]',\n    `incTakeExchFee` ENUM('None','ExclFee','IncFee') NOT NULL DEFAULT 'None' COMMENT 'include exchange fee in probability and surface based take limit calculations',\n    `incMakeExchFee` ENUM('None','ExclFee','IncFee') NOT NULL DEFAULT 'None' COMMENT 'include exchange fee in probability and surface based make limit calculations',\n    `makeExchRule` ENUM('None','MaxPart','FeeOptimal','ImprvOnly','FeeStrict','RoundRobin','ProRataOptim') NOT NULL DEFAULT 'None' COMMENT 'ActiveMaker exchange preference rule: ''MaxPart'' will pick exchanges to maximize participation; ''FeeOrder'' will pick exchanges to minimize fees [maximize rebates]; ''ImprvOnly'' will only make when improving NBBO.',\n    `minMktOnClosePct` TINYINT UNSIGNED NOT NULL DEFAULT 0,\n    `triggerType` ENUM('None','PrintPrc','PrintVol','SurfVol','PrtSurfVol') NOT NULL DEFAULT 'None' COMMENT 'type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]',\n    `triggerLevel` FLOAT NOT NULL DEFAULT 0 COMMENT 'stop/trigger price for parent order to go active',\n    `cxlUPrcRange` ENUM('None','Yes','No','YesHalt','NoHalt') NOT NULL DEFAULT 'None' COMMENT 'cancel parent order if/when outside min/max uPrc range [_Halt = also cancel if the security/underlier has been halted]',\n    `minUBid` FLOAT NOT NULL DEFAULT 0 COMMENT '[optional]',\n    `maxUAsk` FLOAT NOT NULL DEFAULT 0 COMMENT '[optional] (< $0.01 = none)',\n    `minMaxType` ENUM('None','Prc','Pct') NOT NULL DEFAULT 'Prc' COMMENT 'if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival',\n    `minOptionPx` FLOAT NOT NULL DEFAULT 0 COMMENT '[optional] option price floor for tied to stock orders',\n    `maxChildOrders` INT NOT NULL DEFAULT 1000 COMMENT 'maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]',\n    `spdrStageType` ENUM('None','ModifyAny','ModifyAlgo') NOT NULL DEFAULT 'None' COMMENT 'SizeLock = stage pending modification (can reduce size); SizeModify = stage pending modification (can increase/reduce size)',\n    `marketSession` ENUM('None','PreMkt','RegMkt','PostMkt','PreRegMkt','RegPostMkt','AllDay') NOT NULL DEFAULT 'RegMkt',\n    `startDttm` DATETIME(6) NOT NULL DEFAULT '2000-01-01' COMMENT '[optional] (parent order start time)',\n    `orderDuration` INT NOT NULL DEFAULT -1 COMMENT '[optional] (number of seconds)',\n    `activeDuration` INT NOT NULL DEFAULT -1 COMMENT '[optional] (number of seconds)',\n    `goodTillDttm` DATETIME(6) NOT NULL DEFAULT '2000-01-01' COMMENT '[optional] (default: 2000-01-01)',\n    `startType` ENUM('None','WaitTrigger') NOT NULL DEFAULT 'None' COMMENT '[WaitTrigger]',\n    `triggerGroupId` BIGINT NOT NULL DEFAULT -1 COMMENT 'WaitTrigger group Id; all child orders parent orders with the same triggerGroupId will optimized and released together when the group is triggered; used to effect cross exchange and cross product market ISO and price level sweeps',\n    `triggerTimestamp` BIGINT NOT NULL DEFAULT 0 COMMENT 'WaitTrigger trigger timestamp (nanoseconds since epoch)',\n    `parentOrderHandling` ENUM('None','ActiveTaker','PostOnly','DMA','MktOnOpn','MktOnCls','Facilitate','Matrix','Legger','Seeker','SeekerLegger','CrossResponse','AuctionResponse','MLegAuctionResp','RFQRequest','AwayAlgo','ExchPing','BlockAuction','BlockResponse','SweepTake','CobMaker','FaceOmni','TestParent') NOT NULL DEFAULT 'ActiveTaker',\n    `parentBalanceHandling` ENUM('None','PostWith','PostTurn','PostImprove','PostLimit','MaxIntern','PostWthF','PostImprvR','PostFlash','PostFlashW','PostPeg','PostFlashI') NOT NULL DEFAULT 'PostLimit',\n    `orderLimitType` ENUM('None','Market','MarketArrival','Prc','PrcDe','PrcDeX','PrcDeT','PrcDeP','PrcDeXT','PrcDeXP','Vol','VolX','PrcV','PrcVX','NoLimit','RelMid','RelJoin','RelCross','SmrtFast','SmrtNorm','RelTurn','PrcDeEm','VolEm','Aux','UPrcPct','PkgNeutral','RcPrem','SynthLimitMM','SynthLimitBW','SynthLimitWW') NOT NULL DEFAULT 'Market' COMMENT 'Various (Prc, PrcDe, Vol, Rel, Market); establishes the primary LimitPrice for a parent order',\n    `takeLimitClass` ENUM('Simple','Surface','Probability','SurfProb') NOT NULL DEFAULT 'Simple' COMMENT 'Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)',\n    `makeLimitClass` ENUM('Simple','Surface','Probability','SurfProb') NOT NULL DEFAULT 'Simple' COMMENT 'Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)',\n    `takeReachRule` ENUM('None','Delayed','Passive','WeakOnly','RespondOnly','FullSize','ISOSweep','AllOrNone','QtyOrMore','UpToQty','AtMost25','AtMost50') NOT NULL DEFAULT 'None' COMMENT 'None = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]',\n    `leadSide` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None' COMMENT 'for legged orders, which side to lead with.  (optional, None ok)',\n    `maxCompletionSlippage` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Maximum price slippage to complete an open basket or a cross auction (face side slippage)',\n    `orderPrcLimit` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Applies if LimitType = Prc[]',\n    `orderRefUPrc` DOUBLE NOT NULL DEFAULT 0 COMMENT 'default=underlier.mid',\n    `orderRefDelta` FLOAT NOT NULL DEFAULT -99 COMMENT 'default=option.delta',\n    `orderRefGamma` FLOAT NOT NULL DEFAULT -99 COMMENT 'default=option.gamma',\n    `orderVolLimit` FLOAT NOT NULL DEFAULT 0 COMMENT 'Applies if LimitType = Vol[] [uses SR dividends and borrow rates]',\n    `rateOverride` FLOAT NOT NULL DEFAULT -1 COMMENT 'zero = ignore;> zero = override',\n    `sdivOverride` FLOAT NOT NULL DEFAULT -1 COMMENT 'Default: 0.',\n    `ddivOverride` VARCHAR(10000) NOT NULL DEFAULT '' COMMENT 'Discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])' CHECK(LENGTH(ddivOverride) <= 10000),\n    `overrideCode` ENUM('None','SDivOnly','DDivOnly','Both') NOT NULL DEFAULT 'None' COMMENT 'override default SR dividend and rate details (only used if LimitType = Vol)',\n    `orderPrcOffset` DOUBLE NOT NULL DEFAULT 0 COMMENT 'default=0',\n    `orderRefEventMult` FLOAT NOT NULL DEFAULT 0,\n    `orderRefEventDttm` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000',\n    `takeAlphaType` ENUM('None','Static','Eagle','Hawk','Falcon','Relative') NOT NULL DEFAULT 'None' COMMENT 'Applies if takeLimitClass = Probability',\n    `makeAlphaType` ENUM('None','Static','Eagle','Hawk','Falcon','Relative') NOT NULL DEFAULT 'None' COMMENT 'Applies if makeLimitClass = Probability',\n    `takeAlphaFactor` FLOAT NOT NULL DEFAULT 0 COMMENT '[-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]',\n    `makeAlphaFactor` FLOAT NOT NULL DEFAULT 0 COMMENT '[-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]',\n    `takeProbability` FLOAT NOT NULL DEFAULT 0 COMMENT 'takeProbLimit = takeProbability [if takeAlphaType = Static]',\n    `makeProbability` FLOAT NOT NULL DEFAULT 0 COMMENT 'makeProbLimit = makeProbability [if makeAlphaType = Static]',\n    `takeSurfPrcOffset` DOUBLE NOT NULL DEFAULT 0 COMMENT 'default=0',\n    `takeSurfVolOffset` FLOAT NOT NULL DEFAULT 0 COMMENT 'default=0',\n    `takeSurfWidthOffset` FLOAT NOT NULL DEFAULT 0 COMMENT '[-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth',\n    `makeSurfPrcOffset` DOUBLE NOT NULL DEFAULT 0 COMMENT 'default=0',\n    `makeSurfVolOffset` FLOAT NOT NULL DEFAULT 0 COMMENT 'default=0',\n    `makeSurfWidthOffset` FLOAT NOT NULL DEFAULT 0 COMMENT '[-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth',\n    `autoHedge` ENUM('None','Static','AutoMid','AutoCrx','AutoTrn','SpdrAuto','Spdr10S','Spdr30S','Spdr90S','Spdr5M','Spdr30M','SpdrDay','SmartFast','SmartNorm','FastCrx','FastDark','SlowDark','AlphaVwap1pct','AlphaVwap2pct','AlphaVwap5pct','AlphaVwap25pct','Custom','AwayAlgo') NOT NULL DEFAULT 'None',\n    `hedgeInstrument` ENUM('None','Default','FrontMonth','Stock','Future') NOT NULL DEFAULT 'Default' COMMENT 'Default=underlier (EQT or FUT) [Index Options use ETF]; FrontMonth=underlier (EQT) or front month (FUT) [Index Options use FM Fut]; Stock=hedgeSecKey; Future=hedgeSecKey',\n    `hedgeSecKey_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'EQT' COMMENT 'autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]',\n    `hedgeSecKey_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'NMS' COMMENT 'autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]',\n    `hedgeSecKey_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]',\n    `hedgeSecKey_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 1900 COMMENT 'autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]',\n    `hedgeSecKey_mn` TINYINT UNSIGNED NOT NULL DEFAULT 1 COMMENT 'autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]',\n    `hedgeSecKey_dy` TINYINT UNSIGNED NOT NULL DEFAULT 1 COMMENT 'autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]',\n    `hedgeBetaRatio` FLOAT NOT NULL DEFAULT 1.0 COMMENT 'portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])',\n    `hedgeScope` ENUM('None','Accnt','RiskGroup') NOT NULL DEFAULT 'RiskGroup',\n    `hedgeSession` ENUM('None','PreMkt','RegMkt','PostMkt','PreRegMkt','RegPostMkt','AllDay') NOT NULL DEFAULT 'RegMkt',\n    `positionType` ENUM('Opening','Closing','Auto') NOT NULL DEFAULT 'Auto',\n    `ssaleFlag` ENUM('None','Long','Short','Exempt','Cover','Auto','NA') NOT NULL DEFAULT 'Auto' COMMENT 'Used to determine stock auto-hedge flags.',\n    `firmType` ENUM('None','Customer','Firm','MarketMaker','ProCustomer','BrokerDealer','AwayMM','FirmJBO','BrkrDlrCust') NOT NULL DEFAULT 'None' COMMENT 'Used to override firmType in account config. Default: None (use SpiderRock account configuration).',\n    `theoVol` FLOAT NOT NULL DEFAULT 0 COMMENT 'client supplied theoretical volatility (used for markup only)',\n    `riskGroupId` CHAR(19) NOT NULL DEFAULT '0000-0000-0000-0000' COMMENT 'All group (grp) risk limits below are relative to this riskGroupId.  Default: 0 (none).  Required to be non-zero if `autoHedge` is something other than None.',\n    `reqAuxRiskGroupCtrl` ENUM('None','Yes','No') NOT NULL DEFAULT 'None',\n    `refRMetric1Src` ENUM('None','User','Vega','WVega','WTVega','TVega','Theta','Gamma','DGamma','DDeltaIvS','BDDelta','OptDDelta','Premium','Notional') NOT NULL DEFAULT 'None',\n    `refRMetric2Src` ENUM('None','User','Vega','WVega','WTVega','TVega','Theta','Gamma','DGamma','DDeltaIvS','BDDelta','OptDDelta','Premium','Notional') NOT NULL DEFAULT 'None',\n    `refRMetric3Src` ENUM('None','User','Vega','WVega','WTVega','TVega','Theta','Gamma','DGamma','DDeltaIvS','BDDelta','OptDDelta','Premium','Notional') NOT NULL DEFAULT 'None',\n    `refRMetric4Src` ENUM('None','User','Vega','WVega','WTVega','TVega','Theta','Gamma','DGamma','DDeltaIvS','BDDelta','OptDDelta','Premium','Notional') NOT NULL DEFAULT 'None',\n    `refRMetric5Src` ENUM('None','User','Vega','WVega','WTVega','TVega','Theta','Gamma','DGamma','DDeltaIvS','BDDelta','OptDDelta','Premium','Notional') NOT NULL DEFAULT 'None',\n    `refRMetric6Src` ENUM('None','User','Vega','WVega','WTVega','TVega','Theta','Gamma','DGamma','DDeltaIvS','BDDelta','OptDDelta','Premium','Notional') NOT NULL DEFAULT 'None',\n    `refRMetric7Src` ENUM('None','User','Vega','WVega','WTVega','TVega','Theta','Gamma','DGamma','DDeltaIvS','BDDelta','OptDDelta','Premium','Notional') NOT NULL DEFAULT 'None',\n    `orderRefRMetric1` FLOAT NOT NULL DEFAULT 0 COMMENT 'user supplied RMetric1 value (used in RiskGroupID risk controls) [netRMetric1 = sum(fillQty * orderRefRMetric1 * underlierPerCn)]',\n    `orderRefRMetric2` FLOAT NOT NULL DEFAULT 0 COMMENT 'user supplied RMetric2 value (used in RiskGroupID risk controls) [netRMetric2 = sum(fillQty * orderRefRMetric2 * underlierPerCn)]',\n    `orderRefRMetric3` FLOAT NOT NULL DEFAULT 0 COMMENT 'user supplied RMetric3 value (used in RiskGroupID risk controls) [netRMetric3 = sum(fillQty * orderRefRMetric3 * underlierPerCn)]',\n    `orderRefRMetric4` FLOAT NOT NULL DEFAULT 0 COMMENT 'user supplied RMetric4 value (used in RiskGroupID risk controls) [netRMetric4 = sum(fillQty * orderRefRMetric4 * underlierPerCn)]',\n    `orderRefRMetric5` FLOAT NOT NULL DEFAULT 0 COMMENT 'user supplied RMetric5 value (used in RiskGroupID risk controls) [netRMetric5 = sum(fillQty * orderRefRMetric5 * underlierPerCn)]',\n    `orderRefRMetric6` FLOAT NOT NULL DEFAULT 0 COMMENT 'user supplied RMetric6 value (used in ExpDay risk controls) [netRMetric6 = sum(fillQty * orderRefRMetric6 * underlierPerCn)]',\n    `orderRefRMetric7` FLOAT NOT NULL DEFAULT 0 COMMENT 'user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]',\n    `expDayWtVegaOffset` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day wtVega offset (target)',\n    `maxExpDayWtVegaLn` FLOAT NOT NULL DEFAULT -1 COMMENT 'max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)',\n    `maxExpDayWtVegaSh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)',\n    `maxExpDayRMetric6Ln` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxExpDayRMetric6Sh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `symDayDDeltaOffset` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day $delta offset (target)',\n    `maxSymDayDDeltaLn` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)',\n    `maxSymDayDDeltaSh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)',\n    `symDayVegaOffset` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day vega offset (target)',\n    `maxSymDayVegaLn` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)',\n    `maxSymDayVegaSh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)',\n    `symDayWtVegaOffset` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day wtVega offset (target)',\n    `maxSymDayWtVegaLn` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)',\n    `maxSymDayWtVegaSh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)',\n    `maxSymDayRMetric7Ln` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxSymDayRMetric7Sh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `maxGrpDayDDeltaLn` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxGrpDayDDeltaSh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `maxGrpDayVegaLn` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxGrpDayVegaSh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `maxGrpDayVegaAbs` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)',\n    `grpDayVegaRatio` FLOAT NOT NULL DEFAULT 1.0 COMMENT 'target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)',\n    `maxGrpDayContractsLn` INT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day opt contracts long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxGrpDayContractsSh` INT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day opt contracts short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `maxGrpDayContractsAbs` INT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day opt contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)',\n    `maxGrpDayRMetric1Ln` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxGrpDayRMetric1Sh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `maxGrpDayRMetric1Abs` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)',\n    `grpDayRMetric1Ratio` FLOAT NOT NULL DEFAULT 1.0 COMMENT 'target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)',\n    `maxGrpDayRMetric2Ln` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxGrpDayRMetric2Sh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `maxGrpDayRMetric3Ln` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxGrpDayRMetric3Sh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `maxGrpDayRMetric4Ln` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxGrpDayRMetric4Sh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `maxGrpDayRMetric5Ln` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter',\n    `maxGrpDayRMetric5Sh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter',\n    `symEmaCxlDDeltaLn` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]',\n    `symEmaCxlDDeltaSh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)',\n    `symEmaCxlWtVegaLn` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]',\n    `symEmaCxlWtVegaSh` FLOAT NOT NULL DEFAULT -1 COMMENT 'max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)',\n    `traderName` VARCHAR(32) NOT NULL DEFAULT '' COMMENT 'Name of the trader associated with the order',\n    `userData1` VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'client supplied data field; passes through to parent and child executions and reports as well as FIX drops',\n    `userData2` VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'client supplied data field; passes through to parent and child executions and reports as well as FIX drops',\n    `childData` VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'client supplied data field; passes through to down stream child orders',\n    `mlegTicker_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'stock ticker',\n    `mlegTicker_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'stock ticker',\n    `mlegTicker_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'stock ticker',\n    `mlegStockSide` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None' COMMENT '[Buy | Sell | None]',\n    `mlegStockShares` INT NOT NULL DEFAULT 0 COMMENT 'number of shares included (zero if none)',\n    `mlegStockLegId` BIGINT NOT NULL DEFAULT 0 COMMENT 'SR stock leg ID',\n    `mlegAltStkLegId` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'client stock leg ID (usually from a FIX order)',\n    `mlegSSaleFlag` ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') NOT NULL DEFAULT 'None' COMMENT 'stock short sale flag',\n    `mlegRefUPrc` FLOAT NOT NULL DEFAULT 0 COMMENT 'reference underlier price (PrcDe orders)',\n    `mlegNumLegs` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'number of valid legs below',\n    `mlegSecKey1_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'leg #1',\n    `mlegSecKey1_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'leg #1',\n    `mlegSecKey1_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'leg #1',\n    `mlegSecKey1_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 1900 COMMENT 'leg #1',\n    `mlegSecKey1_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #1',\n    `mlegSecKey1_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #1',\n    `mlegSecKey1_xx` DOUBLE NOT NULL DEFAULT 0 COMMENT 'leg #1',\n    `mlegSecKey1_cp` ENUM('Call','Put','Pair') NOT NULL DEFAULT 'Call' COMMENT 'leg #1',\n    `mlegSecType1` ENUM('None','Stock','Future','Option','MLeg') NOT NULL DEFAULT 'None',\n    `mlegMult1` SMALLINT UNSIGNED NOT NULL DEFAULT 0,\n    `mlegSide1` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None',\n    `mlegLegId1` BIGINT NOT NULL DEFAULT 0 COMMENT 'SR leg Id',\n    `mlegAltLegId1` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'client leg Id (usually from a FIX order)',\n    `mlegPosType1` ENUM('None','Opening','Closing','Auto') NOT NULL DEFAULT 'None',\n    `mlegSsaleFlag1` ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') NOT NULL DEFAULT 'None',\n    `mlegVega1` FLOAT NOT NULL DEFAULT 0,\n    `mlegRefUPrc1` DOUBLE NOT NULL DEFAULT 0 COMMENT 'reference underlier price (PrcDe orders)',\n    `mlegRefDelta1` FLOAT NOT NULL DEFAULT 0 COMMENT 'reference delta (for PrcDe order handling)',\n    `mlegRefEarnCnt1` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'reference # of earnings moves before expiration',\n    `mlegSecKey2_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'leg #2',\n    `mlegSecKey2_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'leg #2',\n    `mlegSecKey2_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'leg #2',\n    `mlegSecKey2_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 1900 COMMENT 'leg #2',\n    `mlegSecKey2_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #2',\n    `mlegSecKey2_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #2',\n    `mlegSecKey2_xx` DOUBLE NOT NULL DEFAULT 0 COMMENT 'leg #2',\n    `mlegSecKey2_cp` ENUM('Call','Put','Pair') NOT NULL DEFAULT 'Call' COMMENT 'leg #2',\n    `mlegSecType2` ENUM('None','Stock','Future','Option','MLeg') NOT NULL DEFAULT 'None',\n    `mlegMult2` SMALLINT UNSIGNED NOT NULL DEFAULT 0,\n    `mlegSide2` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None',\n    `mlegLegId2` BIGINT NOT NULL DEFAULT 0 COMMENT 'SR leg Id',\n    `mlegAltLegId2` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'client leg Id (usually from a FIX order)',\n    `mlegPosType2` ENUM('None','Opening','Closing','Auto') NOT NULL DEFAULT 'None',\n    `mlegSsaleFlag2` ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') NOT NULL DEFAULT 'None',\n    `mlegVega2` FLOAT NOT NULL DEFAULT 0,\n    `mlegRefUPrc2` DOUBLE NOT NULL DEFAULT 0 COMMENT 'reference underlier price (PrcDe orders)',\n    `mlegRefDelta2` FLOAT NOT NULL DEFAULT 0 COMMENT 'reference delta (for PrcDe order handling)',\n    `mlegRefEarnCnt2` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'reference # of earnings moves before expiration',\n    `mlegSecKey3_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'leg #3',\n    `mlegSecKey3_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'leg #3',\n    `mlegSecKey3_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'leg #3',\n    `mlegSecKey3_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 1900 COMMENT 'leg #3',\n    `mlegSecKey3_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #3',\n    `mlegSecKey3_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #3',\n    `mlegSecKey3_xx` DOUBLE NOT NULL DEFAULT 0 COMMENT 'leg #3',\n    `mlegSecKey3_cp` ENUM('Call','Put','Pair') NOT NULL DEFAULT 'Call' COMMENT 'leg #3',\n    `mlegSecType3` ENUM('None','Stock','Future','Option','MLeg') NOT NULL DEFAULT 'None',\n    `mlegMult3` SMALLINT UNSIGNED NOT NULL DEFAULT 0,\n    `mlegSide3` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None',\n    `mlegLegId3` BIGINT NOT NULL DEFAULT 0 COMMENT 'SR leg Id',\n    `mlegAltLegId3` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'client leg Id (usually from a FIX order)',\n    `mlegPosType3` ENUM('None','Opening','Closing','Auto') NOT NULL DEFAULT 'None',\n    `mlegSsaleFlag3` ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') NOT NULL DEFAULT 'None',\n    `mlegVega3` FLOAT NOT NULL DEFAULT 0,\n    `mlegRefUPrc3` DOUBLE NOT NULL DEFAULT 0 COMMENT 'reference underlier price (PrcDe orders)',\n    `mlegRefDelta3` FLOAT NOT NULL DEFAULT 0 COMMENT 'reference delta (for PrcDe order handling)',\n    `mlegRefEarnCnt3` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'reference # of earnings moves before expiration',\n    `mlegSecKey4_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'leg #4',\n    `mlegSecKey4_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'leg #4',\n    `mlegSecKey4_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'leg #4',\n    `mlegSecKey4_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 1900 COMMENT 'leg #4',\n    `mlegSecKey4_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #4',\n    `mlegSecKey4_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #4',\n    `mlegSecKey4_xx` DOUBLE NOT NULL DEFAULT 0 COMMENT 'leg #4',\n    `mlegSecKey4_cp` ENUM('Call','Put','Pair') NOT NULL DEFAULT 'Call' COMMENT 'leg #4',\n    `mlegSecType4` ENUM('None','Stock','Future','Option','MLeg') NOT NULL DEFAULT 'None',\n    `mlegMult4` SMALLINT UNSIGNED NOT NULL DEFAULT 0,\n    `mlegSide4` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None',\n    `mlegLegId4` BIGINT NOT NULL DEFAULT 0 COMMENT 'SR leg Id',\n    `mlegAltLegId4` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'client leg Id (usually from a FIX order)',\n    `mlegPosType4` ENUM('None','Opening','Closing','Auto') NOT NULL DEFAULT 'None',\n    `mlegSsaleFlag4` ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') NOT NULL DEFAULT 'None',\n    `mlegVega4` FLOAT NOT NULL DEFAULT 0,\n    `mlegRefUPrc4` DOUBLE NOT NULL DEFAULT 0 COMMENT 'reference underlier price (PrcDe orders)',\n    `mlegRefDelta4` FLOAT NOT NULL DEFAULT 0 COMMENT 'reference delta (for PrcDe order handling)',\n    `mlegRefEarnCnt4` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'reference # of earnings moves before expiration',\n    `mlegSecKey5_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'leg #5',\n    `mlegSecKey5_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'leg #5',\n    `mlegSecKey5_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'leg #5',\n    `mlegSecKey5_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 1900 COMMENT 'leg #5',\n    `mlegSecKey5_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #5',\n    `mlegSecKey5_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #5',\n    `mlegSecKey5_xx` DOUBLE NOT NULL DEFAULT 0 COMMENT 'leg #5',\n    `mlegSecKey5_cp` ENUM('Call','Put','Pair') NOT NULL DEFAULT 'Call' COMMENT 'leg #5',\n    `mlegSecType5` ENUM('None','Stock','Future','Option','MLeg') NOT NULL DEFAULT 'None',\n    `mlegMult5` SMALLINT UNSIGNED NOT NULL DEFAULT 0,\n    `mlegSide5` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None',\n    `mlegLegId5` BIGINT NOT NULL DEFAULT 0 COMMENT 'SR leg Id',\n    `mlegAltLegId5` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'client leg Id (usually from a FIX order)',\n    `mlegPosType5` ENUM('None','Opening','Closing','Auto') NOT NULL DEFAULT 'None',\n    `mlegSsaleFlag5` ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') NOT NULL DEFAULT 'None',\n    `mlegVega5` FLOAT NOT NULL DEFAULT 0,\n    `mlegRefUPrc5` DOUBLE NOT NULL DEFAULT 0 COMMENT 'reference underlier price (PrcDe orders)',\n    `mlegRefDelta5` FLOAT NOT NULL DEFAULT 0 COMMENT 'reference delta (for PrcDe order handling)',\n    `mlegRefEarnCnt5` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'reference # of earnings moves before expiration',\n    `mlegSecKey6_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'leg #6',\n    `mlegSecKey6_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'leg #6',\n    `mlegSecKey6_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'leg #6',\n    `mlegSecKey6_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 1900 COMMENT 'leg #6',\n    `mlegSecKey6_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #6',\n    `mlegSecKey6_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'leg #6',\n    `mlegSecKey6_xx` DOUBLE NOT NULL DEFAULT 0 COMMENT 'leg #6',\n    `mlegSecKey6_cp` ENUM('Call','Put','Pair') NOT NULL DEFAULT 'Call' COMMENT 'leg #6',\n    `mlegSecType6` ENUM('None','Stock','Future','Option','MLeg') NOT NULL DEFAULT 'None',\n    `mlegMult6` SMALLINT UNSIGNED NOT NULL DEFAULT 0,\n    `mlegSide6` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None',\n    `mlegLegId6` BIGINT NOT NULL DEFAULT 0 COMMENT 'SR leg Id',\n    `mlegAltLegId6` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'client leg Id (usually from a FIX order)',\n    `mlegPosType6` ENUM('None','Opening','Closing','Auto') NOT NULL DEFAULT 'None',\n    `mlegSsaleFlag6` ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') NOT NULL DEFAULT 'None',\n    `mlegVega6` FLOAT NOT NULL DEFAULT 0,\n    `mlegRefUPrc6` DOUBLE NOT NULL DEFAULT 0 COMMENT 'reference underlier price (PrcDe orders)',\n    `mlegRefDelta6` FLOAT NOT NULL DEFAULT 0 COMMENT 'reference delta (for PrcDe order handling)',\n    `mlegRefEarnCnt6` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'reference # of earnings moves before expiration',\n    `optPremium` FLOAT NOT NULL DEFAULT 0 COMMENT 'The premium for the option legs, a contribution to the order premium. Valid range is [-9999.0, 9999.0]. Default: 0.',\n    `checksum` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Must be set to 13.  This helps detect some column/value misalignments.',\n    CONSTRAINT nonnegative_groupingCode CHECK(ASCII(groupingCode) < 56),\n    CONSTRAINT nonnegative_riskGroupId CHECK(ASCII(riskGroupId) < 56),\n    PRIMARY KEY USING HASH (`secKey_tk`,`secKey_yr`,`secKey_mn`,`secKey_dy`,`secKey_xx`,`secKey_cp`,`secKey_at`,`secKey_ts`,`secType`,`accnt`,`orderSide`,`groupingCode`,`clientFirm`)\n) ENGINE=SRSE DEFAULT CHARSET=LATIN1 COMMENT='Records inserted, updated, or replaced into the ParentOrderGatewayExt table are validated and then converted to SpdrParentOrder records and forwarded to the appropriate execution engine for futher processing.  Parent orders can be inserted as either active/ready or in a wait start mode that requires subsequent release.\\nSee the SpiderRock Execution Engine concept guide for more details.';\n\n"})})]})}function E(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,N)=>{N.d(t,{R:()=>a,x:()=>T});var r=N(96540);const n={},i=r.createContext(n);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function T(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);