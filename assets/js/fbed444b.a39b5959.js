"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[64174],{57302:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>x,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var s=t(74848),i=t(28453),n=t(11470),d=t(19365);const a={title:"LiveExpirySurface"},l="Schema: LiveExpirySurface (ID: 1132)",c={id:"MessageSchemas/Schema/Topics/analytics/LiveExpirySurface",title:"LiveExpirySurface",description:"LiveExpirySurface (surfaceType = 'Live') records are computed and publish continuously during trading hours and represent a current best implied volatility market fit.SurfaceType = 'PriorDay' records contain the `closing surface record from the prior trading period (usually from just before the last main session close).",source:"@site/versioned_docs/version-8.5.3.1/MessageSchemas/Schema/Topics/1000-analytics/LiveExpirySurface.md",sourceDirName:"MessageSchemas/Schema/Topics/1000-analytics",slug:"/MessageSchemas/Schema/Topics/analytics/LiveExpirySurface",permalink:"/docs/8.5.3.1/MessageSchemas/Schema/Topics/analytics/LiveExpirySurface",draft:!1,unlisted:!1,tags:[],version:"8.5.3.1",frontMatter:{title:"LiveExpirySurface"},sidebar:"messageSchemasSidebar",previous:{title:"LiveExpiryAtm",permalink:"/docs/8.5.3.1/MessageSchemas/Schema/Topics/analytics/LiveExpiryAtm"},next:{title:"LiveIVarSwapFixedTerm",permalink:"/docs/8.5.3.1/MessageSchemas/Schema/Topics/analytics/LiveIVarSwapFixedTerm"}},o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"REPEATING FIELDS",id:"repeating-fields",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"schema-liveexpirysurface-id-1132",children:["Schema: LiveExpirySurface ",(0,s.jsx)("span",{className:"small-text",children:"(ID: 1132)"})]}),"\n",(0,s.jsxs)(r.p,{children:["LiveExpirySurface (surfaceType = 'Live') records are computed and publish continuously during trading hours and represent a current best implied volatility market fit.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),"SurfaceType = 'PriorDay' records contain the `closing surface record from the prior trading period (usually from just before the last main session close)."]}),"\n",(0,s.jsx)(r.h3,{id:"metadata",children:"METADATA"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Attribute"}),(0,s.jsx)(r.th,{children:"Value"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Topic"}),(0,s.jsx)(r.td,{children:"1000-analytics"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"MLink Token"}),(0,s.jsx)(r.td,{children:"SRMLinkAnalytics"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"SRSE Product"}),(0,s.jsx)(r.td,{children:"SRAnalytics"})]})]})]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Note:"})," The symbol ",(0,s.jsx)(r.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"body",children:"BODY"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"#"}),(0,s.jsx)(r.th,{children:"Field"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Comment"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"10="}),(0,s.jsx)(r.td,{children:"ekey"}),(0,s.jsx)(r.td,{children:"ExpiryKey"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"11="}),(0,s.jsx)(r.td,{children:"surfaceType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SurfaceCurveType",children:"enum : SurfaceCurveType"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"100"}),(0,s.jsx)(r.td,{children:"uPrc"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"effective uPrc used for surface fitting"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"101"}),(0,s.jsx)(r.td,{children:"uPrcDriver"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"underlier driver (mid-market)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"154"}),(0,s.jsx)(r.td,{children:"iDays"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"interest days to expiry"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"102"}),(0,s.jsx)(r.td,{children:"years"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"volatility time to expiration (in years)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"103"}),(0,s.jsx)(r.td,{children:"rate"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"term interest rate to expiry (discount rate)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"105"}),(0,s.jsx)(r.td,{children:"atmVol"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"atm surface volatility (xAxis = 0)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"155"}),(0,s.jsx)(r.td,{children:"atmCen"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"censored atm surface volatility (xAxis = 0)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"106"}),(0,s.jsx)(r.td,{children:"atmSlope"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"volatility surface slope (dVol / dXAxis) (xAxis=0)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"156"}),(0,s.jsx)(r.td,{children:"atmSkewYY"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"skewFn @ xAxis = 0 (sticky surface static point)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"157"}),(0,s.jsx)(r.td,{children:"atmVResidual"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"vResidual @ xAxis = 0 (sticky surface static point)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"158"}),(0,s.jsx)(r.td,{children:"atmSDiv"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"atm continous stock dividend (borrow rate) (xAxis = 0)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"159"}),(0,s.jsx)(r.td,{children:"basisEKey"}),(0,s.jsx)(r.td,{children:"ExpiryKey"}),(0,s.jsx)(r.td,{children:"LiveBasisCurve.pkey.ekey record that defines BasisSkewFn below."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"160"}),(0,s.jsx)(r.td,{children:"basisTimestamp"}),(0,s.jsx)(r.td,{children:"DateTime"}),(0,s.jsx)(r.td,{children:"LiveBasisCurve.timestamp"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"108"}),(0,s.jsx)(r.td,{children:"axisFUPrc"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"axis FwdUPrc (fwd underlying price used to compute xAxis)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"109"}),(0,s.jsx)(r.td,{children:"axisVolRT"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"axis VolRT value used to compute xAxis (usually equal to skewMult) (value at curve min point)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"111"}),(0,s.jsx)(r.td,{children:"xMult"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"112"}),(0,s.jsx)(r.td,{children:"xShift"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"110"}),(0,s.jsx)(r.td,{children:"skewMult"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"sVol = skewMult * BasisSkewFn(xMult * (xAxis - xShift))"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"164"}),(0,s.jsx)(r.td,{children:"maxResidualErr"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"largest remain residual error (in premium points)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"165"}),(0,s.jsx)(r.td,{children:"cpAdjA"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"cpAdj = cpAdjA + cpXDe * cpAdjB + cpXDe * cpXDe * cpAdjC [cpAdj is either sdiv or uPrcRatio]"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"166"}),(0,s.jsx)(r.td,{children:"cpAdjB"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"167"}),(0,s.jsx)(r.td,{children:"cpAdjC"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"168"}),(0,s.jsx)(r.td,{children:"cpAdjRefVol"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"cpXDe = 0.5 - BS_cDe(uPrc, strike, cpAdjRefVol, years, rate, sdiv=0)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"169"}),(0,s.jsx)(r.td,{children:"ticker"}),(0,s.jsx)(r.td,{children:"TickerKey"}),(0,s.jsx)(r.td,{children:"underlying stock key that this option expiration attaches to"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"170"}),(0,s.jsx)(r.td,{children:"fkey"}),(0,s.jsx)(r.td,{children:"ExpiryKey"}),(0,s.jsx)(r.td,{children:"underlying future key (if any)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"171"}),(0,s.jsx)(r.td,{children:"uPrcDriverKey"}),(0,s.jsx)(r.td,{children:"ExpiryKey"}),(0,s.jsx)(r.td,{children:"underlier driver key"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"172"}),(0,s.jsx)(r.td,{children:"uPrcDriverType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,s.jsx)(r.td,{children:"underlier driver key type (stock or future)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"173"}),(0,s.jsx)(r.td,{children:"ddiv"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"(expected) cumulative discrete dividend $ amounts prior to expiration"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"174"}),(0,s.jsx)(r.td,{children:"ddivPv"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"(expected) cumulative npv of discrete dividend $ amounts prior to expiration (SR global rate curve)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"175"}),(0,s.jsx)(r.td,{children:"ddivSource"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/DDivSource",children:"enum : DDivSource"})}),(0,s.jsx)(r.td,{children:"Forecast if any of the dividends prior to expiry are forecast rather than announced"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"176"}),(0,s.jsx)(r.td,{children:"symbolRatio"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"underlier price ratio (usually 1.0 or a multi-hedge option price ratio; if one exists)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"177"}),(0,s.jsx)(r.td,{children:"exType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/ExerciseType",children:"enum : ExerciseType"})}),(0,s.jsx)(r.td,{children:"exercise type (American or European)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"178"}),(0,s.jsx)(r.td,{children:"modelType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/CalcModelType",children:"enum : CalcModelType"})}),(0,s.jsx)(r.td,{children:"option pricing model used for price calcs (Normal, LogNormal, etc.)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"179"}),(0,s.jsx)(r.td,{children:"priceType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/CalcPriceType",children:"enum : CalcPriceType"})}),(0,s.jsx)(r.td,{children:"Equity has independent sdiv and rate, Future has sdiv = rate"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"180"}),(0,s.jsx)(r.td,{children:"earnCnt"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"number of qualifying earnings events prior to expiration [can be fractional] (from StockEarningsCalendar)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"181"}),(0,s.jsx)(r.td,{children:"earnCntAdj"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"number of qualifying earnings events prior to expiration [adjusted] (from StockEarningsCalendar + LiveSurfaceTerm)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"182"}),(0,s.jsx)(r.td,{children:"moneynessType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/MoneynessType",children:"enum : MoneynessType"})}),(0,s.jsx)(r.td,{children:"moneyness (xAxis) convention"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"183"}),(0,s.jsx)(r.td,{children:"priceQuoteType"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/PriceQuoteType",children:"enum : PriceQuoteType"})}),(0,s.jsx)(r.td,{children:"Price or Vol"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"184"}),(0,s.jsx)(r.td,{children:"atmVolHist"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"historical realized volatility (includes eMoveHist x earnCntAdj adjustment).  Note that this is the default atmVol if no implied markets existed previous day."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"185"}),(0,s.jsx)(r.td,{children:"atmCenHist"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"censored (earnings events removed) historical realized volatility.  Trailing periods is 2x forward time to expiration.  From HistoricalVolatility(windowType=hlCen).mv_nnn"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"186"}),(0,s.jsx)(r.td,{children:"uBetaHist"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"beta (this underlier vs basis underlier; T + 1 week)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"187"}),(0,s.jsx)(r.td,{children:"eMove"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"implied earnings move (from LiveSurfaceTerm)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"188"}),(0,s.jsx)(r.td,{children:"eMoveHist"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"189"}),(0,s.jsx)(r.td,{children:"minXAxis"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"minimum xAxis value; left most point with a valid supporting strike"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"190"}),(0,s.jsx)(r.td,{children:"maxXAxis"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"maximum xAxis value; right most point with a valid supporting strike"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"191"}),(0,s.jsx)(r.td,{children:"synSpot"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"synthetic spot price (future style pricing)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"192"}),(0,s.jsx)(r.td,{children:"synCarry"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"synthetic carry rate (future style pricing)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"193"}),(0,s.jsx)(r.td,{children:"uPrcRatio"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{children:"uPrcAdj = uPrc * uPrcRatioFit"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"194"}),(0,s.jsx)(r.td,{children:"pWidth"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"minimum mkt premium width"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"195"}),(0,s.jsx)(r.td,{children:"vWidth"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"minimum mkt volatility width"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"196"}),(0,s.jsx)(r.td,{children:"cCnt"}),(0,s.jsx)(r.td,{children:"ushort"}),(0,s.jsx)(r.td,{children:"num call strikes in base fit"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"197"}),(0,s.jsx)(r.td,{children:"pCnt"}),(0,s.jsx)(r.td,{children:"ushort"}),(0,s.jsx)(r.td,{children:"num put strikes in base fit"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"198"}),(0,s.jsx)(r.td,{children:"hasBracketMin"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"199"}),(0,s.jsx)(r.td,{children:"hasMinPoint"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"200"}),(0,s.jsx)(r.td,{children:"hasXMultABFit"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"201"}),(0,s.jsx)(r.td,{children:"xMultABFitError"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"202"}),(0,s.jsx)(r.td,{children:"hasSkewMultFit"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"203"}),(0,s.jsx)(r.td,{children:"skewMultFitError"}),(0,s.jsx)(r.td,{children:"double"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"204"}),(0,s.jsx)(r.td,{children:"cBidMiss"}),(0,s.jsx)(r.td,{children:"byte"}),(0,s.jsx)(r.td,{children:"number of call bid violations (surface outside the market)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"205"}),(0,s.jsx)(r.td,{children:"cAskMiss"}),(0,s.jsx)(r.td,{children:"byte"}),(0,s.jsx)(r.td,{children:"number of call ask violations (surface outside the market)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"206"}),(0,s.jsx)(r.td,{children:"pBidMiss"}),(0,s.jsx)(r.td,{children:"byte"}),(0,s.jsx)(r.td,{children:"number of put bid violations"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"207"}),(0,s.jsx)(r.td,{children:"pAskMiss"}),(0,s.jsx)(r.td,{children:"byte"}),(0,s.jsx)(r.td,{children:"number of put ask violations"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"208"}),(0,s.jsx)(r.td,{children:"fitScore"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"209"}),(0,s.jsx)(r.td,{children:"cumFitScore"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"212"}),(0,s.jsx)(r.td,{children:"numPrintsDD"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"cpXDe < -0.45"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"213"}),(0,s.jsx)(r.td,{children:"avgPrtErrDD"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"avg: prtPrc - surfacePrc (AUTO ONLY)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"214"}),(0,s.jsx)(r.td,{children:"stdPrtErrDD"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{children:"std: prtPrc - surfacePrc (AUTO ONLY)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"215"}),(0,s.jsx)(r.td,{children:"numPrintsDN"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"cpXDe: [-0.45, -0.15)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"216"}),(0,s.jsx)(r.td,{children:"avgPrtErrDN"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"217"}),(0,s.jsx)(r.td,{children:"stdPrtErrDN"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"218"}),(0,s.jsx)(r.td,{children:"numPrintsAT"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"cpXDe: [-0.15, +0.15]"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"219"}),(0,s.jsx)(r.td,{children:"avgPrtErrAT"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"220"}),(0,s.jsx)(r.td,{children:"stdPrtErrAT"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"221"}),(0,s.jsx)(r.td,{children:"numPrintsUP"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"cpXDe: (+0.15, +0.45]"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"222"}),(0,s.jsx)(r.td,{children:"avgPrtErrUP"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"223"}),(0,s.jsx)(r.td,{children:"stdPrtErrUP"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"224"}),(0,s.jsx)(r.td,{children:"numPrintsDU"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"cpXDe > +0.45"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"225"}),(0,s.jsx)(r.td,{children:"avgPrtErrDU"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"226"}),(0,s.jsx)(r.td,{children:"stdPrtErrDU"}),(0,s.jsx)(r.td,{children:"float"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"210"}),(0,s.jsx)(r.td,{children:"fitCounter"}),(0,s.jsx)(r.td,{children:"int"}),(0,s.jsx)(r.td,{children:"number of fit/count passes (current trade date / market open)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"150"}),(0,s.jsx)(r.td,{children:"tradeableStatus"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/TradeableStatus",children:"enum : TradeableStatus"})}),(0,s.jsx)(r.td,{children:"indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"227"}),(0,s.jsx)(r.td,{children:"marketPhase"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/MarketPhase",children:"enum : MarketPhase"})}),(0,s.jsx)(r.td,{children:"market phase this surface is from"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"211"}),(0,s.jsx)(r.td,{children:"surfaceFitResult"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"../../../Enums/SurfaceFitResult",children:"enum : SurfaceFitResult"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"153"}),(0,s.jsx)(r.td,{children:"timestamp"}),(0,s.jsx)(r.td,{children:"DateTime"}),(0,s.jsx)(r.td,{})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"repeating-fields",children:"REPEATING FIELDS"}),"\n",(0,s.jsx)(r.p,{children:"Residual"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Field"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Comment"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"162"}),(0,s.jsx)(r.td,{children:"x"}),(0,s.jsx)(r.td,{children:"float"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"163"}),(0,s.jsx)(r.td,{children:"y"}),(0,s.jsx)(r.td,{children:"float"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'LiveExpirySurface'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=LiveExpirySurface'\n\n"})})})]}),"\n",(0,s.jsx)(r.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'LiveExpirySurface\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'uPrc|uPrcDriver|iDays|years|rate|atmVol|atmCen|atmSlope|atmSkewYY|atmVResidual|atmSDiv|basisEKey|basisTimestamp|axisFUPrc|axisVolRT|xMult|xShift|skewMult|maxResidualErr|cpAdjA|cpAdjB|cpAdjC|cpAdjRefVol|ticker|fkey|uPrcDriverKey|uPrcDriverType|ddiv|ddivPv|ddivSource|symbolRatio|exType|modelType|priceType|earnCnt|earnCntAdj|moneynessType|priceQuoteType|atmVolHist|atmCenHist|uBetaHist|eMove|eMoveHist|minXAxis|maxXAxis|synSpot|synCarry|uPrcRatio|pWidth|vWidth|cCnt|pCnt|hasBracketMin|hasMinPoint|hasXMultABFit|xMultABFitError|hasSkewMultFit|skewMultFitError|cBidMiss|cAskMiss|pBidMiss|pAskMiss|fitScore|cumFitScore|numPrintsDD|avgPrtErrDD|stdPrtErrDD|numPrintsDN|avgPrtErrDN|stdPrtErrDN|numPrintsAT|avgPrtErrAT|stdPrtErrAT|numPrintsUP|avgPrtErrUP|stdPrtErrUP|numPrintsDU|avgPrtErrDU|stdPrtErrDU|fitCounter|tradeableStatus|marketPhase|surfaceFitResult|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=LiveExpirySurface' \\\n--data-urlencode 'view=uPrc|uPrcDriver|iDays|years|rate|atmVol|atmCen|atmSlope|atmSkewYY|atmVResidual|atmSDiv|basisEKey|basisTimestamp|axisFUPrc|axisVolRT|xMult|xShift|skewMult|maxResidualErr|cpAdjA|cpAdjB|cpAdjC|cpAdjRefVol|ticker|fkey|uPrcDriverKey|uPrcDriverType|ddiv|ddivPv|ddivSource|symbolRatio|exType|modelType|priceType|earnCnt|earnCntAdj|moneynessType|priceQuoteType|atmVolHist|atmCenHist|uBetaHist|eMove|eMoveHist|minXAxis|maxXAxis|synSpot|synCarry|uPrcRatio|pWidth|vWidth|cCnt|pCnt|hasBracketMin|hasMinPoint|hasXMultABFit|xMultABFitError|hasSkewMultFit|skewMultFitError|cBidMiss|cAskMiss|pBidMiss|pAskMiss|fitScore|cumFitScore|numPrintsDD|avgPrtErrDD|stdPrtErrDD|numPrintsDN|avgPrtErrDN|stdPrtErrDN|numPrintsAT|avgPrtErrAT|stdPrtErrAT|numPrintsUP|avgPrtErrUP|stdPrtErrUP|numPrintsDU|avgPrtErrDU|stdPrtErrDU|fitCounter|tradeableStatus|marketPhase|surfaceFitResult|timestamp' \\\n--data-urlencode 'where='\n"})})})]}),"\n",(0,s.jsx)(r.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'LiveExpirySurface\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'uPrc|uPrcDriver|iDays|years|rate|atmVol|atmCen|atmSlope|atmSkewYY|atmVResidual|atmSDiv|basisEKey|basisTimestamp|axisFUPrc|axisVolRT|xMult|xShift|skewMult|maxResidualErr|cpAdjA|cpAdjB|cpAdjC|cpAdjRefVol|ticker|fkey|uPrcDriverKey|uPrcDriverType|ddiv|ddivPv|ddivSource|symbolRatio|exType|modelType|priceType|earnCnt|earnCntAdj|moneynessType|priceQuoteType|atmVolHist|atmCenHist|uBetaHist|eMove|eMoveHist|minXAxis|maxXAxis|synSpot|synCarry|uPrcRatio|pWidth|vWidth|cCnt|pCnt|hasBracketMin|hasMinPoint|hasXMultABFit|xMultABFitError|hasSkewMultFit|skewMultFitError|cBidMiss|cAskMiss|pBidMiss|pAskMiss|fitScore|cumFitScore|numPrintsDD|avgPrtErrDD|stdPrtErrDD|numPrintsDN|avgPrtErrDN|stdPrtErrDN|numPrintsAT|avgPrtErrAT|stdPrtErrAT|numPrintsUP|avgPrtErrUP|stdPrtErrUP|numPrintsDU|avgPrtErrDU|stdPrtErrDU|fitCounter|tradeableStatus|marketPhase|surfaceFitResult|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'uPrc:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=LiveExpirySurface' \\\n--data-urlencode 'view=uPrc|uPrcDriver|iDays|years|rate|atmVol|atmCen|atmSlope|atmSkewYY|atmVResidual|atmSDiv|basisEKey|basisTimestamp|axisFUPrc|axisVolRT|xMult|xShift|skewMult|maxResidualErr|cpAdjA|cpAdjB|cpAdjC|cpAdjRefVol|ticker|fkey|uPrcDriverKey|uPrcDriverType|ddiv|ddivPv|ddivSource|symbolRatio|exType|modelType|priceType|earnCnt|earnCntAdj|moneynessType|priceQuoteType|atmVolHist|atmCenHist|uBetaHist|eMove|eMoveHist|minXAxis|maxXAxis|synSpot|synCarry|uPrcRatio|pWidth|vWidth|cCnt|pCnt|hasBracketMin|hasMinPoint|hasXMultABFit|xMultABFitError|hasSkewMultFit|skewMultFitError|cBidMiss|cAskMiss|pBidMiss|pAskMiss|fitScore|cumFitScore|numPrintsDD|avgPrtErrDD|stdPrtErrDD|numPrintsDN|avgPrtErrDN|stdPrtErrDN|numPrintsAT|avgPrtErrAT|stdPrtErrAT|numPrintsUP|avgPrtErrUP|stdPrtErrUP|numPrintsDU|avgPrtErrDU|stdPrtErrDU|fitCounter|tradeableStatus|marketPhase|surfaceFitResult|timestamp' \\\n--data-urlencode 'where=' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=uPrc:ASC'\n"})})})]}),"\n",(0,s.jsx)(r.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'LiveExpirySurface\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'uPrc|uPrcDriver|iDays|years|rate|atmVol|atmCen|atmSlope|atmSkewYY|atmVResidual|atmSDiv|basisEKey|basisTimestamp|axisFUPrc|axisVolRT|xMult|xShift|skewMult|maxResidualErr|cpAdjA|cpAdjB|cpAdjC|cpAdjRefVol|ticker|fkey|uPrcDriverKey|uPrcDriverType|ddiv|ddivPv|ddivSource|symbolRatio|exType|modelType|priceType|earnCnt|earnCntAdj|moneynessType|priceQuoteType|atmVolHist|atmCenHist|uBetaHist|eMove|eMoveHist|minXAxis|maxXAxis|synSpot|synCarry|uPrcRatio|pWidth|vWidth|cCnt|pCnt|hasBracketMin|hasMinPoint|hasXMultABFit|xMultABFitError|hasSkewMultFit|skewMultFitError|cBidMiss|cAskMiss|pBidMiss|pAskMiss|fitScore|cumFitScore|numPrintsDD|avgPrtErrDD|stdPrtErrDD|numPrintsDN|avgPrtErrDN|stdPrtErrDN|numPrintsAT|avgPrtErrAT|stdPrtErrAT|numPrintsUP|avgPrtErrUP|stdPrtErrUP|numPrintsDU|avgPrtErrDU|stdPrtErrDU|fitCounter|tradeableStatus|marketPhase|surfaceFitResult|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'uPrcDriverType|ddivSource|exType|modelType|priceType|moneynessType|priceQuoteType|hasBracketMin|hasMinPoint|hasXMultABFit|hasSkewMultFit|tradeableStatus|marketPhase|surfaceFitResult\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=LiveExpirySurface' \\\n--data-urlencode 'measure=uPrc|uPrcDriver|iDays|years|rate|atmVol|atmCen|atmSlope|atmSkewYY|atmVResidual|atmSDiv|basisEKey|basisTimestamp|axisFUPrc|axisVolRT|xMult|xShift|skewMult|maxResidualErr|cpAdjA|cpAdjB|cpAdjC|cpAdjRefVol|ticker|fkey|uPrcDriverKey|uPrcDriverType|ddiv|ddivPv|ddivSource|symbolRatio|exType|modelType|priceType|earnCnt|earnCntAdj|moneynessType|priceQuoteType|atmVolHist|atmCenHist|uBetaHist|eMove|eMoveHist|minXAxis|maxXAxis|synSpot|synCarry|uPrcRatio|pWidth|vWidth|cCnt|pCnt|hasBracketMin|hasMinPoint|hasXMultABFit|xMultABFitError|hasSkewMultFit|skewMultFitError|cBidMiss|cAskMiss|pBidMiss|pAskMiss|fitScore|cumFitScore|numPrintsDD|avgPrtErrDD|stdPrtErrDD|numPrintsDN|avgPrtErrDN|stdPrtErrDN|numPrintsAT|avgPrtErrAT|stdPrtErrAT|numPrintsUP|avgPrtErrUP|stdPrtErrUP|numPrintsDU|avgPrtErrDU|stdPrtErrDU|fitCounter|tradeableStatus|marketPhase|surfaceFitResult|timestamp' \\\n--data-urlencode 'group=uPrcDriverType|ddivSource|exType|modelType|priceType|moneynessType|priceQuoteType|hasBracketMin|hasMinPoint|hasXMultABFit|hasSkewMultFit|tradeableStatus|marketPhase|surfaceFitResult' \\\n--data-urlencode 'where='\n"})})})]}),"\n",(0,s.jsx)(r.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,s.jsxs)(n.A,{children:[(0,s.jsx)(d.A,{value:"Python",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'LiveExpirySurface\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,s.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=LiveExpirySurface' \\\n--data-urlencode 'where='\n"})})})]})]})}function x(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},19365:(e,r,t)=>{t.d(r,{A:()=>d});t(96540);var s=t(34164);const i={tabItem:"tabItem_Ymn6"};var n=t(74848);function d(e){let{children:r,hidden:t,className:d}=e;return(0,n.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,d),hidden:t,children:r})}},11470:(e,r,t)=>{t.d(r,{A:()=>E});var s=t(96540),i=t(34164),n=t(23104),d=t(56347),a=t(205),l=t(57485),c=t(31682),o=t(70679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:t}=e;return(0,s.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:t,attributes:s,default:i}}=e;return{value:r,label:t,attributes:s,default:i}}))}(t);return function(e){const r=(0,c.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function x(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function j(e){let{queryString:r=!1,groupId:t}=e;const i=(0,d.W6)(),n=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,l.aZ)(n),(0,s.useCallback)((e=>{if(!n)return;const r=new URLSearchParams(i.location.search);r.set(n,e),i.replace({...i.location,search:r.toString()})}),[n,i])]}function p(e){const{defaultValue:r,queryString:t=!1,groupId:i}=e,n=u(e),[d,l]=(0,s.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!x({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:r,tabValues:n}))),[c,h]=j({queryString:t,groupId:i}),[p,m]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[i,n]=(0,o.Dv)(t);return[i,(0,s.useCallback)((e=>{t&&n.set(e)}),[t,n])]}({groupId:i}),y=(()=>{const e=c??p;return x({value:e,tabValues:n})?e:null})();(0,a.A)((()=>{y&&l(y)}),[y]);return{selectedValue:d,selectValue:(0,s.useCallback)((e=>{if(!x({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),m(e)}),[h,m,n]),tabValues:n}}var m=t(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(74848);function f(e){let{className:r,block:t,selectedValue:s,selectValue:d,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,n.a_)(),o=e=>{const r=e.currentTarget,t=l.indexOf(r),i=a[t].value;i!==s&&(c(r),d(i))},h=e=>{let r=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;r=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;r=l[t]??l[l.length-1];break}}r?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},r),children:a.map((e=>{let{value:r,label:t,attributes:n}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:s===r?0:-1,"aria-selected":s===r,ref:e=>l.push(e),onKeyDown:h,onClick:o,...n,className:(0,i.A)("tabs__item",y.tabItem,n?.className,{"tabs__item--active":s===r}),children:t??r},r)}))})}function P(e){let{lazy:r,children:t,selectedValue:i}=e;const n=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=n.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:n.map(((e,r)=>(0,s.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function g(e){const r=p(e);return(0,v.jsxs)("div",{className:(0,i.A)("tabs-container",y.tabList),children:[(0,v.jsx)(f,{...r,...e}),(0,v.jsx)(P,{...r,...e})]})}function E(e){const r=(0,m.A)();return(0,v.jsx)(g,{...e,children:h(e.children)},String(r))}},28453:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>a});var s=t(96540);const i={},n=s.createContext(i);function d(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(n.Provider,{value:r},e.children)}}}]);