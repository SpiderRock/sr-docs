"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[15815],{9378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>x,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var r=n(74848),a=n(28453),s=n(11470),i=n(19365);const l={title:"AutoHedgeControlGateway"},d="Schema: AutoHedgeControlGateway (ID: 5130)",c={id:"MessageSchemas/Schema/Topics/srse-gateway/AutoHedgeControlGateway",title:"AutoHedgeControlGateway",description:"SpdrAutoHedgeControl contains autohedge / risk group control details.  Can be uploaded from SRSE, created from ExecutionEngines, or created by SR tools.",source:"@site/versioned_docs/version-8.5.3.1/MessageSchemas/Schema/Topics/5120-srse-gateway/AutoHedgeControlGateway.md",sourceDirName:"MessageSchemas/Schema/Topics/5120-srse-gateway",slug:"/MessageSchemas/Schema/Topics/srse-gateway/AutoHedgeControlGateway",permalink:"/docs/8.5.3.1/MessageSchemas/Schema/Topics/srse-gateway/AutoHedgeControlGateway",draft:!1,unlisted:!1,tags:[],version:"8.5.3.1",frontMatter:{title:"AutoHedgeControlGateway"},sidebar:"messageSchemasSidebar",previous:{title:"5120-srse-gateway",permalink:"/docs/8.5.3.1/MessageSchemas/Schema/Topics/srse-gateway/"},next:{title:"AwayStockLocateGateway",permalink:"/docs/8.5.3.1/MessageSchemas/Schema/Topics/srse-gateway/AwayStockLocateGateway"}},o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function m(e){const t={a:"a",annotation:"annotation",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.h1,{id:"schema-autohedgecontrolgateway-id-5130",children:["Schema: AutoHedgeControlGateway ",(0,r.jsx)("span",{className:"small-text",children:"(ID: 5130)"})]}),"\n",(0,r.jsx)(t.p,{children:"SpdrAutoHedgeControl contains autohedge / risk group control details.  Can be uploaded from SRSE, created from ExecutionEngines, or created by SR tools."}),"\n",(0,r.jsx)(t.h3,{id:"metadata",children:"METADATA"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Attribute"}),(0,r.jsx)(t.th,{children:"Value"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Topic"}),(0,r.jsx)(t.td,{children:"5120-srse-gateway"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"MLink Token"}),(0,r.jsx)(t.td,{children:"Internal"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"SRSE Product"}),(0,r.jsx)(t.td,{children:"SRTrade"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note:"})," The symbol ",(0,r.jsx)(t.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"body",children:"BODY"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"#"}),(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Comment"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"10="}),(0,r.jsx)(t.td,{children:"accnt"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"11="}),(0,r.jsx)(t.td,{children:"riskGroupId"}),(0,r.jsx)(t.td,{children:"long"}),(0,r.jsx)(t.td,{children:"riskGroupId = 0 means hedgeScope = Accnt"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"12="}),(0,r.jsx)(t.td,{children:"hedgeSecKey"}),(0,r.jsx)(t.td,{children:"ExpiryKey"}),(0,r.jsx)(t.td,{children:"Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"13="}),(0,r.jsx)(t.td,{children:"hedgeSecType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,r.jsx)(t.td,{children:"Execution Hedge SecType (Stock or Future)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"14="}),(0,r.jsx)(t.td,{children:"clientFirm"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"100"}),(0,r.jsx)(t.td,{children:"altOrderId"}),(0,r.jsx)(t.td,{children:"string(24)"}),(0,r.jsx)(t.td,{children:"alternate order ID (usually clOrdId from client)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"103"}),(0,r.jsx)(t.td,{children:"altAccnt"}),(0,r.jsx)(t.td,{children:"string(32)"}),(0,r.jsx)(t.td,{children:'alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"106"}),(0,r.jsx)(t.td,{children:"altUserName"}),(0,r.jsx)(t.td,{children:"string(24)"}),(0,r.jsx)(t.td,{children:"alternate (client assigned) user name (optional) [used to map between client and SR account strings]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"109"}),(0,r.jsx)(t.td,{children:"srcRoutingCode"}),(0,r.jsx)(t.td,{children:"string(65)"}),(0,r.jsx)(t.td,{children:"inbound FIX routing code or SRSE/tool server appID (if any)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"112"}),(0,r.jsx)(t.td,{children:"accntRouteCode"}),(0,r.jsx)(t.td,{children:"text1"}),(0,r.jsx)(t.td,{children:"accntRoute acronym"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"250"}),(0,r.jsx)(t.td,{children:"externExDest"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{children:"routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"118"}),(0,r.jsx)(t.td,{children:"externParams"}),(0,r.jsx)(t.td,{children:"text1"}),(0,r.jsx)(t.td,{children:"external algo names/parameters (usually just an algo name)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"121"}),(0,r.jsx)(t.td,{children:"strategy"}),(0,r.jsx)(t.td,{children:"string(36)"}),(0,r.jsx)(t.td,{children:"client-supplied strategy string;visible on SpiderRock GUI tools and other order reports."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"124"}),(0,r.jsx)(t.td,{children:"userName"}),(0,r.jsx)(t.td,{children:"string(24)"}),(0,r.jsx)(t.td,{children:"name of the user entering the order"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"127"}),(0,r.jsx)(t.td,{children:"autoHedge"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/AutoHedge",children:"enum : AutoHedge"})}),(0,r.jsx)(t.td,{children:"auto-hedge algorithm (used for restoring tickets)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"130"}),(0,r.jsx)(t.td,{children:"hedgeTarget"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/HedgeTarget",children:"enum : HedgeTarget"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"133"}),(0,r.jsx)(t.td,{children:"minHedgeDDelta"}),(0,r.jsx)(t.td,{children:"float"}),(0,r.jsxs)(t.td,{children:["do not generate autohedge orders if total group ",(0,r.jsxs)(t.span,{className:"katex",children:[(0,r.jsx)(t.span,{className:"katex-mathml",children:(0,r.jsx)(t.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(t.semantics,{children:[(0,r.jsxs)(t.mrow,{children:[(0,r.jsx)(t.mi,{children:"D"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"l"}),(0,r.jsx)(t.mi,{children:"t"}),(0,r.jsx)(t.mi,{children:"a"}),(0,r.jsx)(t.mi,{children:"i"}),(0,r.jsx)(t.mi,{children:"s"}),(0,r.jsx)(t.mi,{children:"b"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"t"}),(0,r.jsx)(t.mi,{children:"w"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"n"}),(0,r.jsx)(t.mo,{stretchy:"false",children:"["}),(0,r.jsx)(t.mi,{children:"m"}),(0,r.jsx)(t.mi,{children:"i"}),(0,r.jsx)(t.mi,{children:"n"}),(0,r.jsx)(t.mi,{children:"H"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"d"}),(0,r.jsx)(t.mi,{children:"g"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"D"}),(0,r.jsx)(t.mi,{children:"D"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"l"}),(0,r.jsx)(t.mi,{children:"t"}),(0,r.jsx)(t.mi,{children:"a"}),(0,r.jsx)(t.mi,{children:"a"}),(0,r.jsx)(t.mi,{children:"n"}),(0,r.jsx)(t.mi,{children:"d"}),(0,r.jsx)(t.mi,{children:"m"}),(0,r.jsx)(t.mi,{children:"a"}),(0,r.jsx)(t.mi,{children:"x"}),(0,r.jsx)(t.mi,{children:"H"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"d"}),(0,r.jsx)(t.mi,{children:"g"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"D"}),(0,r.jsx)(t.mi,{children:"D"}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"l"}),(0,r.jsx)(t.mi,{children:"t"}),(0,r.jsx)(t.mi,{children:"a"}),(0,r.jsx)(t.mo,{stretchy:"false",children:"]"}),(0,r.jsx)(t.mo,{stretchy:"false",children:"("}),(0,r.jsx)(t.mi,{children:"e"}),(0,r.jsx)(t.mi,{children:"g"}),(0,r.jsx)(t.mi,{mathvariant:"normal",children:"."}),(0,r.jsx)(t.mo,{stretchy:"false",children:"["}),(0,r.jsx)(t.mo,{children:"\u2212"})]}),(0,r.jsx)(t.annotation,{encoding:"application/x-tex",children:"Delta is between [minHedgeDDelta and maxHedgeDDelta] (eg.[-"})]})})}),(0,r.jsx)(t.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(t.span,{className:"base",children:[(0,r.jsx)(t.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"De"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"lt"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"ai"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"s"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"b"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"e"}),(0,r.jsx)(t.span,{className:"mord mathnormal",style:{marginRight:"0.02691em"},children:"tw"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"ee"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(t.span,{className:"mopen",children:"["}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"min"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"He"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"d"}),(0,r.jsx)(t.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"eDDe"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"lt"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"aan"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"d"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"ma"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"x"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"He"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"d"}),(0,r.jsx)(t.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"eDDe"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"lt"}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"a"}),(0,r.jsx)(t.span,{className:"mclose",children:"]"}),(0,r.jsx)(t.span,{className:"mopen",children:"("}),(0,r.jsx)(t.span,{className:"mord mathnormal",children:"e"}),(0,r.jsx)(t.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,r.jsx)(t.span,{className:"mord",children:"."}),(0,r.jsx)(t.span,{className:"mopen",children:"["}),(0,r.jsx)(t.span,{className:"mord",children:"\u2212"})]})})]}),"100,000, +$100,000])"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"136"}),(0,r.jsx)(t.td,{children:"maxHedgeDDelta"}),(0,r.jsx)(t.td,{children:"float"}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"139"}),(0,r.jsx)(t.td,{children:"orderSize"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{children:"initial (and maximum) size of a hedge parent buy or sell order.  note: actual working size will be controlled by the autohedge server based on filled deltas but working size cannot exceed orderSize"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"142"}),(0,r.jsx)(t.td,{children:"ssaleFlag"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"145"}),(0,r.jsx)(t.td,{children:"maxExposureSize"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{children:"maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"148"}),(0,r.jsx)(t.td,{children:"numMakeExchanges"}),(0,r.jsx)(t.td,{children:"byte"}),(0,r.jsx)(t.td,{children:"number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"151"}),(0,r.jsx)(t.td,{children:"publicSize"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/PublicSizeHandling",children:"enum : PublicSizeHandling"})}),(0,r.jsx)(t.td,{children:"public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"154"}),(0,r.jsx)(t.td,{children:"canOverlapCxlRepl"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,r.jsx)(t.td,{children:"can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"157"}),(0,r.jsx)(t.td,{children:"progressRule"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/ProgressRule",children:"enum : ProgressRule"})}),(0,r.jsx)(t.td,{children:"Immediate = all size immediately available; TWAP = size released in time intervals;VWAP = size released in volume intervals;TwapForce = size released in intervals/execution forced at the end of interval"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"160"}),(0,r.jsx)(t.td,{children:"progressSliceCnt"}),(0,r.jsx)(t.td,{children:"byte"}),(0,r.jsx)(t.td,{children:"number of twap slices to use (default = 4 or 8) [max 20]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"163"}),(0,r.jsx)(t.td,{children:"progressExposeTime"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{children:"minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"166"}),(0,r.jsx)(t.td,{children:"vwapParticipation"}),(0,r.jsx)(t.td,{children:"float"}),(0,r.jsx)(t.td,{children:"target vwap participation rate (target % of trade activity)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"169"}),(0,r.jsx)(t.td,{children:"minMktOnClosePct"}),(0,r.jsx)(t.td,{children:"byte"}),(0,r.jsx)(t.td,{children:"Minimum pct [0 - 100] of order reserved for the on-close auction"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"172"}),(0,r.jsx)(t.td,{children:"maxMakeExchFee"}),(0,r.jsx)(t.td,{children:"float"}),(0,r.jsx)(t.td,{children:"maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"175"}),(0,r.jsx)(t.td,{children:"maxTakeExchFee"}),(0,r.jsx)(t.td,{children:"float"}),(0,r.jsx)(t.td,{children:"maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"178"}),(0,r.jsx)(t.td,{children:"incTakeExchFee"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/IncExchFee",children:"enum : IncExchFee"})}),(0,r.jsx)(t.td,{children:"include exchange fee in probability"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"181"}),(0,r.jsx)(t.td,{children:"incMakeExchFee"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/IncExchFee",children:"enum : IncExchFee"})}),(0,r.jsx)(t.td,{children:"include exchange fee in probability"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"184"}),(0,r.jsx)(t.td,{children:"makeExchRule"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/MakeExchRule",children:"enum : MakeExchRule"})}),(0,r.jsx)(t.td,{children:"ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"187"}),(0,r.jsx)(t.td,{children:"maxChildOrders"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{children:"maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"190"}),(0,r.jsx)(t.td,{children:"exchMask"}),(0,r.jsx)(t.td,{children:"uint"}),(0,r.jsx)(t.td,{children:"eligible exchanges (0 = all)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"248"}),(0,r.jsx)(t.td,{children:"marketSession"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/MarketSession",children:"enum : MarketSession"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"196"}),(0,r.jsx)(t.td,{children:"startDttm"}),(0,r.jsx)(t.td,{children:"DateTime"}),(0,r.jsx)(t.td,{children:"[optional] (parent order start time)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"199"}),(0,r.jsx)(t.td,{children:"orderDuration"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{children:"[optional] (number of seconds)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"249"}),(0,r.jsx)(t.td,{children:"activeDuration"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"202"}),(0,r.jsx)(t.td,{children:"goodTillDttm"}),(0,r.jsx)(t.td,{children:"DateTime"}),(0,r.jsx)(t.td,{children:"[optional] (default: 2099-01-01)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"205"}),(0,r.jsx)(t.td,{children:"parentOrderHandling"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/ParentOrderHandling",children:"enum : ParentOrderHandling"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"208"}),(0,r.jsx)(t.td,{children:"parentBalanceHandling"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/ParentBalanceHandling",children:"enum : ParentBalanceHandling"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"211"}),(0,r.jsx)(t.td,{children:"orderLimitType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SpdrLimitType",children:"enum : SpdrLimitType"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"214"}),(0,r.jsx)(t.td,{children:"takeLimitClass"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,r.jsx)(t.td,{children:"Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"217"}),(0,r.jsx)(t.td,{children:"makeLimitClass"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,r.jsx)(t.td,{children:"Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"220"}),(0,r.jsx)(t.td,{children:"orderPrcLimit"}),(0,r.jsx)(t.td,{children:"double"}),(0,r.jsx)(t.td,{children:"Applies if LimitType = Prc[]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"223"}),(0,r.jsx)(t.td,{children:"orderPrcOffset"}),(0,r.jsx)(t.td,{children:"double"}),(0,r.jsx)(t.td,{children:"default=0"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"226"}),(0,r.jsx)(t.td,{children:"stateModel"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/StateModel",children:"enum : StateModel"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"229"}),(0,r.jsx)(t.td,{children:"takeAlphaType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,r.jsx)(t.td,{children:"Applies if takeLimitClass = Probability"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"232"}),(0,r.jsx)(t.td,{children:"makeAlphaType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,r.jsx)(t.td,{children:"Applies if makeLimitClass = Probability"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"235"}),(0,r.jsx)(t.td,{children:"takeAlphaFactor"}),(0,r.jsx)(t.td,{children:"float"}),(0,r.jsx)(t.td,{children:"[-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"238"}),(0,r.jsx)(t.td,{children:"makeAlphaFactor"}),(0,r.jsx)(t.td,{children:"float"}),(0,r.jsx)(t.td,{children:"[-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"241"}),(0,r.jsx)(t.td,{children:"takeProbability"}),(0,r.jsx)(t.td,{children:"float"}),(0,r.jsx)(t.td,{children:"takeProbLimit = takeProbability [if AlphaType = Static]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"244"}),(0,r.jsx)(t.td,{children:"makeProbability"}),(0,r.jsx)(t.td,{children:"float"}),(0,r.jsx)(t.td,{children:"makeProbLimit = makeProbability [if AlphaType = Static]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"247"}),(0,r.jsx)(t.td,{children:"timestamp"}),(0,r.jsx)(t.td,{children:"DateTime"}),(0,r.jsx)(t.td,{children:"record timestamp"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'AutoHedgeControlGateway'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n#Required Parameters\n\"apiKey\": API_KEY,\n\"cmd\": 'getschema',\n\"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,r.jsx)(i.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=AutoHedgeControlGateway'\n\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'AutoHedgeControlGateway\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'altOrderId|altAccnt|altUserName|srcRoutingCode|accntRouteCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(i.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=AutoHedgeControlGateway' \\\n--data-urlencode 'view=altOrderId|altAccnt|altUserName|srcRoutingCode|accntRouteCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'AutoHedgeControlGateway\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'altOrderId|altAccnt|altUserName|srcRoutingCode|accntRouteCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'altOrderId:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(i.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=AutoHedgeControlGateway' \\\n--data-urlencode 'view=altOrderId|altAccnt|altUserName|srcRoutingCode|accntRouteCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=altOrderId:ASC'\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'AutoHedgeControlGateway\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'altOrderId|altAccnt|altUserName|srcRoutingCode|accntRouteCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'autoHedge|hedgeTarget|ssaleFlag|publicSize|canOverlapCxlRepl|progressRule|incTakeExchFee|incMakeExchFee|makeExchRule|marketSession|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|stateModel|takeAlphaType|makeAlphaType\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getaggregate\',\n"msgType": MSG_TYPE,\n"measure": MEASURE,\n"group": GROUP,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(i.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=AutoHedgeControlGateway' \\\n--data-urlencode 'measure=altOrderId|altAccnt|altUserName|srcRoutingCode|accntRouteCode|externExDest|externParams|strategy|userName|autoHedge|hedgeTarget|minHedgeDDelta|maxHedgeDDelta|orderSize|ssaleFlag|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|orderPrcLimit|orderPrcOffset|stateModel|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|timestamp' \\\n--data-urlencode 'group=autoHedge|hedgeTarget|ssaleFlag|publicSize|canOverlapCxlRepl|progressRule|incTakeExchFee|incMakeExchFee|makeExchRule|marketSession|parentOrderHandling|parentBalanceHandling|orderLimitType|takeLimitClass|makeLimitClass|stateModel|takeAlphaType|makeAlphaType' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'AutoHedgeControlGateway\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(i.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=AutoHedgeControlGateway' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function x(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>i});n(96540);var r=n(34164);const a={tabItem:"tabItem_Ymn6"};var s=n(74848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,i),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>E});var r=n(96540),a=n(34164),s=n(23104),i=n(56347),l=n(205),d=n(57485),c=n(31682),o=n(70679);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function x(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function u(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,d.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function p(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=m(e),[i,d]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!x({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[c,h]=u({queryString:n,groupId:a}),[p,j]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,o.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),g=(()=>{const e=c??p;return x({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{g&&d(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!x({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);d(e),h(e),j(e)}),[h,j,s]),tabValues:s}}var j=n(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=n(74848);function b(e){let{className:t,block:n,selectedValue:r,selectValue:i,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),o=e=>{const t=e.currentTarget,n=d.indexOf(t),a=l[n].value;a!==r&&(c(t),i(a))},h=e=>{let t=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>d.push(e),onKeyDown:h,onClick:o,...s,className:(0,a.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function f(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function k(e){const t=p(e);return(0,y.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,y.jsx)(b,{...t,...e}),(0,y.jsx)(f,{...t,...e})]})}function E(e){const t=(0,j.A)();return(0,y.jsx)(k,{...e,children:h(e.children)},String(t))}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var r=n(96540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);