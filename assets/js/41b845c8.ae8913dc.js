"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["98581"],{11848:function(e,t,r){r.r(t),r.d(t,{default:()=>c,frontMatter:()=>s,metadata:()=>o,assets:()=>a,toc:()=>d,contentTitle:()=>l});var o=JSON.parse('{"id":"Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms/HedgingAlgos","title":"Hedging Algos","description":"SpiderRock Connect offers two main option hedging styles at the order and portfolio levels:","source":"@site/versioned_docs/version-8.5.3.3/Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms/2.HedgingAlgos.md","sourceDirName":"Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms","slug":"/Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms/HedgingAlgos","permalink":"/docs/8.5.3.3/Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms/HedgingAlgos","draft":false,"unlisted":false,"tags":[],"version":"8.5.3.3","sidebarPosition":2,"frontMatter":{"title":"Hedging Algos"},"sidebar":"documentationSidebar","previous":{"title":"Option Algos","permalink":"/docs/8.5.3.3/Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms/OptionAlgos"},"next":{"title":"Progression Algos","permalink":"/docs/8.5.3.3/Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms/ProgressionAlgos"}}'),i=r("52676"),n=r("91503");let s={title:"Hedging Algos"},l=void 0,a={},d=[{value:"Auto-Hedging Mechanics",id:"auto-hedging-mechanics",level:2},{value:"Auto-Hedging Algos",id:"auto-hedging-algos",level:2},{value:"SOR Algos",id:"sor-algos",level:3},{value:"SMART Algos",id:"smart-algos",level:3},{value:"Alpha TWAP Algos",id:"alpha-twap-algos",level:3},{value:"Hedge Tool Mechanics",id:"hedge-tool-mechanics",level:2},{value:"Hedge Tool Algos",id:"hedge-tool-algos",level:2},{value:"SOR Algos",id:"sor-algos-1",level:3},{value:"Alpha Algos",id:"alpha-algos",level:3}];function h(e){let t={a:"a",h2:"h2",h3:"h3",p:"p",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"SpiderRock Connect offers two main option hedging styles at the order and portfolio levels:"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Individual option parent orders or orders grouped under the same RiskGroupID can be submitted with instructions to auto-hedge resulting fills."}),(0,i.jsxs)("li",{children:["Hedging waves can be generated from the ",(0,i.jsx)("a",{href:"https://spiderrockplatform.atlassian.net/wiki/spaces/CD/pages/14090260/Hedge+Tool+HT",children:"Hedge Tool (HT)"})," during trading hours that target either option trades done during the day, option positions carried overnight, or a combination of the two. Hedging waves typically run independently (either alongside or instead of) auto-hedge instructions attached to individual option parent orders."]}),(0,i.jsx)("li",{children:"While all marketable auto-hedge orders are expected to fill, SpiderRock Connect does not guarantee the completion of all auto-hedges and performs them on a best efforts basis."})]}),"\n",(0,i.jsx)(t.p,{children:"This document provides an overview of the underlier Algos used to auto-hedge option fills and the underlier Algos used in the context of the Hedge Tool."}),"\n",(0,i.jsx)(t.h2,{id:"auto-hedging-mechanics",children:"Auto-Hedging Mechanics"}),"\n",(0,i.jsx)(t.p,{children:"In order to facilitate auto-hedging, SpiderRock Connect's execution engines maintain a Net Delta Counter for each unique combination of SRAccount + Underlier + RiskGroupID handled during a trading period. Each time a fill occurs (either underlier or option), the appropriate Net Delta Counter updates."}),"\n",(0,i.jsx)(t.p,{children:"If an option fill occurs and the parent order for the option has an Auto-hedge Algo selected, a parent order for the corresponding underlier will automatically be created or updated with an open quantity and side that would bring the Net Delta Counter back to zero when the underlier order completes."}),"\n",(0,i.jsx)(t.p,{children:"If multiple option orders have the same [RiskGroupID and SRAccount] they will share a common Net Delta Counter for each underlier and will be hedged as a group."}),"\n",(0,i.jsx)(t.p,{children:"For example, suppose an order to buy calls and another order to buy puts (both in the same underlier, RiskGroupIDSRAccount) are submitted at the same time. If the call order fills the Net Delta Counter will be set to the number of deltas filled (a positive number) and an order to sell an equivalent number of underlying deltas will be created. If the put order fills prior to the underlier order, the Net Delta Counter will be reduced by the number of put deltas filled (a negative number) which will reduce (perhaps to zero) the size of the underlier delta sell order. If the Net Delta Counter was to become negative after the put deltas filled (either because more put deltas filled than call deltas or because some call deltas had already been hedged), then the order to sell underlying deltas would be reduced to zero. A new order to buy underlying deltas would be created with a size necessary to bring the Net Delta Counter back to zero."}),"\n",(0,i.jsx)(t.p,{children:"The delta associated with each fill is fixed at the time of the fill and will not change or drift as the underlying price moves. The delta assigned to each order is the delta computed by SpiderRock Connect at the time of fill. This will usually be an implied delta from the option fill price and the underlier at the time of fill."}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)("b",{children:"Important Note:"})," Any Net Delta Counter with a positive or negative value of 100 shares or more will be hedged. Values of less than 100 shares will only be hedged if the resulting dollar delta (Net Delta Counter x stock price) is $5,000 or larger."]})}),"\n",(0,i.jsx)(t.h2,{id:"auto-hedging-algos",children:"Auto-Hedging Algos"}),"\n",(0,i.jsx)(t.p,{children:"SpiderRock Connect offers a number of underlier Algos to Auto-hedge option fills. The following algos are available by default to all clients."}),"\n",(0,i.jsx)(t.h3,{id:"sor-algos",children:"SOR Algos"}),"\n",(0,i.jsx)(t.p,{children:"SOR Algos are limit orders that post liquidity or remove liquidity when marketable based on the most advantageous exchange fee to the client. Orders are not guaranteed to fill."}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"FAST.CRX:"})," Sends a dynamic hedge with a price that crosses the market one tick through (if miss, another IOC order is sent immediately)"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"AUTO.CRX:"})," Sends a dynamic hedge with a price that crosses the market one tick through (order resets every 1 second)"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"AUTO.MID:"})," Sends a dynamic hedge at mid-market (order resets every 20 seconds)"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"AUTO.TRN:"})," Sends a dynamic hedge that turns the market by 1 price increment (order resets every 40 seconds)"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"STATIC:"})," Send a static hedge at mid-market (order does not reset)"]})]}),"\n",(0,i.jsx)(t.h3,{id:"smart-algos",children:"SMART Algos"}),"\n",(0,i.jsx)(t.p,{children:"SMART Algos are designed to induce a cross to our desired level and will dynamically \u201Cchase\u201D away prints. The posting behavior will increase aggressiveness with each missed print (50%, or 90%through the current bid/ask spread). Orders are not guaranteed to fill."}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SM.NORM:"})," Sends a dynamic hedge at mid-market and keeps improving the market if there are away prints occurring at price points that are more aggressive"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SM.FAST:"})," Sends a dynamic hedge 75% through the market width and keeps improving the market if there are away prints occurring at price points that are more aggressive"]})]}),"\n",(0,i.jsx)(t.h3,{id:"alpha-twap-algos",children:"Alpha TWAP Algos"}),"\n",(0,i.jsx)(t.p,{children:"Alpha TWAP Algos will break order execution up into several segments (usually 4 to 10 over the duration of the order) and will execute each segment by both posting in exchange order books and taking available liquidity, using SpiderRock market micro-dynamic models. Orders are guaranteed to fill by the end of the time duration."}),"\n",(0,i.jsx)(t.p,{children:"More hedging time can result in better expected short-term P&L performance but carries a somewhat higher risk of adverse underlier price moves."}),"\n",(0,i.jsx)(t.p,{children:"Execution segments will generally be spaced equally in time over the supplied duration of the order and will cycle through passive to more aggressive modes. More specifically, each segment will start at a 50% probability, ramp down to the relative probability level, which is the average trailing 10-minute probability, and further ramp down to force a fill by crossing the market at the end of each segment."}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SR.AUTO:"}),"Alpha TWAP logic, will choose the appropriate TWAP (10 seconds, 30 seconds or 90 seconds) based on the liquidity of the underlier and time remaining in the day."]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SR-10S:"}),"Alpha TWAP logic, works for 10 seconds \u2013 number of TWAP slices depends on order size"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SR-30S:"}),"Alpha TWAP logic, works for 30 seconds \u2013 number of TWAP slices depends on order size"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SR-90S:"}),"Alpha TWAP logic, works for 90 seconds \u2013 number of TWAP slices depends on order size"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SR-5M:"}),"Alpha TWAP logic, works for 5 minutes \u2013 number of TWAP slices depends on order size"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SR-30M"}),"Alpha TWAP logic, works for 30 minutes \u2013 number of TWAP slices depends on order size"]})]}),"\n",(0,i.jsx)(t.h2,{id:"hedge-tool-mechanics",children:"Hedge Tool Mechanics"}),"\n",(0,i.jsxs)(t.p,{children:["The Hedge Tool allows users to compose delta-hedging baskets for any equity, options, and futures portfolio. Users can set target hedge bands expressed in $ delta or $ beta using natural or proxy hedge symbols which allow them to create a risk tolerance for the portfolio. Users can hedge the portfolio all at once or set baskets of orders, sent in automated waves, that can hedge the trade deltas or the positions over time. For more information, please consult the ",(0,i.jsx)(t.a,{href:"https://spiderrockplatform.atlassian.net/wiki/spaces/CD/pages/14090260/Hedge+Tool+HT",children:"Hedge Tool Concept Guide"})," or ",(0,i.jsx)(t.a,{href:"/docs/next/ContactUs/",children:"contact our support desk."})]}),"\n",(0,i.jsx)(t.h2,{id:"hedge-tool-algos",children:"Hedge Tool Algos"}),"\n",(0,i.jsx)(t.p,{children:"SpiderRock Connect offers a number of underlier Algos from the Hedge Tool. The following Algos are available by default to all clients."}),"\n",(0,i.jsx)(t.h3,{id:"sor-algos-1",children:"SOR Algos"}),"\n",(0,i.jsx)(t.p,{children:"SOR Algos are limit orders that post liquidity or remove liquidity when marketable in exchange fee order. Besides SR.TWAP (guaranteed fills), orders are not guaranteed to fill."}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"AUTO.CRX:"})," Send a dynamic hedge with a price that crosses the market one tick through (order resets every 1 second)"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"AUTO.MID:"})," Send a dynamic hedge at mid-market (order resets every 20 seconds)"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"AUTO.TRN:"})," Send a dynamic hedge that turns market by 1 price increment (order resets every 40 seconds)"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SR.TWAP:"})," This order type will break order execution up into several segments (usually 4 to 10 over the duration of the order) and will execute each segment by crossing the market. Execution segments will generally be spaced equally in time over the supplied duration of the order."]})]}),"\n",(0,i.jsx)(t.h3,{id:"alpha-algos",children:"Alpha Algos"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"SR.AUTO:"})," Alpha TWAP logic, will choose the appropriate TWAP (10 seconds, 30 seconds or 90 seconds) based on the liquidity of the underlier and time remaining in the day."]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"EAGLE:"})," Passive logic - Only removes liquidity when an alpha probability of 50% or higher is achieved"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"EAGLE.PRO:"})," Passive logic - Posts and removes liquidity at an alpha probability level of 50% make / 50% take"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"HAWK:"})," Passive to moderate logic - Only removes liquidity when an alpha probability of 35% or higher is achieved"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"HAWK.PRO:"})," Passive to moderate logic - Posts and removes liquidity at alpha probability levels of 45% make / 35% take"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"FALCON:"})," Moderate logic - Only removes liquidity when an alpha probability of 15% or higher is achieved"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"FALCON.PRO:"})," Moderate logic - Posts and removes liquidity at an alpha probability level of 40% make / 15% take"]})]})]})}function c(e={}){let{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},91503:function(e,t,r){r.d(t,{Z:function(){return l},a:function(){return s}});var o=r(75271);let i={},n=o.createContext(i);function s(e){let t=o.useContext(n);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(n.Provider,{value:t},e.children)}}}]);