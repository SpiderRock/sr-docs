"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["87370"],{3500:function(e,s,n){n.r(s),n.d(s,{default:()=>p,frontMatter:()=>l,metadata:()=>i,assets:()=>o,toc:()=>h,contentTitle:()=>c});var i=JSON.parse('{"id":"MessageSchemas/Schema/Topics/market-data-spreads/SpreadBookQuote","title":"SpreadBookQuote","description":"This table contains live spread quote records from the individual equity option exchanges.  Each record contains up to two price levels and represents a live snapshot of the book for a specific spread.","source":"@site/docs/MessageSchemas/Schema/Topics/2895-market-data-spreads/SpreadBookQuote.md","sourceDirName":"MessageSchemas/Schema/Topics/2895-market-data-spreads","slug":"/MessageSchemas/Schema/Topics/market-data-spreads/SpreadBookQuote","permalink":"/docs/next/MessageSchemas/Schema/Topics/market-data-spreads/SpreadBookQuote","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SpreadBookQuote"},"sidebar":"messageSchemasSidebar","previous":{"title":"SpreadBookMarkup","permalink":"/docs/next/MessageSchemas/Schema/Topics/market-data-spreads/SpreadBookMarkup"},"next":{"title":"SpreadExchOrder","permalink":"/docs/next/MessageSchemas/Schema/Topics/market-data-spreads/SpreadExchOrder"}}'),r=n("52676"),t=n("91503"),a=n("71386"),d=n("9641");let l={title:"SpreadBookQuote"},c="Schema: SpreadBookQuote (ID: 2900)",o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){let s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsxs)(s.h1,{id:"schema-spreadbookquote-id-2900",children:["Schema: SpreadBookQuote ",(0,r.jsx)("span",{className:"small-text",children:"(ID: 2900)"})]})}),"\n",(0,r.jsx)(s.p,{children:"This table contains live spread quote records from the individual equity option exchanges.  Each record contains up to two price levels and represents a live snapshot of the book for a specific spread."}),"\n",(0,r.jsx)(s.h3,{id:"metadata",children:"METADATA"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Attribute"}),(0,r.jsx)(s.th,{children:"Value"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Topic"}),(0,r.jsx)(s.td,{children:"2895-market-data-spreads"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MLink Token"}),(0,r.jsx)(s.td,{children:"SpreadMktData"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"SRSE Product"}),(0,r.jsx)(s.td,{children:"SRSpread"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note:"})," The symbol ",(0,r.jsx)(s.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"body",children:"BODY"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"#"}),(0,r.jsx)(s.th,{children:"Field"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Comment"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"10="}),(0,r.jsx)(s.td,{children:"skey"}),(0,r.jsx)(s.td,{children:"TickerKey"}),(0,r.jsx)(s.td,{children:"SR Spread Key (should have corresponding ProductDefinition record)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"11="}),(0,r.jsx)(s.td,{children:"isTest"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,r.jsx)(s.td,{children:"Yes indicates that response is made of entirely of isTest=Yes SpreadExchOrders"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"100"}),(0,r.jsx)(s.td,{children:"ticker"}),(0,r.jsx)(s.td,{children:"TickerKey"}),(0,r.jsx)(s.td,{children:"common spread underlier"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"167"}),(0,r.jsx)(s.td,{children:"SRspreadID"}),(0,r.jsx)(s.td,{children:"long"}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"103"}),(0,r.jsx)(s.td,{children:"bidPrice1"}),(0,r.jsx)(s.td,{children:"double"}),(0,r.jsx)(s.td,{children:"bid price"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"106"}),(0,r.jsx)(s.td,{children:"isBidPrice1Valid"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"109"}),(0,r.jsx)(s.td,{children:"askPrice1"}),(0,r.jsx)(s.td,{children:"double"}),(0,r.jsx)(s.td,{children:"ask price"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"112"}),(0,r.jsx)(s.td,{children:"isAskPrice1Valid"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"115"}),(0,r.jsx)(s.td,{children:"bidSize1"}),(0,r.jsx)(s.td,{children:"int"}),(0,r.jsx)(s.td,{children:"cumulative size at bidPrice"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"118"}),(0,r.jsx)(s.td,{children:"askSize1"}),(0,r.jsx)(s.td,{children:"int"}),(0,r.jsx)(s.td,{children:"cumulative size at askPrice"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"121"}),(0,r.jsx)(s.td,{children:"bidPrice2"}),(0,r.jsx)(s.td,{children:"double"}),(0,r.jsx)(s.td,{children:"2nd best bid price"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"124"}),(0,r.jsx)(s.td,{children:"isBidPrice2Valid"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"127"}),(0,r.jsx)(s.td,{children:"askPrice2"}),(0,r.jsx)(s.td,{children:"double"}),(0,r.jsx)(s.td,{children:"2nd best ask price"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"130"}),(0,r.jsx)(s.td,{children:"isAskPrice2Valid"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"133"}),(0,r.jsx)(s.td,{children:"bidSize2"}),(0,r.jsx)(s.td,{children:"int"}),(0,r.jsx)(s.td,{children:"cumulative size at 2nd price"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"136"}),(0,r.jsx)(s.td,{children:"askSize2"}),(0,r.jsx)(s.td,{children:"int"}),(0,r.jsx)(s.td,{children:"cumulative size at 2nd price"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"139"}),(0,r.jsx)(s.td,{children:"bidExch1"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"../../../Enums/OptExch",children:"enum : OptExch"})}),(0,r.jsx)(s.td,{children:"exchange at bid price with the largest size (if any)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"142"}),(0,r.jsx)(s.td,{children:"askExch1"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"../../../Enums/OptExch",children:"enum : OptExch"})}),(0,r.jsx)(s.td,{children:"exchange at ask price with the largest size (if any)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"145"}),(0,r.jsx)(s.td,{children:"bidMask1"}),(0,r.jsx)(s.td,{children:"uint"}),(0,r.jsx)(s.td,{children:"exchange bid bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"148"}),(0,r.jsx)(s.td,{children:"askMask1"}),(0,r.jsx)(s.td,{children:"uint"}),(0,r.jsx)(s.td,{children:"exchange ask bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"151"}),(0,r.jsx)(s.td,{children:"bidTime"}),(0,r.jsx)(s.td,{children:"DateTime"}),(0,r.jsx)(s.td,{children:"last bid price or size change"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"154"}),(0,r.jsx)(s.td,{children:"askTime"}),(0,r.jsx)(s.td,{children:"DateTime"}),(0,r.jsx)(s.td,{children:"last ask price or size change"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"168"}),(0,r.jsx)(s.td,{children:"printVolume"}),(0,r.jsx)(s.td,{children:"int"}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"157"}),(0,r.jsx)(s.td,{children:"updateType"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"../../../Enums/UpdateType",children:"enum : UpdateType"})}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"160"}),(0,r.jsx)(s.td,{children:"srcTimestamp"}),(0,r.jsx)(s.td,{children:"long"}),(0,r.jsx)(s.td,{children:"source high precision timestamp (if available)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"163"}),(0,r.jsx)(s.td,{children:"netTimestamp"}),(0,r.jsx)(s.td,{children:"long"}),(0,r.jsx)(s.td,{children:"inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"166"}),(0,r.jsx)(s.td,{children:"timestamp"}),(0,r.jsx)(s.td,{children:"DateTime"}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,r.jsxs)(a.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpreadBookQuote'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpreadBookQuote'\n\n"})})})]}),"\n",(0,r.jsx)(s.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,r.jsxs)(a.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpreadBookQuote\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'ticker|SRspreadID|bidPrice1|isBidPrice1Valid|askPrice1|isAskPrice1Valid|bidSize1|askSize1|bidPrice2|isBidPrice2Valid|askPrice2|isAskPrice2Valid|bidSize2|askSize2|bidExch1|askExch1|bidMask1|askMask1|bidTime|askTime|printVolume|updateType|srcTimestamp|netTimestamp|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpreadBookQuote' \\\n--data-urlencode 'view=ticker|SRspreadID|bidPrice1|isBidPrice1Valid|askPrice1|isAskPrice1Valid|bidSize1|askSize1|bidPrice2|isBidPrice2Valid|askPrice2|isAskPrice2Valid|bidSize2|askSize2|bidExch1|askExch1|bidMask1|askMask1|bidTime|askTime|printVolume|updateType|srcTimestamp|netTimestamp|timestamp' \\\n--data-urlencode 'where='\n"})})})]}),"\n",(0,r.jsx)(s.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,r.jsxs)(a.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpreadBookQuote\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'ticker|SRspreadID|bidPrice1|isBidPrice1Valid|askPrice1|isAskPrice1Valid|bidSize1|askSize1|bidPrice2|isBidPrice2Valid|askPrice2|isAskPrice2Valid|bidSize2|askSize2|bidExch1|askExch1|bidMask1|askMask1|bidTime|askTime|printVolume|updateType|srcTimestamp|netTimestamp|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'ticker:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpreadBookQuote' \\\n--data-urlencode 'view=ticker|SRspreadID|bidPrice1|isBidPrice1Valid|askPrice1|isAskPrice1Valid|bidSize1|askSize1|bidPrice2|isBidPrice2Valid|askPrice2|isAskPrice2Valid|bidSize2|askSize2|bidExch1|askExch1|bidMask1|askMask1|bidTime|askTime|printVolume|updateType|srcTimestamp|netTimestamp|timestamp' \\\n--data-urlencode 'where=' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=ticker:ASC'\n"})})})]}),"\n",(0,r.jsx)(s.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,r.jsxs)(a.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpreadBookQuote\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'ticker|SRspreadID|bidPrice1|isBidPrice1Valid|askPrice1|isAskPrice1Valid|bidSize1|askSize1|bidPrice2|isBidPrice2Valid|askPrice2|isAskPrice2Valid|bidSize2|askSize2|bidExch1|askExch1|bidMask1|askMask1|bidTime|askTime|printVolume|updateType|srcTimestamp|netTimestamp|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'isBidPrice1Valid|isAskPrice1Valid|isBidPrice2Valid|isAskPrice2Valid|bidExch1|askExch1|updateType\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpreadBookQuote' \\\n--data-urlencode 'measure=ticker|SRspreadID|bidPrice1|isBidPrice1Valid|askPrice1|isAskPrice1Valid|bidSize1|askSize1|bidPrice2|isBidPrice2Valid|askPrice2|isAskPrice2Valid|bidSize2|askSize2|bidExch1|askExch1|bidMask1|askMask1|bidTime|askTime|printVolume|updateType|srcTimestamp|netTimestamp|timestamp' \\\n--data-urlencode 'group=isBidPrice1Valid|isAskPrice1Valid|isBidPrice2Valid|isAskPrice2Valid|bidExch1|askExch1|updateType' \\\n--data-urlencode 'where='\n"})})})]}),"\n",(0,r.jsx)(s.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,r.jsxs)(a.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpreadBookQuote\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpreadBookQuote' \\\n--data-urlencode 'where='\n"})})})]})]})}function p(e={}){let{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},9641:function(e,s,n){n.d(s,{Z:()=>t});var i=n("52676");n("75271");var r=n("54461");function t(e){let{children:s,hidden:n,className:t}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)("tabItem_SSzl",t),hidden:n,children:s})}},71386:function(e,s,n){n.d(s,{Z:()=>k});var i=n("52676"),r=n("75271"),t=n("54461"),a=n("52289"),d=n("3225"),l=n("42834"),c=n("40578"),o=n("35834"),h=n("79616");function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||r.isValidElement(e)&&function(e){let{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){let{value:s,tabValues:n}=e;return n.some(e=>e.value===s)}var m=n("44537");function x(e){let{className:s,block:n,selectedValue:r,selectValue:d,tabValues:l}=e,c=[],{blockElementScrollPositionUntilNextRender:o}=(0,a.o5)(),h=e=>{let s=e.currentTarget,n=l[c.indexOf(s)].value;n!==r&&(o(s),d(n))},u=e=>{let s=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let n=c.indexOf(e.currentTarget)+1;s=c[n]??c[0];break}case"ArrowLeft":{let n=c.indexOf(e.currentTarget)-1;s=c[n]??c[c.length-1]}}s?.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.Z)("tabs",{"tabs--block":n},s),children:l.map(e=>{let{value:s,label:n,attributes:a}=e;return(0,i.jsx)("li",{role:"tab",tabIndex:r===s?0:-1,"aria-selected":r===s,ref:e=>c.push(e),onKeyDown:u,onClick:h,...a,className:(0,t.Z)("tabs__item","tabItem_aitt",a?.className,{"tabs__item--active":r===s}),children:n??s},s)})})}function j(e){let{lazy:s,children:n,selectedValue:a}=e,d=(Array.isArray(n)?n:[n]).filter(Boolean);if(s){let e=d.find(e=>e.props.value===a);return e?(0,r.cloneElement)(e,{className:(0,t.Z)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:d.map((e,s)=>(0,r.cloneElement)(e,{key:s,hidden:e.props.value!==a}))})}function g(e){let s=function(e){let{defaultValue:s,queryString:n=!1,groupId:i}=e,t=function(e){let{values:s,children:n}=e;return(0,r.useMemo)(()=>{let e=s??u(n).map(e=>{let{props:{value:s,label:n,attributes:i,default:r}}=e;return{value:s,label:n,attributes:i,default:r}});return!function(e){let s=(0,o.lx)(e,(e,s)=>e.value===s.value);if(s.length>0)throw Error(`Docusaurus error: Duplicate values "${s.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[s,n])}(e),[a,m]=(0,r.useState)(()=>(function(e){let{defaultValue:s,tabValues:n}=e;if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!p({value:s,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}let i=n.find(e=>e.default)??n[0];if(!i)throw Error("Unexpected error: 0 tabValues");return i.value})({defaultValue:s,tabValues:t})),[x,j]=function(e){let{queryString:s=!1,groupId:n}=e,i=(0,d.k6)(),t=function(e){let{queryString:s=!1,groupId:n}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:s,groupId:n});return[(0,c._X)(t),(0,r.useCallback)(e=>{if(!t)return;let s=new URLSearchParams(i.location.search);s.set(t,e),i.replace({...i.location,search:s.toString()})},[t,i])]}({queryString:n,groupId:i}),[g,k]=function(e){let{groupId:s}=e,n=s?`docusaurus.tab.${s}`:null,[i,t]=(0,h.Nk)(n);return[i,(0,r.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:i}),b=(()=>{let e=x??g;return p({value:e,tabValues:t})?e:null})();return(0,l.Z)(()=>{b&&m(b)},[b]),{selectedValue:a,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:t}))throw Error(`Can't select invalid tab value=${e}`);m(e),j(e),k(e)},[j,k,t]),tabValues:t}}(e);return(0,i.jsxs)("div",{className:(0,t.Z)("tabs-container","tabList_ArS0"),children:[(0,i.jsx)(x,{...s,...e}),(0,i.jsx)(j,{...s,...e})]})}function k(e){let s=(0,m.Z)();return(0,i.jsx)(g,{...e,children:u(e.children)},String(s))}},91503:function(e,s,n){n.d(s,{Z:function(){return d},a:function(){return a}});var i=n(75271);let r={},t=i.createContext(r);function a(e){let s=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);