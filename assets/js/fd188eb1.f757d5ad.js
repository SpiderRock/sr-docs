"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["27777"],{16898:function(e,r,t){t.r(r),t.d(r,{default:()=>h,frontMatter:()=>o,metadata:()=>i,assets:()=>a,toc:()=>l,contentTitle:()=>d});var i=JSON.parse('{"id":"Documentation/PlatformFeatures/OrderManagement/Staged-Orders","title":"Order Staging","description":"SpiderRock Connect execution engines and OMS/EMS tools support a form of order staging (workflow staging) in which parent orders are initially submitted in a held state with activeOrderSize = 0. These orders remain inactive until a user modifies and/or releases them, at which point they become working parent orders. This workflow process can be used either by a user staging orders to themselves for future action, or by a ControlParty user staging an order to a ModifyParty user for the ModifyParty user to later activate and release into the market.","source":"@site/docs/Documentation/PlatformFeatures/OrderManagement/Staged-Orders.md","sourceDirName":"Documentation/PlatformFeatures/OrderManagement","slug":"/Documentation/PlatformFeatures/OrderManagement/Staged-Orders","permalink":"/docs/next/Documentation/PlatformFeatures/OrderManagement/Staged-Orders","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Order Staging","sidebar_position":4},"sidebar":"documentationSidebar","previous":{"title":"Execution Risk Controls","permalink":"/docs/next/Documentation/PlatformFeatures/OrderManagement/ExecutionRiskControl"},"next":{"title":"TCA Metrics","permalink":"/docs/next/Documentation/PlatformFeatures/OrderManagement/TCAMetrics"}}'),n=t("52676"),s=t("91503");let o={title:"Order Staging",sidebar_position:4},d=void 0,a={},l=[{value:"User Order Access Permissions",id:"user-order-access-permissions",level:2},{value:"User Order Access Levels",id:"user-order-access-levels",level:3},{value:"<em>SpdrStageType</em> Options",id:"spdrstagetype-options",level:3},{value:"Control and Modify Parties",id:"control-and-modify-parties",level:2},{value:"Key Points on Access",id:"key-points-on-access",level:4},{value:"Workflow Behaviors",id:"workflow-behaviors",level:3},{value:"Order Workflow Summary",id:"order-workflow-summary",level:2},{value:"Step One: Order Entry",id:"step-one-order-entry",level:4},{value:"Step Two: Order Handling",id:"step-two-order-handling",level:4},{value:"Step Three: Order Modification",id:"step-three-order-modification",level:4},{value:"Market Session Handling",id:"market-session-handling",level:2},{value:"Order Lifecycle and Termination",id:"order-lifecycle-and-termination",level:3},{value:"Active and Effective Order Duration",id:"active-and-effective-order-duration",level:3}];function c(e){let r={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["SpiderRock Connect execution engines and OMS/EMS tools support a form of order staging (workflow staging) in which parent orders are initially submitted in a held state with ",(0,n.jsx)(r.code,{children:"activeOrderSize = 0"}),". These orders remain inactive until a user modifies and/or releases them, at which point they become working parent orders. This workflow process can be used either by a user staging orders to themselves for future action, or by a ",(0,n.jsx)(r.strong,{children:"ControlParty"})," user staging an order to a ",(0,n.jsx)(r.strong,{children:"ModifyParty"})," user for the ModifyParty user to later activate and release into the market."]}),"\n",(0,n.jsx)(r.p,{children:"Note that this process is separate from a StageReview sequence which allows a client firm or their sponsor to perform an automated risk review of parent orders before they become active."}),"\n",(0,n.jsx)(r.h2,{id:"user-order-access-permissions",children:"User Order Access Permissions"}),"\n",(0,n.jsx)(r.p,{children:"Before understanding Control and Modify Parties, it's important to understand the user permission system that determines what actions a user can perform on orders."}),"\n",(0,n.jsx)(r.h3,{id:"user-order-access-levels",children:"User Order Access Levels"}),"\n",(0,n.jsx)(r.p,{children:"Users are assigned one of the following Order Access levels in their client configuration:"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Order Access Level"}),(0,n.jsx)(r.th,{children:"Description"}),(0,n.jsx)(r.th,{children:"Capabilities"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"Add/Replace"})}),(0,n.jsx)(r.td,{children:"Highest level of access"}),(0,n.jsxs)(r.td,{children:["Can create, modify, and replace any order. Can act as Modify Party on any ",(0,n.jsx)(r.em,{children:"SpdrStageType"}),"."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"ModifyAny"})}),(0,n.jsx)(r.td,{children:"Full modification access"}),(0,n.jsx)(r.td,{children:"Can modify any changeable order parameter (limit price, algo, activeSize, etc.) when acting as Modify Party."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"ModifyAlgo"})}),(0,n.jsx)(r.td,{children:"Limited modification access"}),(0,n.jsx)(r.td,{children:"Can only modify active size, algo type, and secondary limits (but not primary user limit)."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"StageOnly"})}),(0,n.jsx)(r.td,{children:"Staging access only"}),(0,n.jsx)(r.td,{children:"Can create staged orders but cannot release them."})]})]})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"The permission hierarchy from highest to lowest access is: Add/Replace \u2192 ModifyAny \u2192 ModifyAlgo \u2192 StageOnly.\n"})}),"\n",(0,n.jsxs)(r.h3,{id:"spdrstagetype-options",children:[(0,n.jsx)(r.em,{children:"SpdrStageType"})," Options"]}),"\n",(0,n.jsxs)(r.p,{children:["When creating an order, the Control Party sets the ",(0,n.jsx)(r.em,{children:"SpdrStageType"}),", which determines what level of modification access is possible:"]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:(0,n.jsx)(r.em,{children:"SpdrStageType"})}),(0,n.jsx)(r.th,{children:"Description"}),(0,n.jsx)(r.th,{children:"Required User Access"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"ModifyAny"})}),(0,n.jsx)(r.td,{children:"Order can be fully modified."}),(0,n.jsx)(r.td,{children:"Add/Replace or ModifyAny"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"ModifyAlgo"})}),(0,n.jsx)(r.td,{children:"Order can only have algo parameters modified."}),(0,n.jsx)(r.td,{children:"Add/Replace, ModifyAny, or ModifyAlgo"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"StageOnly"})}),(0,n.jsx)(r.td,{children:"Order can only be staged, not released."}),(0,n.jsx)(r.td,{children:"Add/Replace or StageOnly"})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"control-and-modify-parties",children:"Control and Modify Parties"}),"\n",(0,n.jsx)(r.p,{children:"The two primary parties involved in staging an order are the Control Party and the Modify Party."}),"\n",(0,n.jsxs)(r.p,{children:["The Control Party refers to the initial user submitting the order into SpiderRock Connect's system. The Control Party can ALSO refer to a secondary, subsequent user with full account access and Add/Replace order access, provided that the initial user set ",(0,n.jsx)(r.em,{children:"SpdrStageType"}),"=\u2019None\u2019. This subsequent user will override the initial user to become the Control Party."]}),"\n",(0,n.jsxs)(r.p,{children:["The source of the order can be a SpiderRock Connect Tool (SV or TradeTool) or an order entered via MLink, SRSE, or FIX. The Control Party is responsible for setting an order's ",(0,n.jsx)(r.strong,{children:"hard"})," parameters such as:"]}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"Item or spread"}),(0,n.jsx)("li",{children:"Order side"}),(0,n.jsx)("li",{children:"Total order size"}),(0,n.jsx)("li",{children:"Total order duration"})]}),"\n",(0,n.jsx)(r.p,{children:"The control party has permissions to:"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"Create a new order"}),(0,n.jsx)("li",{children:"Cancel/replace and existing order"}),(0,n.jsx)("li",{children:"Cancel an existing order"})]}),"\n",(0,n.jsxs)(r.p,{children:["The Modify Party can be considered the opposite of the Control Party. They are either from the same client firm as the Control Party's account or are a FINRA-licensed broker, such as SpiderRock's Concierge Desk. The Modify Party cannot change the original order's ",(0,n.jsx)(r.strong,{children:"hard"})," parameters, but they can modify:"]}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"Active order size"}),(0,n.jsx)("li",{children:"Active order duration"}),(0,n.jsx)("li",{children:"The order execution algo"})]}),"\n",(0,n.jsx)(r.h4,{id:"key-points-on-access",children:"Key Points on Access"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsxs)("li",{children:["Your user access level determines which features of any order you can edit - with the exception of ",(0,n.jsx)("i",{children:"SpdrStageType"}),", which remains constant"]}),(0,n.jsx)("li",{children:"If you have ModifyAlgo access and the control party sent the order as ModifyAny, you can still modify the order as long as you have account access\u2014but only within the limits of your most restrictive permission level (ModifyAlgo)."}),(0,n.jsx)("li",{children:"Add/Replace users can edit ModifyAny and ModifyAlgo orders."}),(0,n.jsx)("li",{children:"ModifyAny users can edit ModifyAny and ModifyAlgo orders."}),(0,n.jsx)("li",{children:"ModifyAlgo users are restricted to just algo modifications"}),(0,n.jsx)("li",{children:"Add/Replace and StageOnly users are allowed to stage orders, but ModifyAny and ModifyAlgo users are not."})]}),"\n",(0,n.jsx)(r.h3,{id:"workflow-behaviors",children:"Workflow Behaviors"}),"\n",(0,n.jsx)(r.p,{children:"When an order is received by SpiderRock Connect\u2019s system, it will have a total order size that has been set by the Control Party but its active order size will be set to zero. The same is true for the order\u2019s total duration and active duration. When either of these two dimensions are set to zero, the order will be in a hold state. In this state, the Modify Party can review the order and selectively decide when the next slice of the order should be activated, how long that slice should remain live, and which algo should determine its behavior in the marketplace once active."}),"\n",(0,n.jsx)(r.p,{children:"If an order fills up to its active size (but not to its total order size), it will return to a hold state, as there is nothing more to do. Alternatively, the Modify Party can reduce the active size of an order to zero to place it back in a hold state. If an order fills to its entire total order size, then the complete order will be closed (Filled). If an order reaches its total order duration, it will also be closed (Expired), and a terminal order status will be returned to the Control Party."}),"\n",(0,n.jsx)(r.p,{children:"The Modify Party can then work the order slice by slice until the original order\u2019s size has been filled completely or until it is terminated by the Control Party."}),"\n",(0,n.jsx)(r.h2,{id:"order-workflow-summary",children:"Order Workflow Summary"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Party"}),(0,n.jsx)(r.th,{children:"Summary"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"Control Party"})}),(0,n.jsxs)(r.td,{children:["Sets the original order\u2019s parameters. ",(0,n.jsx)("br",{})," Responsible for creating, cancelling, or replacing orders."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"Modify Party"})}),(0,n.jsxs)(r.td,{children:["Has limited modification capabilities. ",(0,n.jsx)("br",{})," Cannot change the order item, order size, or total order duration. ",(0,n.jsx)("br",{})," Can adjust algorithm settings, active order size, and active order duration."]})]})]})]}),"\n",(0,n.jsx)(r.h4,{id:"step-one-order-entry",children:"Step One: Order Entry"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"An account submits a new order which is passed through client gateways and into SpiderRock Connect\u2019s Execution Engine."}),(0,n.jsx)("li",{children:"The order has the total order size, the activeSize set to 0, and the stageType set to Modify."})]}),"\n",(0,n.jsx)(r.h4,{id:"step-two-order-handling",children:"Step Two: Order Handling"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"A Parent Broker State Record is created and passed through the system to appear in the Trade Tool."}),(0,n.jsx)("li",{children:"If the order is being sent to the Concierge Desk to be staged, a User Proxy Record will also be created so the Concierge Desk\u2019s broker will not receive any confidential client information beyond what is necessary to complete the stage review."})]}),"\n",(0,n.jsx)(r.h4,{id:"step-three-order-modification",children:"Step Three: Order Modification"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"Within SpiderRock Connect's Trade Tool, users belonging to the Modify Party will be able to view the actions they have permissions for and from the tool, and adjust the order parameters at their discretion."}),(0,n.jsx)("li",{children:"The orders will then work within the specified active sizes and active durations until the original order is filled or terminated."})]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)("b",{children:"Note:"})," Stage Review Checks are triggered by changes in the total size of an order or during cancel/replace operations. These checks are also activated when an order previously marked as closed is reawakened."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"market-session-handling",children:"Market Session Handling"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"According to client instructions, orders are assigned to market sessions (pre-market, regular market, or post-market)."}),(0,n.jsx)("li",{children:"SpiderRock Connect\u2019s Execution Engine will create and submit the Market-on-Open and Market-on-Close orders before either Market Open or Market Close in order to participate in the relevant auction. Otherwise, simple orders are eligible for pre-market sessions with start times and good-till times managed by SpiderRock Connect."})]}),"\n",(0,n.jsx)(r.h3,{id:"order-lifecycle-and-termination",children:"Order Lifecycle and Termination"}),"\n",(0,n.jsx)(r.p,{children:"Orders have a final reaping time, typically five minutes after the regular good-till time of the relevant exchange. SpiderRock Connect aims to receive cancel acknowledgments from exchanges within this window. A Control Party can explicitly set start and good-till times which would take precedence over session-derived times."}),"\n",(0,n.jsx)(r.h3,{id:"active-and-effective-order-duration",children:"Active and Effective Order Duration"}),"\n",(0,n.jsx)(r.p,{children:"The active duration of an order can be modified by the Control or Modify party. The Execution Engine recalculates order start and good-till times based on the effective duration, ensuring proper order handling."})]})}function h(e={}){let{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},91503:function(e,r,t){t.d(r,{Z:function(){return d},a:function(){return o}});var i=t(75271);let n={},s=i.createContext(n);function o(e){let r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);