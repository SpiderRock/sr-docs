"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[83770],{42541:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var s=i(74848),t=i(28453);const o={title:"SRConnect MLink",sidebar_position:4},c=void 0,r={id:"SpiderRockConnectATS/MLink",title:"SRConnect MLink",description:"This document provides an overview of the SRConnect system developed for responding to Auctions via SpiderRock's MLink API. Our system leverages specific message types to enable auction responders to interact with the auction process.",source:"@site/docs/SpiderRockConnectATS/MLink.md",sourceDirName:"SpiderRockConnectATS",slug:"/SpiderRockConnectATS/MLink",permalink:"/docs/SpiderRockConnectATS/MLink",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"SRConnect MLink",sidebar_position:4},sidebar:"spiderRockConnectATSSidebar",previous:{title:"Auction Price and Size Restrictions",permalink:"/docs/SpiderRockConnectATS/ATSConceptGuides/SRConnect Auctions/Auction-Price-Size-Restrictions"},next:{title:"Concierge Desk",permalink:"/docs/SpiderRockConnectATS/concierge-desk"}},l={},a=[{value:"System Overview",id:"system-overview",level:3},{value:"Understanding MLink&#39;s Role in the SRCconnect Workflow",id:"understanding-mlinks-role-in-the-srcconnect-workflow",level:2},{value:"Key Components",id:"key-components",level:3},{value:"Workflow Overview",id:"workflow-overview",level:3},{value:"Integration with MLink API",id:"integration-with-mlink-api",level:3},{value:"Auction Message Structures",id:"auction-message-structures",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This document provides an overview of the SRConnect system developed for responding to Auctions via SpiderRock's MLink API. Our system leverages specific message types to enable auction responders to interact with the auction process."}),"\n",(0,s.jsx)(n.h3,{id:"system-overview",children:"System Overview"}),"\n",(0,s.jsx)(n.p,{children:"The SRConnect Auction System integrates with SpiderRock's MLink API to facilitate Auction reponses. It utilizes a set of predefined message types to manage auction notices and responses. This system is designed to work with the FIX financial protocol and SpiderRock's Trade Tool alongside the MLink API."}),"\n",(0,s.jsx)(n.h2,{id:"understanding-mlinks-role-in-the-srcconnect-workflow",children:"Understanding MLink's Role in the SRCconnect Workflow"}),"\n",(0,s.jsx)(n.p,{children:"MLink is a central component of the SRCconnect trading system. It facilitates the efficient handling of auction notices, responses, and cancellations, using a sophisticated filtering system to ensure that clients receive pertinent auction opportunities in real-time."}),"\n",(0,s.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Filtering"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Purpose"}),": Allows clients to specify filters for the auctions of interest."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Functionality"}),": Utilizes ",(0,s.jsx)(n.code,{children:"UserAuctionFilter"})," messages to streamline the delivery of ",(0,s.jsx)(n.code,{children:"AuctionNotice"})," messages, enhancing relevance and efficiency."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"MLink Server"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Processes and routes all auction-related messages within the system."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Messages Processed"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"UserAuctionFilter"}),": Message used to filter Notices received by client (to be sent by client to MLink Server)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AuctionNotice"}),": Alerts clients of relevant auctions based on established filters."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AuctionNoticeBoxSprd"}),": Alerts clients of relevant Box Sprd auctions based on established filters."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AuctionNoticeSynthetic"}),": Alerts clients of relevant Synthetic auctions based on established filters."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NoticeResponse"}),": Message used to participate/respond to Auction Notices."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NoticeExecReport"}),": Sends confirmation/reporting of the action taken on ",(0,s.jsx)(n.code,{children:"NoticeResponse"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NoticeCancel"}),": Processes clients' requests to cancel their responses to auctions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AuctionPrint"}),": Message details auction transaction prints (trades)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Client Auction Responder"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Automated Decision-Making"}),": Analyzes incoming ",(0,s.jsx)(n.code,{children:"AuctionNotice"})," messages and determines the appropriate action based on positions, theoretical models, and risk rules to respond to auctions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Documentation"}),": Clients are advised to consult the SR MLink Auction Responder Documentation for in-depth understanding and setup instructions."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"workflow-overview",children:"Workflow Overview"}),"\n",(0,s.jsx)(n.p,{children:"The MLink API's integration into the SRCconnect workflow can be summarized in the following steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auction Notice Generation"}),": The MLink Server publishes an ",(0,s.jsx)(n.code,{children:"AuctionNotice"})," when a new auction is available that matches the client's predefined filters."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client Decision Process"}),": The Client Auction Responder receives the ",(0,s.jsx)(n.code,{children:"AuctionNotice"})," and uses the client's strategy and risk profile to decide whether to participate in an auction."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response Handling"}),": The client's ",(0,s.jsx)(n.code,{children:"NoticeResponse"})," is sent to the MLink Server, which then processes it and returns a ",(0,s.jsx)(n.code,{children:"NoticeExecReport"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cancellation Option"}),": Clients retain the ability to send a ",(0,s.jsx)(n.code,{children:"NoticeCancel"})," message if they choose to withdraw from an auction."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The process ensures that clients engage with auctions that are most relevant to them, maintaining a high level of market responsiveness and strategic participation."}),"\n",(0,s.jsx)(n.p,{children:"Through MLink, SRCconnect provides a robust platform for auction-based trading, enabling clients to filter, respond to, and manage auction participation with precision and agility. MLink's API and server act as the cornerstone of this process, ensuring real-time data streaming and interactive trading capabilities."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Features"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Auction Filtering"}),": Participants can filter auctions of interest with ",(0,s.jsx)(n.code,{children:"UserAuctionFilter"})," messages, enhancing the relevance of AuctionNotice messages."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Auction Notice Publication"}),": Notices are consolidated into a feed called ",(0,s.jsx)(n.code,{children:"AuctionNotice"}),", which streams auctions in real-time."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Auction Responses"}),": Participants can respond to auctions directly using ",(0,s.jsx)(n.code,{children:"NoticeResponse"})," messages."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Auction Notice Execution Report"}),": Participants can monitor their ",(0,s.jsx)(n.code,{children:"NoticeResponse"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Auction Cancel"}),": Participants can cancel their NoticeResponse directly using ",(0,s.jsx)(n.code,{children:"NoticeCancel"})," messages."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Message Types"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"UserAuctionFilter"}),": Allows responders to specify filters for the auctions they wish to receive notifications from ",(0,s.jsx)(n.code,{children:"AuctionNotice"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"AuctionNotice"}),": A real-time feed of ongoing auctions available for clients to stream."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"NoticeResponse"}),": Used by responders to participate in an auction."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"NoticeExecReport"}),": Allows responders to get a execution report following their ",(0,s.jsx)(n.code,{children:"NoticeResponse"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"NoticeCancel"}),": Allows responders to cancel their ",(0,s.jsx)(n.code,{children:"NoticeResponse"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"integration-with-mlink-api",children:"Integration with MLink API"}),"\n",(0,s.jsx)(n.p,{children:"Our Auction System utilizes the MLink API for message transmission, leveraging its support for multiple message delivery protocols, including JSON, Framed JSON, and Google Protocol Buffers. The API supports both RESTful queries and WebSocket streaming, accommodating a wide range of application requirements."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Authentication"})}),"\n",(0,s.jsx)(n.p,{children:"Access to the MLink API requires authentication via an API Key or SessionKey, ensuring secure interactions with the auction system. Detailed instructions on authentication methods are available in the MLink API documentation."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Connection Types"})}),"\n",(0,s.jsx)(n.p,{children:"Depending on your application's needs, you can choose between REST API and WebSocket API connections. The REST API is suitable for applications requiring occasional data queries, while the WebSocket API is designed for applications needing live data subscriptions."}),"\n",(0,s.jsx)(n.h3,{id:"auction-message-structures",children:"Auction Message Structures"}),"\n",(0,s.jsx)(n.p,{children:"Below are placeholders for the message structures used in our Auction System. Detailed specifications will be provided based on the specific requirements of each message type."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"UserAuctionFilter"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"UserAuctionFilter Message Schema"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"UserAuctionFilter"})," message is vital for participants to set their preferences and filters for the auctions they are interested in from ",(0,s.jsx)(n.code,{children:"AuctionNotice"}),". Below is the detailed schema outlining all fields associated with this message type, including data types, enum sets (where applicable), and descriptions for each field."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Message Type: ",(0,s.jsx)(n.code,{children:"UserAuctionFilter"})]}),"\n",(0,s.jsx)(n.li,{children:"Message Number: 1915"}),"\n",(0,s.jsx)(n.li,{children:"MLink Token: SRConnect"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var s=i(96540);const t={},o=s.createContext(t);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);