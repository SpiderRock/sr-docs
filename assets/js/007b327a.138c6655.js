"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[59551],{87250:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>L,contentTitle:()=>o,default:()=>E,frontMatter:()=>T,metadata:()=>t,toc:()=>a});var N=n(74848),i=n(28453);const T={title:"SpdrRiskExecution"},o=void 0,t={id:"MessageSchemas/Schema/SRSE Products/SRTrade/SpdrRiskExecution/SpdrRiskExecution",title:"SpdrRiskExecution",description:"V8 Message Definition",source:"@site/docs/MessageSchemas/Schema/SRSE Products/SRTrade/SpdrRiskExecution/SpdrRiskExecution.md",sourceDirName:"MessageSchemas/Schema/SRSE Products/SRTrade/SpdrRiskExecution",slug:"/MessageSchemas/Schema/SRSE Products/SRTrade/SpdrRiskExecution/",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRTrade/SpdrRiskExecution/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"SpdrRiskExecution"},sidebar:"messageSchemasSidebar",previous:{title:"SpdrReleaseWaitTrigger",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRTrade/SpdrReleaseWaitTrigger/"},next:{title:"SpdrRiskGroupCancel",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRTrade/SpdrRiskGroupCancel/"}},L={},a=[];function s(e){const r={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,N.jsxs)(N.Fragment,{children:[(0,N.jsx)(r.p,{children:(0,N.jsx)(r.a,{href:"../../../Topics/execution-engine/SpdrRiskExecution",children:"V8 Message Definition"})}),"\n",(0,N.jsx)(r.pre,{children:(0,N.jsx)(r.code,{className:"language-sql",children:"CREATE TABLE `SRTrade`.`MsgSRRiskExecution` (\n    `fillNumber` BIGINT NOT NULL DEFAULT 0 COMMENT 'SpiderRock execution number (globally unique over trailing 10 days)',\n    `sysRealm` ENUM('None','SysTest','NMS','CME','FR2','LD4','DR') NOT NULL DEFAULT 'None',\n    `sysEnvironment` ENUM('None','Neptune','Pluto','V7_Stable','V7_Latest','Saturn','Venus','Mars','SysTest','V7_Current') NOT NULL DEFAULT 'None' COMMENT 'original (source) sys environment [Stable, Current, etc]',\n    `runStatus` ENUM('None','Prod','Beta','UAT','SysTest') NOT NULL DEFAULT 'None' COMMENT 'original (source) run status [Prod,Beta]',\n    `version` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)',\n    `execStatus` ENUM('None','Fill','Bust','Correct','Reject','SysRej') NOT NULL DEFAULT 'None' COMMENT 'SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)',\n    `execShape` ENUM('None','Single','MLegTop','MLegLeg','SpreadTop','SpreadLeg','SingleLeg') NOT NULL DEFAULT 'None',\n    `packageId` BIGINT NOT NULL DEFAULT 0 COMMENT 'SR package Id',\n    `parentNumber` CHAR(19) NOT NULL DEFAULT '0000-0000-0000-0000' COMMENT 'SR parent number',\n    `parentVersion` SMALLINT NOT NULL DEFAULT 0 COMMENT 'SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)',\n    `baseParentNumber` CHAR(19) NOT NULL DEFAULT '0000-0000-0000-0000' COMMENT 'SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)',\n    `clOrdId` CHAR(19) NOT NULL DEFAULT '0000-0000-0000-0000' COMMENT 'SR child order clOrdID resulting in fill',\n    `riskGroupId` CHAR(19) NOT NULL DEFAULT '0000-0000-0000-0000' COMMENT 'riskGroupId (parent order group ID) for this execution report',\n    `parentShape` ENUM('None','Single','Cross','MLeg','MLegCross') NOT NULL DEFAULT 'None' COMMENT 'shape of originating parent order',\n    `secKey_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'execution security key',\n    `secKey_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'execution security key',\n    `secKey_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'execution security key',\n    `secKey_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'execution security key',\n    `secKey_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'execution security key',\n    `secKey_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'execution security key',\n    `secKey_xx` DOUBLE NOT NULL DEFAULT 0 COMMENT 'execution security key',\n    `secKey_cp` ENUM('Call','Put','Pair') NOT NULL DEFAULT 'Call' COMMENT 'execution security key',\n    `secType` ENUM('None','Stock','Future','Option','MLeg') NOT NULL DEFAULT 'None' COMMENT 'execution security type [Stock, Future, Option]',\n    `ticker_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'base stock key (used for symbol risk aggregation)',\n    `ticker_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'base stock key (used for symbol risk aggregation)',\n    `ticker_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'base stock key (used for symbol risk aggregation)',\n    `accnt` VARCHAR(16) NOT NULL DEFAULT '' COMMENT 'SpiderRock trading accnt [broker pkey]',\n    `clientFirm` VARCHAR(16) NOT NULL DEFAULT '' COMMENT 'SR client firm',\n    `spdrSource` ENUM('None','SpdrTicket','SpdrSingle','SRSE','FIX','HedgeTool','TradeHedge','OpenHedge','AutoHedge','Orphan','RiskManager','OrderManager','ManagedOrder','RFQRespSrvr','Legger','SRSEDrop','FixDrop','TicketDrop','SysTest','RFRResponse','AllocOmni','AllocClient','CertGateway','MLegResponse','LeggerX','DropManager','AutoHedgeSrvr','AuctionStrategySrvr','AllocBlockFace','AllocBlockCust','IceChatGateway','EXS2SRC','MLinkResponse','AutoResponderVD','AutoResponderRC','AutoResponderSN','AutoResponderBX') NOT NULL DEFAULT 'None' COMMENT 'SpiderRock parent order source code [broker pkey]',\n    `groupingCode` CHAR(19) NOT NULL DEFAULT '0000-0000-0000-0000' COMMENT 'SpiderRock parent broker number [broker pkey]',\n    `engineName` VARCHAR(32) NOT NULL DEFAULT '' COMMENT 'SpiderRock execution engine that handled the parent order',\n    `execRole` ENUM('None','DirectAccnt','AwayGiveup','RiskDrop','AwayDrop','PullDrop') NOT NULL DEFAULT 'None' COMMENT 'SpiderRock relationship to this execution record',\n    `childOrderHandling` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'child order handling string from the algo that generated the child order responsible for this fill',\n    `childAlgoHandler` ENUM('None','ActiveTaker','ActiveMaker','Auction','Responder','Matrix','Cross','Face','Extern','MLegHandler','AutoHedge','Sprayer','Legger','Restart','Orphan','UDefSpread','RFQRequest','MLegResponder','LeggerX','ExchPing','BrkrReview','AuctionResponder','TakeSweep','TestChild') NOT NULL DEFAULT 'None' COMMENT 'algo handler for this child order',\n    `childSSaleFlag` ENUM('None','Long','Short','Exempt','Auto','Open','Close','Cover','NA') NOT NULL DEFAULT 'None' COMMENT 'short sale flag',\n    `userName` VARCHAR(24) NOT NULL DEFAULT '' COMMENT 'user name associated with the parent order',\n    `orderSide` ENUM('None','Buy','Sell') NOT NULL DEFAULT 'None' COMMENT 'order side',\n    `spdrOrderStatus` ENUM('PendNew','New','PendClose','Closed','Rejected','SendReject') NOT NULL DEFAULT 'PendNew',\n    `spdrCloseReason` ENUM('None','Cancelled','Filled','Replaced','Expired','Limit','System','LegReject','DoneForDay','IOCExpire','UserCxl','NoProgress','TooManyRej','ReplReject','AlgoClose','Restart','InvldParentLimit','FilledRepl','ForceClose','DmaReject','DmaExpire','DmaBrkrCxl','ReviewReject','MarketState','AlgoReject','ReviewTimeout','ChildReject','ChildCancel','ReviewClose','UPrcRange','LegBrkrClosed','ExchRisk','CrossFailed') NOT NULL DEFAULT 'None',\n    `cumFillQuantity` INT NOT NULL DEFAULT 0 COMMENT 'cumulative fills (this parent number only)',\n    `avgFillPrice` DOUBLE NOT NULL DEFAULT 0,\n    `cumLegFillQuantity` INT NOT NULL DEFAULT 0 COMMENT 'cumulative fills (spread only)',\n    `avgLegFillPrice` DOUBLE NOT NULL DEFAULT 0,\n    `leavesQty` INT NOT NULL DEFAULT 0,\n    `priceType` ENUM('None','Explicit','Offset','Zero') NOT NULL DEFAULT 'None',\n    `firmType` ENUM('None','Customer','Firm','MarketMaker','ProCustomer','BrokerDealer','AwayMM','FirmJBO','BrkrDlrCust') NOT NULL DEFAULT 'None' COMMENT 'child order firm type [Customer, ProCust, Firm, MM, etc]',\n    `priAggGroup` VARCHAR(16) NOT NULL DEFAULT '' COMMENT 'primary aggregation group',\n    `secAggGroup` VARCHAR(16) NOT NULL DEFAULT '' COMMENT 'secondary aggregation group',\n    `fillTransactDttm` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT 'transaction date/time as reported by exchange or down stream broker',\n    `fillDttm` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT 'Date/time of fill arrival (SRDateTime)',\n    `fillExch` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'ExDest code from child order execution report',\n    `fillExecId` VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'street side execution Id',\n    `fillExecRefId` VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'street side execution ref Id (only used when busting an execution)',\n    `fillLegRefId` BIGINT NOT NULL DEFAULT 0 COMMENT 'legRefId for multileg fills',\n    `fillLegRatio` INT NOT NULL DEFAULT 0 COMMENT 'legRatio (if spread order)',\n    `fillExchFee` FLOAT NOT NULL DEFAULT 0 COMMENT 'SpiderRock estimate of the exchange fee based on liquidity tags (best effort)',\n    `fillMarket` VARCHAR(8) NOT NULL DEFAULT '' COMMENT 'usually from execReport.lastMkt as reported by child order venue',\n    `fillPrice` DOUBLE NOT NULL DEFAULT 0 COMMENT 'fill price',\n    `fillQuantity` INT NOT NULL DEFAULT 0 COMMENT 'fill quantity',\n    `fillBid` DOUBLE NOT NULL DEFAULT 0 COMMENT 'market bid @ fill arrival',\n    `fillAsk` DOUBLE NOT NULL DEFAULT 0 COMMENT 'market ask @ fill arrival',\n    `fillMark` DOUBLE NOT NULL DEFAULT 0 COMMENT 'mid-market (or SR surface price if option) @ fill arrival',\n    `fillUBid` DOUBLE NOT NULL DEFAULT 0 COMMENT 'underlier market bid @ fill arrival',\n    `fillUAsk` DOUBLE NOT NULL DEFAULT 0 COMMENT 'underlier market bid @ fill arrival',\n    `fillVol` FLOAT NOT NULL DEFAULT 0 COMMENT 'fill volatility @ fillLimitRefUPrc',\n    `fillVe` FLOAT NOT NULL DEFAULT 0 COMMENT 'fill vega',\n    `fillGa` FLOAT NOT NULL DEFAULT 0 COMMENT 'fill gamma',\n    `fillDe` FLOAT NOT NULL DEFAULT 0 COMMENT 'fill delta',\n    `fillTh` FLOAT NOT NULL DEFAULT 0 COMMENT 'fill theta',\n    `fillBeta` FLOAT NOT NULL DEFAULT 0 COMMENT 'SpiderRock estimate of beta to SPX',\n    `riskVega` FLOAT NOT NULL DEFAULT 0 COMMENT 'risk vega',\n    `riskWtVega` FLOAT NOT NULL DEFAULT 0 COMMENT 'risk gamma',\n    `riskNValue` FLOAT NOT NULL DEFAULT 0 COMMENT 'risk delta',\n    `riskDelta` FLOAT NOT NULL DEFAULT 0 COMMENT 'risk delta',\n    `riskDDelta` FLOAT NOT NULL DEFAULT 0 COMMENT 'risk ddelta',\n    `riskRm1` FLOAT NOT NULL DEFAULT 0 COMMENT 'user defined (from parent order) [used to manage order groups',\n    `riskRm2` FLOAT NOT NULL DEFAULT 0 COMMENT 'user defined (from parent order) [used to manage order groups]',\n    `riskRm3` FLOAT NOT NULL DEFAULT 0 COMMENT 'user defined (from parent order) [used to manage order groups]',\n    `riskRm4` FLOAT NOT NULL DEFAULT 0 COMMENT 'user defined (from parent order) [used to manage order groups]',\n    `riskRm5` FLOAT NOT NULL DEFAULT 0 COMMENT 'user defined (from parent order) [used to manage order groups]',\n    `riskRm6` FLOAT NOT NULL DEFAULT 0 COMMENT 'user defined (from parent order) [used to manage order groups]',\n    `riskRm7` FLOAT NOT NULL DEFAULT 0 COMMENT 'user defined (from parent order) [used to manage order groups]',\n    `marginUDnVDn` FLOAT NOT NULL DEFAULT 0 COMMENT 'underlier down, vol down',\n    `marginUDnVUp` FLOAT NOT NULL DEFAULT 0 COMMENT 'underlier down, vol up',\n    `marginUUpVDn` FLOAT NOT NULL DEFAULT 0 COMMENT 'underlier up, vol down',\n    `marginUUpVUp` FLOAT NOT NULL DEFAULT 0 COMMENT 'underlier up, vol up',\n    `riskU50Dn` FLOAT NOT NULL DEFAULT 0 COMMENT 'underlier dn 50% shock slide',\n    `riskU50Up` FLOAT NOT NULL DEFAULT 0 COMMENT 'underlier up 50% shock slide',\n    `years` FLOAT NOT NULL DEFAULT 0 COMMENT 'years to expiration',\n    `underliersPerCn` INT NOT NULL DEFAULT 0 COMMENT 'option delivery underliers per contract',\n    `underlierType` ENUM('None','Equity','Other','FX') NOT NULL DEFAULT 'None' COMMENT 'type of underlier (affects $greek calculations)',\n    `tickValue` FLOAT NOT NULL DEFAULT 0 COMMENT '$NLV value of a single tick change in display premium\t(pointValue = tickValue / tickSize)',\n    `pointValue` FLOAT NOT NULL DEFAULT 0 COMMENT '$NLV value of a single point change in display premium (pointValue = tickValue / tickSize)',\n    `pointCurrency` ENUM('None','AUD','BRL','CAD','CHF','CNH','CNY','EUR','GBP','JPY','KRW','MXN','MYR','NOK','NZD','SEK','TRY','USD','USDCents','CZK','ZAR','HUF','USX','GBX') NOT NULL DEFAULT 'None',\n    `uPrcRatio` FLOAT NOT NULL DEFAULT 0 COMMENT 'UPrcRatio (SymbolRatio) from product definition',\n    `minTickSize` FLOAT NOT NULL DEFAULT 0 COMMENT 'minimum market price variation (dnTickSize if on a boundary)',\n    `priceFormat` ENUM('None','N0','N1','N2','N3','N4','N5','N6','N7','F4','F8','Q8','F16','F32','H32','Q32','F64','H64','FullPenny','PartPenny','PartNickle','EQT','V1','V2','V3','V4','V5','V6','V7','V8','V9','V10','V11','V12','V13','V14','V15','A0','A1','A2','A3','A4','A5','A6','A7','E32') NOT NULL DEFAULT 'None' COMMENT 'SpiderRock price display format code',\n    `uPriceFormat` ENUM('None','N0','N1','N2','N3','N4','N5','N6','N7','F4','F8','Q8','F16','F32','H32','Q32','F64','H64','FullPenny','PartPenny','PartNickle','EQT','V1','V2','V3','V4','V5','V6','V7','V8','V9','V10','V11','V12','V13','V14','V15','A0','A1','A2','A3','A4','A5','A6','A7','E32') NOT NULL DEFAULT 'None' COMMENT 'SpiderRock underlier price display format code',\n    `timestamp` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000' COMMENT 'timestamp of this record [not necessarily the timestamp of the fill itself]',\n    `dataCenter_V7` ENUM('None','NY4','NY5','CH2','CH3') NOT NULL DEFAULT 'None' COMMENT 'only v7: enum values do not match with v8: V7[None=0,NY4=1,NY5=2,CH2=3,CH3=4], V8[Does Not Exist]',\n    `faceSide_V7` ENUM('Cust','Face') NOT NULL DEFAULT 'Cust' COMMENT 'only v7 - enum values match with v8',\n    `faceShape_V7` ENUM('None','CrossCust','CrossFace','CrossBoth') NOT NULL DEFAULT 'None' COMMENT 'only v7 - enum values match with v8',\n    `fillPr_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillRiskMetric1_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillRiskMetric2_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillRiskMetric3_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillRiskMetric4_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillRiskMetric5_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillRiskMetric6_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillRiskMetric7_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillS08Dn_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillS06Up_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillS15Dn_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    `fillS15Up_V7` FLOAT NOT NULL DEFAULT 0 COMMENT 'only V7',\n    CONSTRAINT nonnegative_parentNumber CHECK(ASCII(parentNumber) < 56),\n    CONSTRAINT nonnegative_baseParentNumber CHECK(ASCII(baseParentNumber) < 56),\n    CONSTRAINT nonnegative_clOrdId CHECK(ASCII(clOrdId) < 56),\n    CONSTRAINT nonnegative_riskGroupId CHECK(ASCII(riskGroupId) < 56),\n    CONSTRAINT nonnegative_groupingCode CHECK(ASCII(groupingCode) < 56),\n    PRIMARY KEY USING HASH (`fillNumber`),\n    KEY `AccntIndex` (`accnt`) USING HASH,\n    KEY `ClientFirmIndex` (`clientFirm`) USING HASH\n) ENGINE=SRSE DEFAULT CHARSET=LATIN1 COMMENT='';\n\n"})})]})}function E(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,N.jsx)(r,{...e,children:(0,N.jsx)(s,{...e})}):s(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>t});var N=n(96540);const i={},T=N.createContext(i);function o(e){const r=N.useContext(T);return N.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),N.createElement(T.Provider,{value:r},e.children)}}}]);