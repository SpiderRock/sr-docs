"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[41451],{59888:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>E,frontMatter:()=>T,metadata:()=>L,toc:()=>s});var N=i(74848),n=i(28453);const T={title:"LiveSurfaceAtm"},r=void 0,L={id:"MessageSchemas/Schema/SRSE Products/SRAnalytics/LiveSurfaceAtm/LiveSurfaceAtm",title:"LiveSurfaceAtm",description:"V8 Message Definition",source:"@site/docs/MessageSchemas/Schema/SRSE Products/SRAnalytics/LiveSurfaceAtm/LiveSurfaceAtm.md",sourceDirName:"MessageSchemas/Schema/SRSE Products/SRAnalytics/LiveSurfaceAtm",slug:"/MessageSchemas/Schema/SRSE Products/SRAnalytics/LiveSurfaceAtm/",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRAnalytics/LiveSurfaceAtm/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"LiveSurfaceAtm"},sidebar:"messageSchemasSidebar",previous:{title:"LiveRevConQuote",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRAnalytics/LiveRevConQuote/"},next:{title:"LiveSurfaceCurve",permalink:"/docs/MessageSchemas/Schema/SRSE Products/SRAnalytics/LiveSurfaceCurve/"}},o={},s=[];function a(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,N.jsxs)(N.Fragment,{children:[(0,N.jsx)(t.p,{children:(0,N.jsx)(t.a,{href:"../../../Topics/analytics/LiveSurfaceAtm",children:"V8 Message Definition"})}),"\n",(0,N.jsx)(t.pre,{children:(0,N.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE `SRAnalytics`.`MsgLiveSurfaceAtm` (\n    `ekey_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None',\n    `ekey_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None',\n    `ekey_tk` VARCHAR(12) NOT NULL DEFAULT '',\n    `ekey_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 0,\n    `ekey_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0,\n    `ekey_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0,\n    `ticker_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'underlying stock key that this option expiration attaches to',\n    `ticker_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'underlying stock key that this option expiration attaches to',\n    `ticker_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'underlying stock key that this option expiration attaches to',\n    `fkey_at` ENUM('None','EQT','IDX','BND','CUR','COM','FUT','SYN','WAR','FLX','MUT','SPD','MM','MF','COIN','TOKEN','ANY') NOT NULL DEFAULT 'None' COMMENT 'future that this option expiration month written on (if any)',\n    `fkey_ts` ENUM('None','SR','NMS','CME','ICE','CFE','CBOT','NYMEX','COMEX','RUT','CIDX','ARCA','NYSE','OTC','NSDQ','MFQS','MIAX','DJI','CUSIP','ISIN','BXE','ESX','ANY','CXE','DXE','NXAM','NXBR','NXDUB','NXLS','NXLDN','NXML','NXMLT','NXOS','NXP','EUREX','CEDX','ICEFE') NOT NULL DEFAULT 'None' COMMENT 'future that this option expiration month written on (if any)',\n    `fkey_tk` VARCHAR(12) NOT NULL DEFAULT '' COMMENT 'future that this option expiration month written on (if any)',\n    `fkey_yr` SMALLINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'future that this option expiration month written on (if any)',\n    `fkey_mn` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'future that this option expiration month written on (if any)',\n    `fkey_dy` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'future that this option expiration month written on (if any)',\n    `uBid` DOUBLE NOT NULL DEFAULT 0 COMMENT 'underlier bid price',\n    `uAsk` DOUBLE NOT NULL DEFAULT 0 COMMENT 'underlier ask price',\n    `years` FLOAT NOT NULL DEFAULT 0 COMMENT 'time to expiration (in years)',\n    `rate` FLOAT NOT NULL DEFAULT 0 COMMENT 'interest rate',\n    `sdiv` FLOAT NOT NULL DEFAULT 0 COMMENT 'stock dividend (borrow rate)',\n    `ddiv` FLOAT NOT NULL DEFAULT 0 COMMENT 'present value of discrete dividend stream',\n    `exType` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'exercise type of the options used to compute this surface',\n    `modelType` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'option pricing model used for price calcs',\n    `earnCnt` FLOAT NOT NULL DEFAULT 0 COMMENT 'number of qualifying earnings events prior to expiration [can be fractional] (from StockEarningsCalendar)',\n    `earnCntAdj` FLOAT NOT NULL DEFAULT 0 COMMENT 'number of qualifying earnings events prior to expiration [adjusted] (from StockEarningsCalendar + LiveSurfaceTerm)',\n    `axisVolRT` FLOAT NOT NULL DEFAULT 0 COMMENT 'axis volatility x sqrt(years) (used to compute xAxis) [usually 4m atm vol]',\n    `axisFUPrc` FLOAT NOT NULL DEFAULT 0 COMMENT 'axis FwdUPrc (fwd underlying price used to compute xAxis)',\n    `moneynessType` ENUM('None','PctStd','LogStd','NormStd') NOT NULL DEFAULT 'None' COMMENT 'moneyness (xAxis) convention',\n    `underlierMode` ENUM('None','Actual','FrontMonth','UPrcAdj') NOT NULL DEFAULT 'None' COMMENT 'underlier pricing mode (None=use spot/stock market; FrontMonth=use front month future market * uPrcRatio; Actual = use actual underlier future market)',\n    `priceQuoteType` ENUM('None','Price','Vol') NOT NULL DEFAULT 'None' COMMENT 'Price or Vol',\n    `atmVol` FLOAT NOT NULL DEFAULT 0 COMMENT 'atm vol (xAxis = 0)',\n    `atmCen` FLOAT NOT NULL DEFAULT 0 COMMENT 'atm vol (xAxis = 0) (eMove/earnCntAdj censored)',\n    `atmVolHist` FLOAT NOT NULL DEFAULT 0 COMMENT 'historical realized volatility (includes eMoveHist x earnCntAdj adjustment).  Note that this is the default atmVol if no implied markets existed previous day.',\n    `atmCenHist` FLOAT NOT NULL DEFAULT 0 COMMENT 'censored (earnings events removed) historical realized volatility.  Trailing periods is 2x forward time to expiration.  From HistoricalVolatility(windowType=hlCen).mv_nnn',\n    `minAtmVol` FLOAT NOT NULL DEFAULT 0 COMMENT 'minimum estimated atm vol',\n    `maxAtmVol` FLOAT NOT NULL DEFAULT 0 COMMENT 'maximum estimated atm vol',\n    `eMove` FLOAT NOT NULL DEFAULT 0 COMMENT 'implied earnings move (from LiveSurfaceTerm)',\n    `eMoveHist` FLOAT NOT NULL DEFAULT 0 COMMENT 'historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist',\n    `atmMove` FLOAT NOT NULL DEFAULT 0 COMMENT 'fixed strike atm move from prior period',\n    `atmCenMove` FLOAT NOT NULL DEFAULT 0 COMMENT 'fixed strike atm (censored) move from prior period',\n    `atmPhi` FLOAT NOT NULL DEFAULT 0 COMMENT 'surface phi @ xAxis = 0',\n    `atmVega` FLOAT NOT NULL DEFAULT 0 COMMENT 'surface vega @ xAxis = 0',\n    `slope` FLOAT NOT NULL DEFAULT 0 COMMENT 'volatility surface slope (dVol / dXAxis) @ ATM (xAxis=0)',\n    `varSwapFV` FLOAT NOT NULL DEFAULT 0 COMMENT 'variance swap fair value (estimated by numerical integration over OTM price surface)',\n    `gridType` ENUM('None','Unused','SRCubic','SRCubic2','BSpline','BSpline2') NOT NULL DEFAULT 'None' COMMENT 'gridType defines D11 - U12 xAxis points + spline type',\n    `minXAxis` FLOAT NOT NULL DEFAULT 0 COMMENT 'minimum xAxis value; xAxis values to the left extrapolate horizontally',\n    `maxXAxis` FLOAT NOT NULL DEFAULT 0 COMMENT 'maximum xAxis value; xAxis values to the right extrapolate horizontally',\n    `minCurvValue` FLOAT NOT NULL DEFAULT 0 COMMENT 'minimum curvature (2nd derivative) of skew curve (can be negative if curve is not strictly convex)',\n    `minCurvXAxis` FLOAT NOT NULL DEFAULT 0 COMMENT 'xAxis of minimum curvature point',\n    `maxCurvValue` FLOAT NOT NULL DEFAULT 0 COMMENT 'maximum curvature (2nd derivative) of skew curve',\n    `maxCurvXAxis` FLOAT NOT NULL DEFAULT 0 COMMENT 'xAxis of maximum curvature point',\n    `skewMinX` FLOAT NOT NULL DEFAULT 0 COMMENT 'xAxis = (effStrike / effAxisFUPrc - 1.0) / axisVolRT; effStrike = strike * strikeRatio; effAxisFUPrc = axisFUPrc * symbolRatio',\n    `skewMinY` FLOAT NOT NULL DEFAULT 0 COMMENT 'skewMinX / skewMinY are the skew curve minimum point (usually a positive x value and a negative y value)',\n    `skewD11` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D11 point (volatility skew curve)',\n    `skewD10` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D10 point',\n    `skewD9` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D9 point',\n    `skewD8` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D8 point',\n    `skewD7` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D7 point',\n    `skewD6` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D6 point',\n    `skewD5` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D5 point',\n    `skewD4` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D4 point',\n    `skewD3` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D3 point',\n    `skewD2` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D2 point',\n    `skewD1` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ D1 point',\n    `skewC0` FLOAT NOT NULL DEFAULT 0 COMMENT 'central value (@xAxis = 0) [usually zero]',\n    `skewU1` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U1 point',\n    `skewU2` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U2 point',\n    `skewU3` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U3 point',\n    `skewU4` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U4 point',\n    `skewU5` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U5 point',\n    `skewU6` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U6 point',\n    `skewU7` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U7 point',\n    `skewU8` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U8 point',\n    `skewU9` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U9 point',\n    `skewU10` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U10 point',\n    `skewU11` FLOAT NOT NULL DEFAULT 0 COMMENT 'skew @ U11 point',\n    `sdivD3` FLOAT NOT NULL DEFAULT 0 COMMENT 'sdiv @ D3 point',\n    `sdivD2` FLOAT NOT NULL DEFAULT 0 COMMENT 'sdiv @ D2 point',\n    `sdivD1` FLOAT NOT NULL DEFAULT 0 COMMENT 'sdiv @ D1 point',\n    `sdivU1` FLOAT NOT NULL DEFAULT 0 COMMENT 'sdiv @ U1 point',\n    `sdivU2` FLOAT NOT NULL DEFAULT 0 COMMENT 'sdiv @ U2 point',\n    `sdivU3` FLOAT NOT NULL DEFAULT 0 COMMENT 'sdiv @ U3 point',\n    `pwidth` FLOAT NOT NULL DEFAULT 0 COMMENT 'minimum mkt premium width',\n    `vwidth` FLOAT NOT NULL DEFAULT 0 COMMENT 'minimum mkt volatility width',\n    `cCnt` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'num call strikes',\n    `pCnt` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'num put strikes',\n    `cBidMiss` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'number of call bid violations (surface outside the market)',\n    `cAskMiss` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'number of call ask violations (surface outside the market)',\n    `pBidMiss` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'number of put bid violations',\n    `pAskMiss` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'number of put ask violations',\n    `fitAvgErr` FLOAT NOT NULL DEFAULT 0 COMMENT 'surface fit R2 (mid-market values)',\n    `fitAvgAbsErr` FLOAT NOT NULL DEFAULT 0 COMMENT 'mean square error (mid-market values)',\n    `fitMaxPrcErr` FLOAT NOT NULL DEFAULT 0 COMMENT 'worst case surface premium violation',\n    `fitErrXX` FLOAT NOT NULL DEFAULT 0 COMMENT 'okey_xx of the option with the largest fit error in this expiration',\n    `fitErrCP` ENUM('Call','Put','Pair') NOT NULL DEFAULT 'Call' COMMENT 'okey_cp of the option with the largest fit error in this expiration',\n    `fitErrDe` FLOAT NOT NULL DEFAULT 0 COMMENT 'delta of fixErrXX',\n    `fitErrBid` FLOAT NOT NULL DEFAULT 0 COMMENT 'bid of the option with the largest fit error',\n    `fitErrAsk` FLOAT NOT NULL DEFAULT 0 COMMENT 'ask of the option with the largest fit error',\n    `fitErrPrc` FLOAT NOT NULL DEFAULT 0 COMMENT 'surface prc of the option with the largest fit error',\n    `fitErrVol` FLOAT NOT NULL DEFAULT 0 COMMENT 'surface vol of the option with the largest fit error',\n    `counter` INT NOT NULL DEFAULT 0 COMMENT 'message counter - number of surface fits today',\n    `skewCounter` INT NOT NULL DEFAULT 0 COMMENT 'skew surface fit counter',\n    `sdivCounter` INT NOT NULL DEFAULT 0 COMMENT 'sdiv surface fit counter',\n    `marketSession` ENUM('None','PreMkt','RegMkt','PostMkt','PreRegMkt','RegPostMkt','AllDay') NOT NULL DEFAULT 'None' COMMENT 'market session this surface is from',\n    `tradeableStatus` ENUM('None','OK','SurfaceErr','LowCCnt','LowPCnt','FitPrcErr','BidAskMiss','LowCounter','DefaultSkew','SessionMiss','BaseErr','SwitchDelay','WideMktV','WideMktP','WideUMkt','UWidthEma','CCntEma','PCntEma','VWidthEma','PWidthEma','Closed') NOT NULL DEFAULT 'None' COMMENT 'indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)',\n    `surfaceResult` ENUM('None','OK','EOD','Init','Cache','PrevDay','NullExpIdx','NoStrikes','NoBaseCurve','BadBootAtm','NoGoodStrikes','BadAtmVol','Bootstrap','NoUPrc','NoIVols','NoModelPts','ZeroYears','NoSimpleVol','OptMktNotOpn','NoBaseSurface','UPrcOffCnt','SkewKnotCnt','Exception','AxisError','CAskFit1Err','CAskFit2Err','PAskFit1Err','PAskFit2Err','CBidFit1Err','CBidFit2Err','PBidFit1Err','PBidFit2Err','CobsSampleErr','NoPrcFit','NumStrikes','CMidFitErr','PMidFitErr','StrikeCount','VolKnotCnt','InterpError','NoAtmStrike','CobsConvexFitErr','CobsMidFitErr','ProxyError','NoOptExp','Expired','NoUnderlier','NoBaseUnderlier','InvalidUPrc','ZeroUPrc','WideUMkt','StalePrcFit','NoPrcCurves','PriceError','ConvergeFail','NoUPrcRatio','NoSDivValue') NOT NULL DEFAULT 'None',\n    `timestamp` DATETIME(6) NOT NULL DEFAULT '1900-01-01 00:00:00.000000',\n    PRIMARY KEY USING HASH (`ekey_tk`,`ekey_yr`,`ekey_mn`,`ekey_dy`,`ekey_at`,`ekey_ts`)\n) ENGINE=SRSE DEFAULT CHARSET=LATIN1 COMMENT='';\n\n"})})]})}function E(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,N.jsx)(t,{...e,children:(0,N.jsx)(a,{...e})}):a(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>L});var N=i(96540);const n={},T=N.createContext(n);function r(e){const t=N.useContext(T);return N.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function L(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),N.createElement(T.Provider,{value:t},e.children)}}}]);