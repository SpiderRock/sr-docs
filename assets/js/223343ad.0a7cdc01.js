"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["50622"],{20611:function(e,r,t){t.r(r),t.d(r,{default:()=>j,frontMatter:()=>c,metadata:()=>s,assets:()=>x,toc:()=>h,contentTitle:()=>a});var s=JSON.parse('{"id":"MessageSchemas/Schema/Topics/parent-orders/SpdrMLegBrkrState","title":"SpdrMLegBrkrState","description":"SpdrMLegBrkrState records are published by execution engines and describe the current state of a broker that is managing a SpiderRock parent order.  These records include a description of the active child orders managed by the broker.  Records are updated whenever a child order changes and also at other times but are not completely live and may not always reflect current market data or limit levels for working orders.","source":"@site/versioned_docs/version-8.5.8.3/MessageSchemas/Schema/Topics/3985-parent-orders/SpdrMLegBrkrState.md","sourceDirName":"MessageSchemas/Schema/Topics/3985-parent-orders","slug":"/MessageSchemas/Schema/Topics/parent-orders/SpdrMLegBrkrState","permalink":"/docs/8.5.8.3/MessageSchemas/Schema/Topics/parent-orders/SpdrMLegBrkrState","draft":false,"unlisted":false,"tags":[],"version":"8.5.8.3","frontMatter":{"title":"SpdrMLegBrkrState"},"sidebar":"messageSchemasSidebar","previous":{"title":"SpdrMLegBrkrEvent","permalink":"/docs/8.5.8.3/MessageSchemas/Schema/Topics/parent-orders/SpdrMLegBrkrEvent"},"next":{"title":"SpdrParentBrkrDetail","permalink":"/docs/8.5.8.3/MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrDetail"}}'),d=t("52676"),i=t("91503"),l=t("71386"),n=t("9641");let c={title:"SpdrMLegBrkrState"},a="Schema: SpdrMLegBrkrState (ID: 4030)",x={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function o(e){let r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsxs)(r.h1,{id:"schema-spdrmlegbrkrstate-id-4030",children:["Schema: SpdrMLegBrkrState ",(0,d.jsx)("span",{className:"small-text",children:"(ID: 4030)"})]})}),"\n",(0,d.jsx)(r.p,{children:"SpdrMLegBrkrState records are published by execution engines and describe the current state of a broker that is managing a SpiderRock parent order.  These records include a description of the active child orders managed by the broker.  Records are updated whenever a child order changes and also at other times but are not completely live and may not always reflect current market data or limit levels for working orders."}),"\n",(0,d.jsx)(r.h3,{id:"metadata",children:"METADATA"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Attribute"}),(0,d.jsx)(r.th,{children:"Value"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Topic"}),(0,d.jsx)(r.td,{children:"3985-parent-orders"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"MLink Token"}),(0,d.jsx)(r.td,{children:"ClientTrading"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"SRSE Product"}),(0,d.jsx)(r.td,{children:"SRTrade"})]})]})]}),"\n",(0,d.jsx)("br",{}),"\n",(0,d.jsxs)(r.blockquote,{children:["\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Note:"})," The symbol ",(0,d.jsx)(r.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"body",children:"BODY"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"#"}),(0,d.jsx)(r.th,{children:"Field"}),(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Default Value"}),(0,d.jsx)(r.th,{children:"Comment"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"10="}),(0,d.jsx)(r.td,{children:"ticker"}),(0,d.jsx)(r.td,{children:"TickerKey"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"11="}),(0,d.jsx)(r.td,{children:"accnt"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"12="}),(0,d.jsx)(r.td,{children:"spdrSource"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrSource",children:"enum : SpdrSource"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"13="}),(0,d.jsx)(r.td,{children:"groupingCode"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"14="}),(0,d.jsx)(r.td,{children:"orderSide"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"15="}),(0,d.jsx)(r.td,{children:"clientFirm"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"SR client firm"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1037"}),(0,d.jsx)(r.td,{children:"engineName"}),(0,d.jsx)(r.td,{children:"string(32)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"execution engine"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"103"}),(0,d.jsx)(r.td,{children:"parentNumber"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"SPDR parent number (most recent/currently active)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"106"}),(0,d.jsx)(r.td,{children:"baseParentNumber"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1038"}),(0,d.jsx)(r.td,{children:"modifyNumber"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"most recent parent number affecting this order (Modify)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"109"}),(0,d.jsx)(r.td,{children:"altOrderId"}),(0,d.jsx)(r.td,{children:"string(24)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"alternate order ID (usually clOrdId from client)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"112"}),(0,d.jsx)(r.td,{children:"packageId"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"groups related order/brokers together (eg. Legger w/MLeg Parent)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"118"}),(0,d.jsx)(r.td,{children:"altAccnt"}),(0,d.jsx)(r.td,{children:"string(32)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:'alternate (client assigned) "long" account string (optional)'})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"121"}),(0,d.jsx)(r.td,{children:"altUserName"}),(0,d.jsx)(r.td,{children:"string(24)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"alternate (client assigned) user name (optional)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"124"}),(0,d.jsx)(r.td,{children:"stageType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrStageType",children:"enum : SpdrStageType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"parent is a staged order [ToolVisible]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1039"}),(0,d.jsx)(r.td,{children:"startType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/StartType",children:"enum : StartType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"127"}),(0,d.jsx)(r.td,{children:"isFlagged"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"broker state records is flagged for action (user alert only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1052"}),(0,d.jsx)(r.td,{children:"noticeNumber"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1054"}),(0,d.jsx)(r.td,{children:"execBrkrCode"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"execBrkrCode attached to parent order (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1057"}),(0,d.jsx)(r.td,{children:"spreadClass"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpreadClass",children:"enum : SpreadClass"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1043"}),(0,d.jsx)(r.td,{children:"spreadFlavor"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpreadFlavor",children:"enum : SpreadFlavor"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"133"}),(0,d.jsx)(r.td,{children:"stockSide"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"136"}),(0,d.jsx)(r.td,{children:"ssaleFlag"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"139"}),(0,d.jsx)(r.td,{children:"locateQuan"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"available locate quantity (if selling short) @ child order send time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"142"}),(0,d.jsx)(r.td,{children:"locateFirm"}),(0,d.jsx)(r.td,{children:"string(6)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"firm granting the locate (also locate firm used on street FIX orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"145"}),(0,d.jsx)(r.td,{children:"locatePool"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"locate pool @ firm granting the locate"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"148"}),(0,d.jsx)(r.td,{children:"stockShares"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of shares included (zero if none)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"151"}),(0,d.jsx)(r.td,{children:"stockLegId"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"154"}),(0,d.jsx)(r.td,{children:"stockFillQuan"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"157"}),(0,d.jsx)(r.td,{children:"stockAvgFillPrice"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"160"}),(0,d.jsx)(r.td,{children:"refUPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"163"}),(0,d.jsx)(r.td,{children:"liveUPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"166"}),(0,d.jsx)(r.td,{children:"uPriceFormat"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"underlier price format code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"169"}),(0,d.jsx)(r.td,{children:"stockCpx"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"172"}),(0,d.jsx)(r.td,{children:"stockCsz"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] cumulative share represented at best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1154"}),(0,d.jsx)(r.td,{children:"stockCex"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] bit mask of all exchanges where we are representing this order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"178"}),(0,d.jsx)(r.td,{children:"numLegs"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of valid legs below"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"181"}),(0,d.jsx)(r.td,{children:"secKey1"}),(0,d.jsx)(r.td,{children:"OptionKey"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"leg #1"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"184"}),(0,d.jsx)(r.td,{children:"secType1"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"187"}),(0,d.jsx)(r.td,{children:"ratio1"}),(0,d.jsx)(r.td,{children:"ushort"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"190"}),(0,d.jsx)(r.td,{children:"side1"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"193"}),(0,d.jsx)(r.td,{children:"positionType1"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"196"}),(0,d.jsx)(r.td,{children:"legId1"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"199"}),(0,d.jsx)(r.td,{children:"fillQuan1"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"202"}),(0,d.jsx)(r.td,{children:"avgFillPrice1"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"205"}),(0,d.jsx)(r.td,{children:"vega1"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"208"}),(0,d.jsx)(r.td,{children:"refUPrc1"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"211"}),(0,d.jsx)(r.td,{children:"refDelta1"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"214"}),(0,d.jsx)(r.td,{children:"refEarnCnt1"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"217"}),(0,d.jsx)(r.td,{children:"liveUPrc1"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"220"}),(0,d.jsx)(r.td,{children:"priceFormat1"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"option price format code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"223"}),(0,d.jsx)(r.td,{children:"legCpx1"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"226"}),(0,d.jsx)(r.td,{children:"legCsz1"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] cumulative share represented at best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1155"}),(0,d.jsx)(r.td,{children:"legCex1"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] bit mask of all exchanges where we are representing this order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"232"}),(0,d.jsx)(r.td,{children:"secKey2"}),(0,d.jsx)(r.td,{children:"OptionKey"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"leg #2"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"235"}),(0,d.jsx)(r.td,{children:"secType2"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"238"}),(0,d.jsx)(r.td,{children:"ratio2"}),(0,d.jsx)(r.td,{children:"ushort"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"241"}),(0,d.jsx)(r.td,{children:"side2"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"244"}),(0,d.jsx)(r.td,{children:"positionType2"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"247"}),(0,d.jsx)(r.td,{children:"legId2"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"250"}),(0,d.jsx)(r.td,{children:"fillQuan2"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"253"}),(0,d.jsx)(r.td,{children:"avgFillPrice2"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"256"}),(0,d.jsx)(r.td,{children:"vega2"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"259"}),(0,d.jsx)(r.td,{children:"refUPrc2"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"262"}),(0,d.jsx)(r.td,{children:"refDelta2"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"265"}),(0,d.jsx)(r.td,{children:"refEarnCnt2"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"268"}),(0,d.jsx)(r.td,{children:"liveUPrc2"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"271"}),(0,d.jsx)(r.td,{children:"priceFormat2"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"option price format code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"274"}),(0,d.jsx)(r.td,{children:"legCpx2"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"277"}),(0,d.jsx)(r.td,{children:"legCsz2"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] cumulative share represented at best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1156"}),(0,d.jsx)(r.td,{children:"legCex2"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] bit mask of all exchanges where we are representing this order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"283"}),(0,d.jsx)(r.td,{children:"secKey3"}),(0,d.jsx)(r.td,{children:"OptionKey"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"leg #3"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"286"}),(0,d.jsx)(r.td,{children:"secType3"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"289"}),(0,d.jsx)(r.td,{children:"ratio3"}),(0,d.jsx)(r.td,{children:"ushort"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"292"}),(0,d.jsx)(r.td,{children:"side3"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"295"}),(0,d.jsx)(r.td,{children:"positionType3"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"298"}),(0,d.jsx)(r.td,{children:"legId3"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"301"}),(0,d.jsx)(r.td,{children:"fillQuan3"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"304"}),(0,d.jsx)(r.td,{children:"avgFillPrice3"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"307"}),(0,d.jsx)(r.td,{children:"vega3"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"310"}),(0,d.jsx)(r.td,{children:"refUPrc3"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"313"}),(0,d.jsx)(r.td,{children:"refDelta3"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"316"}),(0,d.jsx)(r.td,{children:"refEarnCnt3"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"319"}),(0,d.jsx)(r.td,{children:"liveUPrc3"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"322"}),(0,d.jsx)(r.td,{children:"priceFormat3"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"option price format code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"325"}),(0,d.jsx)(r.td,{children:"legCpx3"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"328"}),(0,d.jsx)(r.td,{children:"legCsz3"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] cumulative share represented at best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1157"}),(0,d.jsx)(r.td,{children:"legCex3"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] bit mask of all exchanges where we are representing this order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"334"}),(0,d.jsx)(r.td,{children:"secKey4"}),(0,d.jsx)(r.td,{children:"OptionKey"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"leg #4"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"337"}),(0,d.jsx)(r.td,{children:"secType4"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"340"}),(0,d.jsx)(r.td,{children:"ratio4"}),(0,d.jsx)(r.td,{children:"ushort"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"343"}),(0,d.jsx)(r.td,{children:"side4"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"346"}),(0,d.jsx)(r.td,{children:"positionType4"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"349"}),(0,d.jsx)(r.td,{children:"legId4"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"352"}),(0,d.jsx)(r.td,{children:"fillQuan4"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"355"}),(0,d.jsx)(r.td,{children:"avgFillPrice4"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"358"}),(0,d.jsx)(r.td,{children:"vega4"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"361"}),(0,d.jsx)(r.td,{children:"refUPrc4"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"364"}),(0,d.jsx)(r.td,{children:"refDelta4"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"367"}),(0,d.jsx)(r.td,{children:"refEarnCnt4"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"370"}),(0,d.jsx)(r.td,{children:"liveUPrc4"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"373"}),(0,d.jsx)(r.td,{children:"priceFormat4"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"option price format code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"376"}),(0,d.jsx)(r.td,{children:"legCpx4"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"379"}),(0,d.jsx)(r.td,{children:"legCsz4"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] cumulative share represented at best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1158"}),(0,d.jsx)(r.td,{children:"legCex4"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] bit mask of all exchanges where we are representing this order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"385"}),(0,d.jsx)(r.td,{children:"secKey5"}),(0,d.jsx)(r.td,{children:"OptionKey"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"leg #5"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"388"}),(0,d.jsx)(r.td,{children:"secType5"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"391"}),(0,d.jsx)(r.td,{children:"ratio5"}),(0,d.jsx)(r.td,{children:"ushort"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"394"}),(0,d.jsx)(r.td,{children:"side5"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"397"}),(0,d.jsx)(r.td,{children:"positionType5"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"400"}),(0,d.jsx)(r.td,{children:"legId5"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"403"}),(0,d.jsx)(r.td,{children:"fillQuan5"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"406"}),(0,d.jsx)(r.td,{children:"avgFillPrice5"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"409"}),(0,d.jsx)(r.td,{children:"vega5"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"412"}),(0,d.jsx)(r.td,{children:"refUPrc5"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"415"}),(0,d.jsx)(r.td,{children:"refDelta5"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"418"}),(0,d.jsx)(r.td,{children:"refEarnCnt5"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"421"}),(0,d.jsx)(r.td,{children:"liveUPrc5"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"424"}),(0,d.jsx)(r.td,{children:"priceFormat5"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"option price format code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"427"}),(0,d.jsx)(r.td,{children:"legCpx5"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"430"}),(0,d.jsx)(r.td,{children:"legCsz5"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] cumulative share represented at best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1159"}),(0,d.jsx)(r.td,{children:"legCex5"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] bit mask of all exchanges where we are representing this order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"436"}),(0,d.jsx)(r.td,{children:"secKey6"}),(0,d.jsx)(r.td,{children:"OptionKey"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"leg #6"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"439"}),(0,d.jsx)(r.td,{children:"secType6"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"442"}),(0,d.jsx)(r.td,{children:"ratio6"}),(0,d.jsx)(r.td,{children:"ushort"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"445"}),(0,d.jsx)(r.td,{children:"side6"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"448"}),(0,d.jsx)(r.td,{children:"positionType6"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"451"}),(0,d.jsx)(r.td,{children:"legId6"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"454"}),(0,d.jsx)(r.td,{children:"fillQuan6"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"457"}),(0,d.jsx)(r.td,{children:"avgFillPrice6"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"460"}),(0,d.jsx)(r.td,{children:"vega6"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"463"}),(0,d.jsx)(r.td,{children:"refUPrc6"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"466"}),(0,d.jsx)(r.td,{children:"refDelta6"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"469"}),(0,d.jsx)(r.td,{children:"refEarnCnt6"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"472"}),(0,d.jsx)(r.td,{children:"liveUPrc6"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"475"}),(0,d.jsx)(r.td,{children:"priceFormat6"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"option price format code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"478"}),(0,d.jsx)(r.td,{children:"legCpx6"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"481"}),(0,d.jsx)(r.td,{children:"legCsz6"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] cumulative share represented at best price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1160"}),(0,d.jsx)(r.td,{children:"legCex6"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[child] bit mask of all exchanges where we are representing this order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"487"}),(0,d.jsx)(r.td,{children:"mlegVega"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net vega per spread"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"490"}),(0,d.jsx)(r.td,{children:"mlegWtVega"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net wt vega per spread"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"493"}),(0,d.jsx)(r.td,{children:"mlegDelta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net delta per spread"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"496"}),(0,d.jsx)(r.td,{children:"mlegGamma"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net gamma per spread"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"499"}),(0,d.jsx)(r.td,{children:"mlegTheta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net theta per spread"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"502"}),(0,d.jsx)(r.td,{children:"description"}),(0,d.jsx)(r.td,{children:"string(24)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"user defined"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"505"}),(0,d.jsx)(r.td,{children:"orderSize"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"order size of most recent parent order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"508"}),(0,d.jsx)(r.td,{children:"orderActiveSize"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"total activated size (total size released for execution) (-2 = all available size)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"511"}),(0,d.jsx)(r.td,{children:"leavesQuantity"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"current child order leaves quantity (quantity actively working in the market;all child orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"514"}),(0,d.jsx)(r.td,{children:"spdrOrderStatus"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrOrderStatus",children:"enum : SpdrOrderStatus"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"517"}),(0,d.jsx)(r.td,{children:"spdrCloseReason"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrCloseReason",children:"enum : SpdrCloseReason"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"520"}),(0,d.jsx)(r.td,{children:"spdrRejectReason"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrRejectReason",children:"enum : SpdrRejectReason"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"523"}),(0,d.jsx)(r.td,{children:"spdrCloseDetailTxt"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"526"}),(0,d.jsx)(r.td,{children:"openLegs"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"529"}),(0,d.jsx)(r.td,{children:"cumSquareQty"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"cumulative spread quantity filled (all legs received)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"532"}),(0,d.jsx)(r.td,{children:"avgSquarePrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"535"}),(0,d.jsx)(r.td,{children:"cumPartialQty"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"cumulative spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"538"}),(0,d.jsx)(r.td,{children:"fillVega"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net vega filled"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"541"}),(0,d.jsx)(r.td,{children:"fillWtVega"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net wt vega filled"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"544"}),(0,d.jsx)(r.td,{children:"fillDelta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net delta filled"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"547"}),(0,d.jsx)(r.td,{children:"fillDDelta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net $delta filled"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"550"}),(0,d.jsx)(r.td,{children:"fillGamma"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net gamma filled"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"553"}),(0,d.jsx)(r.td,{children:"fillTheta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"net theta filled"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"556"}),(0,d.jsx)(r.td,{children:"lastFillDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"559"}),(0,d.jsx)(r.td,{children:"riskLimitSize"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"risk limit size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"562"}),(0,d.jsx)(r.td,{children:"riskLimitDesc"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrRisk",children:"enum : SpdrRisk"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reason for size reduction"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1044"}),(0,d.jsx)(r.td,{children:"riskLimitLevel"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrRiskLevel",children:"enum : SpdrRiskLevel"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"risk limit level responsible for reduction"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"565"}),(0,d.jsx)(r.td,{children:"maxProgress"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/MaxProgress",children:"enum : MaxProgress"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"maximum point of progress for most recent parent order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"568"}),(0,d.jsx)(r.td,{children:"maxProgressDetail"}),(0,d.jsx)(r.td,{children:"string(48)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"additional detail on point of maximum progress"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"571"}),(0,d.jsx)(r.td,{children:"maxProgressTime"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"time of last max progress advance"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"574"}),(0,d.jsx)(r.td,{children:"algoState"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/AlgoState",children:"enum : AlgoState"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[enum] current state of order handler (maker)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"577"}),(0,d.jsx)(r.td,{children:"algoCounter"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of times order checked by algo handler (note: most checks result in no action)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"580"}),(0,d.jsx)(r.td,{children:"makeState"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/AlgoState",children:"enum : AlgoState"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[enum] current state of make handler (maker)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"583"}),(0,d.jsx)(r.td,{children:"makeCounter"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of times order checked by make algo handler (note: most checks result in no action)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"586"}),(0,d.jsx)(r.td,{children:"mktRespState"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/MktRespState",children:"enum : MktRespState"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[enum] current state of response handler (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"589"}),(0,d.jsx)(r.td,{children:"mktRespCounter"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of times order checked by market response handler (note: most checks result in no action)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"592"}),(0,d.jsx)(r.td,{children:"brokerState"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BrokerState",children:"enum : BrokerState"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"broker monitor state"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"595"}),(0,d.jsx)(r.td,{children:"brokerCounter"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of times order checked by broker monitor (note: most checks result in no action)]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"598"}),(0,d.jsx)(r.td,{children:"spdrMktState"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrMarketState",children:"enum : SpdrMarketState"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[enum] market state"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"601"}),(0,d.jsx)(r.td,{children:"spdrBrokerStatus"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrBrokerStatus",children:"enum : SpdrBrokerStatus"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"604"}),(0,d.jsx)(r.td,{children:"progressRuleDetail"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Twap/Vwap progress detail"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"607"}),(0,d.jsx)(r.td,{children:"lastChildRejectDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"last child order reject dttm (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"610"}),(0,d.jsx)(r.td,{children:"lastChildRejectText"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"last child order reject reason/text (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"613"}),(0,d.jsx)(r.td,{children:"riskGroupId"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"autohedge risk group"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"616"}),(0,d.jsx)(r.td,{children:"triggerGroupId"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"WaitTrigger group Id"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"619"}),(0,d.jsx)(r.td,{children:"hedgeGroupingCode"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"autohedge risk group"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"622"}),(0,d.jsx)(r.td,{children:"autoHedge"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/AutoHedge",children:"enum : AutoHedge"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"625"}),(0,d.jsx)(r.td,{children:"hedgeInstrument"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/HedgeInst",children:"enum : HedgeInst"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"auto-hedge instrument (from parent order)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"628"}),(0,d.jsx)(r.td,{children:"hedgeSecKey"}),(0,d.jsx)(r.td,{children:"ExpiryKey"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"auto-hedge sec key (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"631"}),(0,d.jsx)(r.td,{children:"hedgeSecType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"auto-hedge sec type (Stock or Future)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"634"}),(0,d.jsx)(r.td,{children:"hedgeBetaRatio"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"auto-hedge ratio [from parent order (if supplied) or computed by SR]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"637"}),(0,d.jsx)(r.td,{children:"hedgeScope"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/HedgeScope",children:"enum : HedgeScope"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"hedge group scope [RiskGroup or Accnt]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1055"}),(0,d.jsx)(r.td,{children:"externHedgeExDest"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"643"}),(0,d.jsx)(r.td,{children:"externHedgeParams"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1058"}),(0,d.jsx)(r.td,{children:"hedgeFillUMarkLmtPrc"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"set a price limit on the autohedge order based on the most recent option fillUMark"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"646"}),(0,d.jsx)(r.td,{children:"bestWayPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"current leg market nbbo (at time of record publish)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"649"}),(0,d.jsx)(r.td,{children:"wrstWayPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"current leg market nbbo ask (at time of record publish)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"652"}),(0,d.jsx)(r.td,{children:"bestWaySz"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"current leg market nbbo cum bid size (at time of record publish)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"655"}),(0,d.jsx)(r.td,{children:"wrstWaySz"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"current leg market nbbo cum ask size (at time of record publish)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"658"}),(0,d.jsx)(r.td,{children:"surfacePrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"SR spread surface price @ record publish"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"661"}),(0,d.jsx)(r.td,{children:"surfaceVol"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"664"}),(0,d.jsx)(r.td,{children:"surfaceUPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"667"}),(0,d.jsx)(r.td,{children:"limitPrice"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"spread limit price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1053"}),(0,d.jsx)(r.td,{children:"limitRefUPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"670"}),(0,d.jsx)(r.td,{children:"limitErr"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/LimitError",children:"enum : LimitError"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"limit price error code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"673"}),(0,d.jsx)(r.td,{children:"makeLimitPrice"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"676"}),(0,d.jsx)(r.td,{children:"takeLimitPrice"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"679"}),(0,d.jsx)(r.td,{children:"cxlUPrcRange"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/UPrcCxl",children:"enum : UPrcCxl"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"cancel spdr order if/when outside stock price range"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"682"}),(0,d.jsx)(r.td,{children:"minUBid"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Used in conjunction with minMaxType & maxUAsk. When set, implements a lower bound on the underlying price and will either suspend or cancel an order when violated."})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"685"}),(0,d.jsx)(r.td,{children:"maxUAsk"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Used in conjunction with minMaxType & minUBid. When set, implements an upper bound on the underlying price and will either suspend or cancel an order when violated."})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"688"}),(0,d.jsx)(r.td,{children:"minMaxType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/MinMaxType",children:"enum : MinMaxType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"691"}),(0,d.jsx)(r.td,{children:"leadSide"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"for legged orders, which side to lead with.  (optional, None ok)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"694"}),(0,d.jsx)(r.td,{children:"maxCompletionSlippage"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"maximum price slippage to complete an open basket or a cross auction (face side slippage)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"697"}),(0,d.jsx)(r.td,{children:"orderRefPremium"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference premium (mleg orders only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"700"}),(0,d.jsx)(r.td,{children:"strategy"}),(0,d.jsx)(r.td,{children:"string(36)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"parent order strategy (description only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"703"}),(0,d.jsx)(r.td,{children:"userName"}),(0,d.jsx)(r.td,{children:"string(24)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"user that entered the most recent parent order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1161"}),(0,d.jsx)(r.td,{children:"visibleInSV"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"allow order to be visible in SV (do not use for high volume of orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"709"}),(0,d.jsx)(r.td,{children:"spdrComment"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"712"}),(0,d.jsx)(r.td,{children:"takeReachRule"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ReachRule",children:"enum : ReachRule"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"715"}),(0,d.jsx)(r.td,{children:"maxExposureSize"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"maximum simultaneous cumulative child order public size exposure (-2 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 2]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"718"}),(0,d.jsx)(r.td,{children:"numMakeExchanges"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of exchanges (2 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available."})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"721"}),(0,d.jsx)(r.td,{children:"publicSize"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PublicSizeHandling",children:"enum : PublicSizeHandling"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"public order size handling"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"724"}),(0,d.jsx)(r.td,{children:"progressRule"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ProgressRule",children:"enum : ProgressRule"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"727"}),(0,d.jsx)(r.td,{children:"progressSliceCnt"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of progress slices to use (default = 4 or 8) [max 20]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"730"}),(0,d.jsx)(r.td,{children:"progressExposeTime"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"733"}),(0,d.jsx)(r.td,{children:"maxChildOrders"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1162"}),(0,d.jsx)(r.td,{children:"exchMask"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"eligible exchanges (0 = all)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1045"}),(0,d.jsx)(r.td,{children:"marketSession"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/MarketSession",children:"enum : MarketSession"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"742"}),(0,d.jsx)(r.td,{children:"startDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Order Start Date/Time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"745"}),(0,d.jsx)(r.td,{children:"orderDuration"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[optional] (number of seconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1046"}),(0,d.jsx)(r.td,{children:"activeDuration"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[optional] (number of seconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"748"}),(0,d.jsx)(r.td,{children:"goodTillDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[optional] (default: 2099-02-02)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1047"}),(0,d.jsx)(r.td,{children:"expireDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"expected order expiration dttm"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"751"}),(0,d.jsx)(r.td,{children:"parentOrderHandling"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ParentOrderHandling",children:"enum : ParentOrderHandling"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"754"}),(0,d.jsx)(r.td,{children:"parentBalanceHandling"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ParentBalanceHandling",children:"enum : ParentBalanceHandling"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"757"}),(0,d.jsx)(r.td,{children:"blockVisibility"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BlockVisibility",children:"enum : BlockVisibility"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"760"}),(0,d.jsx)(r.td,{children:"orderLimitType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrLimitType",children:"enum : SpdrLimitType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"761"}),(0,d.jsx)(r.td,{children:"orderVolLimit"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Applies if LimitType = Vol[]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"763"}),(0,d.jsx)(r.td,{children:"orderPrcLimit"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Applies if LimitType = Prc[]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"766"}),(0,d.jsx)(r.td,{children:"orderRefUPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference uPrc (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"769"}),(0,d.jsx)(r.td,{children:"orderRefDe"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference delta (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"772"}),(0,d.jsx)(r.td,{children:"orderRefGa"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"reference gamma (PrcDe orders)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"775"}),(0,d.jsx)(r.td,{children:"orderPrcOffset"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"default=0"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"778"}),(0,d.jsx)(r.td,{children:"takeLimitClass"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"781"}),(0,d.jsx)(r.td,{children:"takeAlphaType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Applies if limitClass = Probability"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"784"}),(0,d.jsx)(r.td,{children:"takeAlphaFactor"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[-2,+2] ProbLimit = MAX(alphaProbability, ProbAvg + AlphaFactor * ProbStd) [if AlphaType = Relative]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"787"}),(0,d.jsx)(r.td,{children:"takeAlphaProbability"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"ProbLimit = alphaProbability [if AlphaType = Static]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"790"}),(0,d.jsx)(r.td,{children:"takeSurfPrcOffset"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"default=0"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"793"}),(0,d.jsx)(r.td,{children:"takeSurfVolOffset"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"default=0"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"796"}),(0,d.jsx)(r.td,{children:"takeSurfWidOffset"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"default=0"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"799"}),(0,d.jsx)(r.td,{children:"makeLimitClass"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"802"}),(0,d.jsx)(r.td,{children:"makeAlphaType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"Applies if limitClass = Probability"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"805"}),(0,d.jsx)(r.td,{children:"makeAlphaFactor"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"[-2,+2] ProbLimit = MAX(alphaProbability, ProbAvg + AlphaFactor * ProbStd) [if AlphaType = Relative]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"808"}),(0,d.jsx)(r.td,{children:"makeAlphaProbability"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"ProbLimit = alphaProbability [if AlphaType = Static]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"811"}),(0,d.jsx)(r.td,{children:"makeSurfPrcOffset"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"default=0"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"814"}),(0,d.jsx)(r.td,{children:"makeSurfVolOffset"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"default=0"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"817"}),(0,d.jsx)(r.td,{children:"makeSurfWidOffset"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"default=0"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"820"}),(0,d.jsx)(r.td,{children:"orderRefEventMult"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"823"}),(0,d.jsx)(r.td,{children:"orderRefEventDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"826"}),(0,d.jsx)(r.td,{children:"mlegProbLimit"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"live prob limit"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"829"}),(0,d.jsx)(r.td,{children:"mlegSurfOffset"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"live surface offset (in premium)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1056"}),(0,d.jsx)(r.td,{children:"externExDest"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"835"}),(0,d.jsx)(r.td,{children:"orderDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"order entry date/time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"838"}),(0,d.jsx)(r.td,{children:"minSurfVol"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"(minimum) SR spread surface vol [vega weighted] while parent order was working"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"841"}),(0,d.jsx)(r.td,{children:"maxSurfVol"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"(maximum) SR spread surface vol [vega weighted] while parent order was working"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"844"}),(0,d.jsx)(r.td,{children:"minSurfPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"(minimum) SR spread surface price while parent order was working"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"847"}),(0,d.jsx)(r.td,{children:"maxSurfPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"(maximum) SR spread surface price while parent order was working"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"850"}),(0,d.jsx)(r.td,{children:"minSurfUPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"(minimum) SR spread surface uPrc while parent order was working"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"853"}),(0,d.jsx)(r.td,{children:"maxSurfUPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"(maximum) SR spread surface uPrc while parent order was working"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"856"}),(0,d.jsx)(r.td,{children:"minQteWidth"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"minimum quote width during active order window"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"859"}),(0,d.jsx)(r.td,{children:"avgQteWidth"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"average quote width (during active order window)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"862"}),(0,d.jsx)(r.td,{children:"cntQteWidth"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"865"}),(0,d.jsx)(r.td,{children:"arriveBid"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"868"}),(0,d.jsx)(r.td,{children:"arriveAsk"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"871"}),(0,d.jsx)(r.td,{children:"totalSeconds"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of seconds that the parent order was active"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"874"}),(0,d.jsx)(r.td,{children:"workingSeconds"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of seconds with one or more working child orders in an exchange order book"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"877"}),(0,d.jsx)(r.td,{children:"prtActiveCnt"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"total print events while parent order was active"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"880"}),(0,d.jsx)(r.td,{children:"prtQtyActive"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"total quantity printed while parent order was active"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"883"}),(0,d.jsx)(r.td,{children:"cumExchFee"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"cumulative fill exch fee"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"886"}),(0,d.jsx)(r.td,{children:"cumM10Pnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"889"}),(0,d.jsx)(r.td,{children:"cumArrivalPnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"892"}),(0,d.jsx)(r.td,{children:"uPrcDrift"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"underlier drift (since parent order start)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"895"}),(0,d.jsx)(r.td,{children:"sVolDrift"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"surface vol drift (since parent order start)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"946"}),(0,d.jsx)(r.td,{children:"maxGrpDayDDeltaLn"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"949"}),(0,d.jsx)(r.td,{children:"maxGrpDayDDeltaSh"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"979"}),(0,d.jsx)(r.td,{children:"maxGrpDayContractsLn"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day opt contracts long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"982"}),(0,d.jsx)(r.td,{children:"maxGrpDayContractsSh"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day opt contracts short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"985"}),(0,d.jsx)(r.td,{children:"maxGrpDayContractsAbs"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day opt contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"955"}),(0,d.jsx)(r.td,{children:"maxGrpDayVegaLn"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"958"}),(0,d.jsx)(r.td,{children:"maxGrpDayVegaSh"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"961"}),(0,d.jsx)(r.td,{children:"maxGrpDayVegaAbs"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"964"}),(0,d.jsx)(r.td,{children:"grpDayVegaRatio"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"1.0"}),(0,d.jsx)(r.td,{children:"target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1048"}),(0,d.jsx)(r.td,{children:"maxGrpDayRMetric1Ln"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1049"}),(0,d.jsx)(r.td,{children:"maxGrpDayRMetric1Sh"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1050"}),(0,d.jsx)(r.td,{children:"maxGrpDayRMetric1Abs"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsx)(r.td,{children:"max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1051"}),(0,d.jsx)(r.td,{children:"grpDayRMetric1Ratio"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"1.0"}),(0,d.jsx)(r.td,{children:"target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1152"}),(0,d.jsx)(r.td,{children:"refRMetric1Src"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/RMetricSource",children:"enum : RMetricSource"})}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1153"}),(0,d.jsx)(r.td,{children:"orderRefRMetric1"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"user supplied RMetric1 value (used in RiskGroupID risk controls) [netRMetric1 = sum(fillQty * orderRefRMetric1 * underlierPerCn)]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1000"}),(0,d.jsx)(r.td,{children:"cpx1"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1003"}),(0,d.jsx)(r.td,{children:"csz1"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"cumulative size represented at this price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1163"}),(0,d.jsx)(r.td,{children:"cex1"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"bit mask of all exchanges where we are representing this order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1009"}),(0,d.jsx)(r.td,{children:"cpx2"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1012"}),(0,d.jsx)(r.td,{children:"csz2"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"cumulative size represented at this price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1164"}),(0,d.jsx)(r.td,{children:"cex2"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"bit mask of all exchanges where we are representing this order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1018"}),(0,d.jsx)(r.td,{children:"cMore"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1021"}),(0,d.jsx)(r.td,{children:"numNewOrders"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of new child orders"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1024"}),(0,d.jsx)(r.td,{children:"numParentLimits"}),(0,d.jsx)(r.td,{children:"ushort"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of parent limit messages received for this broker"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1027"}),(0,d.jsx)(r.td,{children:"userData1"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"user supplied additional detail (255 char);supplied via FIX or SRSE when entering order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1030"}),(0,d.jsx)(r.td,{children:"userData2"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"user supplied additional detail (255 char);supplied via FIX or SRSE when entering order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1033"}),(0,d.jsx)(r.td,{children:"numUpdates"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"number of record updates (cumulative for the day)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"1036"}),(0,d.jsx)(r.td,{children:"timestamp"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{})]})]})]}),"\n",(0,d.jsx)(r.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,d.jsxs)(l.Z,{children:[(0,d.jsx)(n.Z,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrMLegBrkrState'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,d.jsx)(n.Z,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrMLegBrkrState'\n\n"})})})]}),"\n",(0,d.jsx)(r.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,d.jsxs)(l.Z,{children:[(0,d.jsx)(n.Z,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrMLegBrkrState\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'engineName|parentNumber|baseParentNumber|modifyNumber|altOrderId|packageId|altAccnt|altUserName|stageType|startType|isFlagged|noticeNumber|execBrkrCode|spreadClass|spreadFlavor|stockSide|ssaleFlag|locateQuan|locateFirm|locatePool|stockShares|stockLegId|stockFillQuan|stockAvgFillPrice|refUPrc|liveUPrc|uPriceFormat|stockCpx|stockCsz|stockCex|numLegs|secKey1|secType1|ratio1|side1|positionType1|legId1|fillQuan1|avgFillPrice1|vega1|refUPrc1|refDelta1|refEarnCnt1|liveUPrc1|priceFormat1|legCpx1|legCsz1|legCex1|secKey2|secType2|ratio2|side2|positionType2|legId2|fillQuan2|avgFillPrice2|vega2|refUPrc2|refDelta2|refEarnCnt2|liveUPrc2|priceFormat2|legCpx2|legCsz2|legCex2|secKey3|secType3|ratio3|side3|positionType3|legId3|fillQuan3|avgFillPrice3|vega3|refUPrc3|refDelta3|refEarnCnt3|liveUPrc3|priceFormat3|legCpx3|legCsz3|legCex3|secKey4|secType4|ratio4|side4|positionType4|legId4|fillQuan4|avgFillPrice4|vega4|refUPrc4|refDelta4|refEarnCnt4|liveUPrc4|priceFormat4|legCpx4|legCsz4|legCex4|secKey5|secType5|ratio5|side5|positionType5|legId5|fillQuan5|avgFillPrice5|vega5|refUPrc5|refDelta5|refEarnCnt5|liveUPrc5|priceFormat5|legCpx5|legCsz5|legCex5|secKey6|secType6|ratio6|side6|positionType6|legId6|fillQuan6|avgFillPrice6|vega6|refUPrc6|refDelta6|refEarnCnt6|liveUPrc6|priceFormat6|legCpx6|legCsz6|legCex6|mlegVega|mlegWtVega|mlegDelta|mlegGamma|mlegTheta|description|orderSize|orderActiveSize|leavesQuantity|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrCloseDetailTxt|openLegs|cumSquareQty|avgSquarePrc|cumPartialQty|fillVega|fillWtVega|fillDelta|fillDDelta|fillGamma|fillTheta|lastFillDttm|riskLimitSize|riskLimitDesc|riskLimitLevel|maxProgress|maxProgressDetail|maxProgressTime|algoState|algoCounter|makeState|makeCounter|mktRespState|mktRespCounter|brokerState|brokerCounter|spdrMktState|spdrBrokerStatus|progressRuleDetail|lastChildRejectDttm|lastChildRejectText|riskGroupId|triggerGroupId|hedgeGroupingCode|autoHedge|hedgeInstrument|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|externHedgeExDest|externHedgeParams|hedgeFillUMarkLmtPrc|bestWayPrc|wrstWayPrc|bestWaySz|wrstWaySz|surfacePrc|surfaceVol|surfaceUPrc|limitPrice|limitRefUPrc|limitErr|makeLimitPrice|takeLimitPrice|cxlUPrcRange|minUBid|maxUAsk|minMaxType|leadSide|maxCompletionSlippage|orderRefPremium|strategy|userName|visibleInSV|spdrComment|takeReachRule|maxExposureSize|numMakeExchanges|publicSize|progressRule|progressSliceCnt|progressExposeTime|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|expireDttm|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|orderVolLimit|orderPrcLimit|orderRefUPrc|orderRefDe|orderRefGa|orderPrcOffset|takeLimitClass|takeAlphaType|takeAlphaFactor|takeAlphaProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidOffset|makeLimitClass|makeAlphaType|makeAlphaFactor|makeAlphaProbability|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidOffset|orderRefEventMult|orderRefEventDttm|mlegProbLimit|mlegSurfOffset|externExDest|orderDttm|minSurfVol|maxSurfVol|minSurfPrc|maxSurfPrc|minSurfUPrc|maxSurfUPrc|minQteWidth|avgQteWidth|cntQteWidth|arriveBid|arriveAsk|totalSeconds|workingSeconds|prtActiveCnt|prtQtyActive|cumExchFee|cumM10Pnl|cumArrivalPnl|uPrcDrift|sVolDrift|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|refRMetric1Src|orderRefRMetric1|cpx1|csz1|cex1|cpx2|csz2|cex2|cMore|numNewOrders|numParentLimits|userData1|userData2|numUpdates|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,d.jsx)(n.Z,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrMLegBrkrState' \\\n--data-urlencode 'view=engineName|parentNumber|baseParentNumber|modifyNumber|altOrderId|packageId|altAccnt|altUserName|stageType|startType|isFlagged|noticeNumber|execBrkrCode|spreadClass|spreadFlavor|stockSide|ssaleFlag|locateQuan|locateFirm|locatePool|stockShares|stockLegId|stockFillQuan|stockAvgFillPrice|refUPrc|liveUPrc|uPriceFormat|stockCpx|stockCsz|stockCex|numLegs|secKey1|secType1|ratio1|side1|positionType1|legId1|fillQuan1|avgFillPrice1|vega1|refUPrc1|refDelta1|refEarnCnt1|liveUPrc1|priceFormat1|legCpx1|legCsz1|legCex1|secKey2|secType2|ratio2|side2|positionType2|legId2|fillQuan2|avgFillPrice2|vega2|refUPrc2|refDelta2|refEarnCnt2|liveUPrc2|priceFormat2|legCpx2|legCsz2|legCex2|secKey3|secType3|ratio3|side3|positionType3|legId3|fillQuan3|avgFillPrice3|vega3|refUPrc3|refDelta3|refEarnCnt3|liveUPrc3|priceFormat3|legCpx3|legCsz3|legCex3|secKey4|secType4|ratio4|side4|positionType4|legId4|fillQuan4|avgFillPrice4|vega4|refUPrc4|refDelta4|refEarnCnt4|liveUPrc4|priceFormat4|legCpx4|legCsz4|legCex4|secKey5|secType5|ratio5|side5|positionType5|legId5|fillQuan5|avgFillPrice5|vega5|refUPrc5|refDelta5|refEarnCnt5|liveUPrc5|priceFormat5|legCpx5|legCsz5|legCex5|secKey6|secType6|ratio6|side6|positionType6|legId6|fillQuan6|avgFillPrice6|vega6|refUPrc6|refDelta6|refEarnCnt6|liveUPrc6|priceFormat6|legCpx6|legCsz6|legCex6|mlegVega|mlegWtVega|mlegDelta|mlegGamma|mlegTheta|description|orderSize|orderActiveSize|leavesQuantity|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrCloseDetailTxt|openLegs|cumSquareQty|avgSquarePrc|cumPartialQty|fillVega|fillWtVega|fillDelta|fillDDelta|fillGamma|fillTheta|lastFillDttm|riskLimitSize|riskLimitDesc|riskLimitLevel|maxProgress|maxProgressDetail|maxProgressTime|algoState|algoCounter|makeState|makeCounter|mktRespState|mktRespCounter|brokerState|brokerCounter|spdrMktState|spdrBrokerStatus|progressRuleDetail|lastChildRejectDttm|lastChildRejectText|riskGroupId|triggerGroupId|hedgeGroupingCode|autoHedge|hedgeInstrument|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|externHedgeExDest|externHedgeParams|hedgeFillUMarkLmtPrc|bestWayPrc|wrstWayPrc|bestWaySz|wrstWaySz|surfacePrc|surfaceVol|surfaceUPrc|limitPrice|limitRefUPrc|limitErr|makeLimitPrice|takeLimitPrice|cxlUPrcRange|minUBid|maxUAsk|minMaxType|leadSide|maxCompletionSlippage|orderRefPremium|strategy|userName|visibleInSV|spdrComment|takeReachRule|maxExposureSize|numMakeExchanges|publicSize|progressRule|progressSliceCnt|progressExposeTime|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|expireDttm|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|orderVolLimit|orderPrcLimit|orderRefUPrc|orderRefDe|orderRefGa|orderPrcOffset|takeLimitClass|takeAlphaType|takeAlphaFactor|takeAlphaProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidOffset|makeLimitClass|makeAlphaType|makeAlphaFactor|makeAlphaProbability|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidOffset|orderRefEventMult|orderRefEventDttm|mlegProbLimit|mlegSurfOffset|externExDest|orderDttm|minSurfVol|maxSurfVol|minSurfPrc|maxSurfPrc|minSurfUPrc|maxSurfUPrc|minQteWidth|avgQteWidth|cntQteWidth|arriveBid|arriveAsk|totalSeconds|workingSeconds|prtActiveCnt|prtQtyActive|cumExchFee|cumM10Pnl|cumArrivalPnl|uPrcDrift|sVolDrift|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|refRMetric1Src|orderRefRMetric1|cpx1|csz1|cex1|cpx2|csz2|cex2|cMore|numNewOrders|numParentLimits|userData1|userData2|numUpdates|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,d.jsx)(r.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,d.jsxs)(l.Z,{children:[(0,d.jsx)(n.Z,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrMLegBrkrState\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'engineName|parentNumber|baseParentNumber|modifyNumber|altOrderId|packageId|altAccnt|altUserName|stageType|startType|isFlagged|noticeNumber|execBrkrCode|spreadClass|spreadFlavor|stockSide|ssaleFlag|locateQuan|locateFirm|locatePool|stockShares|stockLegId|stockFillQuan|stockAvgFillPrice|refUPrc|liveUPrc|uPriceFormat|stockCpx|stockCsz|stockCex|numLegs|secKey1|secType1|ratio1|side1|positionType1|legId1|fillQuan1|avgFillPrice1|vega1|refUPrc1|refDelta1|refEarnCnt1|liveUPrc1|priceFormat1|legCpx1|legCsz1|legCex1|secKey2|secType2|ratio2|side2|positionType2|legId2|fillQuan2|avgFillPrice2|vega2|refUPrc2|refDelta2|refEarnCnt2|liveUPrc2|priceFormat2|legCpx2|legCsz2|legCex2|secKey3|secType3|ratio3|side3|positionType3|legId3|fillQuan3|avgFillPrice3|vega3|refUPrc3|refDelta3|refEarnCnt3|liveUPrc3|priceFormat3|legCpx3|legCsz3|legCex3|secKey4|secType4|ratio4|side4|positionType4|legId4|fillQuan4|avgFillPrice4|vega4|refUPrc4|refDelta4|refEarnCnt4|liveUPrc4|priceFormat4|legCpx4|legCsz4|legCex4|secKey5|secType5|ratio5|side5|positionType5|legId5|fillQuan5|avgFillPrice5|vega5|refUPrc5|refDelta5|refEarnCnt5|liveUPrc5|priceFormat5|legCpx5|legCsz5|legCex5|secKey6|secType6|ratio6|side6|positionType6|legId6|fillQuan6|avgFillPrice6|vega6|refUPrc6|refDelta6|refEarnCnt6|liveUPrc6|priceFormat6|legCpx6|legCsz6|legCex6|mlegVega|mlegWtVega|mlegDelta|mlegGamma|mlegTheta|description|orderSize|orderActiveSize|leavesQuantity|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrCloseDetailTxt|openLegs|cumSquareQty|avgSquarePrc|cumPartialQty|fillVega|fillWtVega|fillDelta|fillDDelta|fillGamma|fillTheta|lastFillDttm|riskLimitSize|riskLimitDesc|riskLimitLevel|maxProgress|maxProgressDetail|maxProgressTime|algoState|algoCounter|makeState|makeCounter|mktRespState|mktRespCounter|brokerState|brokerCounter|spdrMktState|spdrBrokerStatus|progressRuleDetail|lastChildRejectDttm|lastChildRejectText|riskGroupId|triggerGroupId|hedgeGroupingCode|autoHedge|hedgeInstrument|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|externHedgeExDest|externHedgeParams|hedgeFillUMarkLmtPrc|bestWayPrc|wrstWayPrc|bestWaySz|wrstWaySz|surfacePrc|surfaceVol|surfaceUPrc|limitPrice|limitRefUPrc|limitErr|makeLimitPrice|takeLimitPrice|cxlUPrcRange|minUBid|maxUAsk|minMaxType|leadSide|maxCompletionSlippage|orderRefPremium|strategy|userName|visibleInSV|spdrComment|takeReachRule|maxExposureSize|numMakeExchanges|publicSize|progressRule|progressSliceCnt|progressExposeTime|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|expireDttm|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|orderVolLimit|orderPrcLimit|orderRefUPrc|orderRefDe|orderRefGa|orderPrcOffset|takeLimitClass|takeAlphaType|takeAlphaFactor|takeAlphaProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidOffset|makeLimitClass|makeAlphaType|makeAlphaFactor|makeAlphaProbability|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidOffset|orderRefEventMult|orderRefEventDttm|mlegProbLimit|mlegSurfOffset|externExDest|orderDttm|minSurfVol|maxSurfVol|minSurfPrc|maxSurfPrc|minSurfUPrc|maxSurfUPrc|minQteWidth|avgQteWidth|cntQteWidth|arriveBid|arriveAsk|totalSeconds|workingSeconds|prtActiveCnt|prtQtyActive|cumExchFee|cumM10Pnl|cumArrivalPnl|uPrcDrift|sVolDrift|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|refRMetric1Src|orderRefRMetric1|cpx1|csz1|cex1|cpx2|csz2|cex2|cMore|numNewOrders|numParentLimits|userData1|userData2|numUpdates|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'engineName:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,d.jsx)(n.Z,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrMLegBrkrState' \\\n--data-urlencode 'view=engineName|parentNumber|baseParentNumber|modifyNumber|altOrderId|packageId|altAccnt|altUserName|stageType|startType|isFlagged|noticeNumber|execBrkrCode|spreadClass|spreadFlavor|stockSide|ssaleFlag|locateQuan|locateFirm|locatePool|stockShares|stockLegId|stockFillQuan|stockAvgFillPrice|refUPrc|liveUPrc|uPriceFormat|stockCpx|stockCsz|stockCex|numLegs|secKey1|secType1|ratio1|side1|positionType1|legId1|fillQuan1|avgFillPrice1|vega1|refUPrc1|refDelta1|refEarnCnt1|liveUPrc1|priceFormat1|legCpx1|legCsz1|legCex1|secKey2|secType2|ratio2|side2|positionType2|legId2|fillQuan2|avgFillPrice2|vega2|refUPrc2|refDelta2|refEarnCnt2|liveUPrc2|priceFormat2|legCpx2|legCsz2|legCex2|secKey3|secType3|ratio3|side3|positionType3|legId3|fillQuan3|avgFillPrice3|vega3|refUPrc3|refDelta3|refEarnCnt3|liveUPrc3|priceFormat3|legCpx3|legCsz3|legCex3|secKey4|secType4|ratio4|side4|positionType4|legId4|fillQuan4|avgFillPrice4|vega4|refUPrc4|refDelta4|refEarnCnt4|liveUPrc4|priceFormat4|legCpx4|legCsz4|legCex4|secKey5|secType5|ratio5|side5|positionType5|legId5|fillQuan5|avgFillPrice5|vega5|refUPrc5|refDelta5|refEarnCnt5|liveUPrc5|priceFormat5|legCpx5|legCsz5|legCex5|secKey6|secType6|ratio6|side6|positionType6|legId6|fillQuan6|avgFillPrice6|vega6|refUPrc6|refDelta6|refEarnCnt6|liveUPrc6|priceFormat6|legCpx6|legCsz6|legCex6|mlegVega|mlegWtVega|mlegDelta|mlegGamma|mlegTheta|description|orderSize|orderActiveSize|leavesQuantity|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrCloseDetailTxt|openLegs|cumSquareQty|avgSquarePrc|cumPartialQty|fillVega|fillWtVega|fillDelta|fillDDelta|fillGamma|fillTheta|lastFillDttm|riskLimitSize|riskLimitDesc|riskLimitLevel|maxProgress|maxProgressDetail|maxProgressTime|algoState|algoCounter|makeState|makeCounter|mktRespState|mktRespCounter|brokerState|brokerCounter|spdrMktState|spdrBrokerStatus|progressRuleDetail|lastChildRejectDttm|lastChildRejectText|riskGroupId|triggerGroupId|hedgeGroupingCode|autoHedge|hedgeInstrument|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|externHedgeExDest|externHedgeParams|hedgeFillUMarkLmtPrc|bestWayPrc|wrstWayPrc|bestWaySz|wrstWaySz|surfacePrc|surfaceVol|surfaceUPrc|limitPrice|limitRefUPrc|limitErr|makeLimitPrice|takeLimitPrice|cxlUPrcRange|minUBid|maxUAsk|minMaxType|leadSide|maxCompletionSlippage|orderRefPremium|strategy|userName|visibleInSV|spdrComment|takeReachRule|maxExposureSize|numMakeExchanges|publicSize|progressRule|progressSliceCnt|progressExposeTime|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|expireDttm|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|orderVolLimit|orderPrcLimit|orderRefUPrc|orderRefDe|orderRefGa|orderPrcOffset|takeLimitClass|takeAlphaType|takeAlphaFactor|takeAlphaProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidOffset|makeLimitClass|makeAlphaType|makeAlphaFactor|makeAlphaProbability|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidOffset|orderRefEventMult|orderRefEventDttm|mlegProbLimit|mlegSurfOffset|externExDest|orderDttm|minSurfVol|maxSurfVol|minSurfPrc|maxSurfPrc|minSurfUPrc|maxSurfUPrc|minQteWidth|avgQteWidth|cntQteWidth|arriveBid|arriveAsk|totalSeconds|workingSeconds|prtActiveCnt|prtQtyActive|cumExchFee|cumM10Pnl|cumArrivalPnl|uPrcDrift|sVolDrift|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|refRMetric1Src|orderRefRMetric1|cpx1|csz1|cex1|cpx2|csz2|cex2|cMore|numNewOrders|numParentLimits|userData1|userData2|numUpdates|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=engineName:ASC'\n"})})})]}),"\n",(0,d.jsx)(r.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,d.jsxs)(l.Z,{children:[(0,d.jsx)(n.Z,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrMLegBrkrState\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'engineName|parentNumber|baseParentNumber|modifyNumber|altOrderId|packageId|altAccnt|altUserName|stageType|startType|isFlagged|noticeNumber|execBrkrCode|spreadClass|spreadFlavor|stockSide|ssaleFlag|locateQuan|locateFirm|locatePool|stockShares|stockLegId|stockFillQuan|stockAvgFillPrice|refUPrc|liveUPrc|uPriceFormat|stockCpx|stockCsz|stockCex|numLegs|secKey1|secType1|ratio1|side1|positionType1|legId1|fillQuan1|avgFillPrice1|vega1|refUPrc1|refDelta1|refEarnCnt1|liveUPrc1|priceFormat1|legCpx1|legCsz1|legCex1|secKey2|secType2|ratio2|side2|positionType2|legId2|fillQuan2|avgFillPrice2|vega2|refUPrc2|refDelta2|refEarnCnt2|liveUPrc2|priceFormat2|legCpx2|legCsz2|legCex2|secKey3|secType3|ratio3|side3|positionType3|legId3|fillQuan3|avgFillPrice3|vega3|refUPrc3|refDelta3|refEarnCnt3|liveUPrc3|priceFormat3|legCpx3|legCsz3|legCex3|secKey4|secType4|ratio4|side4|positionType4|legId4|fillQuan4|avgFillPrice4|vega4|refUPrc4|refDelta4|refEarnCnt4|liveUPrc4|priceFormat4|legCpx4|legCsz4|legCex4|secKey5|secType5|ratio5|side5|positionType5|legId5|fillQuan5|avgFillPrice5|vega5|refUPrc5|refDelta5|refEarnCnt5|liveUPrc5|priceFormat5|legCpx5|legCsz5|legCex5|secKey6|secType6|ratio6|side6|positionType6|legId6|fillQuan6|avgFillPrice6|vega6|refUPrc6|refDelta6|refEarnCnt6|liveUPrc6|priceFormat6|legCpx6|legCsz6|legCex6|mlegVega|mlegWtVega|mlegDelta|mlegGamma|mlegTheta|description|orderSize|orderActiveSize|leavesQuantity|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrCloseDetailTxt|openLegs|cumSquareQty|avgSquarePrc|cumPartialQty|fillVega|fillWtVega|fillDelta|fillDDelta|fillGamma|fillTheta|lastFillDttm|riskLimitSize|riskLimitDesc|riskLimitLevel|maxProgress|maxProgressDetail|maxProgressTime|algoState|algoCounter|makeState|makeCounter|mktRespState|mktRespCounter|brokerState|brokerCounter|spdrMktState|spdrBrokerStatus|progressRuleDetail|lastChildRejectDttm|lastChildRejectText|riskGroupId|triggerGroupId|hedgeGroupingCode|autoHedge|hedgeInstrument|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|externHedgeExDest|externHedgeParams|hedgeFillUMarkLmtPrc|bestWayPrc|wrstWayPrc|bestWaySz|wrstWaySz|surfacePrc|surfaceVol|surfaceUPrc|limitPrice|limitRefUPrc|limitErr|makeLimitPrice|takeLimitPrice|cxlUPrcRange|minUBid|maxUAsk|minMaxType|leadSide|maxCompletionSlippage|orderRefPremium|strategy|userName|visibleInSV|spdrComment|takeReachRule|maxExposureSize|numMakeExchanges|publicSize|progressRule|progressSliceCnt|progressExposeTime|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|expireDttm|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|orderVolLimit|orderPrcLimit|orderRefUPrc|orderRefDe|orderRefGa|orderPrcOffset|takeLimitClass|takeAlphaType|takeAlphaFactor|takeAlphaProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidOffset|makeLimitClass|makeAlphaType|makeAlphaFactor|makeAlphaProbability|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidOffset|orderRefEventMult|orderRefEventDttm|mlegProbLimit|mlegSurfOffset|externExDest|orderDttm|minSurfVol|maxSurfVol|minSurfPrc|maxSurfPrc|minSurfUPrc|maxSurfUPrc|minQteWidth|avgQteWidth|cntQteWidth|arriveBid|arriveAsk|totalSeconds|workingSeconds|prtActiveCnt|prtQtyActive|cumExchFee|cumM10Pnl|cumArrivalPnl|uPrcDrift|sVolDrift|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|refRMetric1Src|orderRefRMetric1|cpx1|csz1|cex1|cpx2|csz2|cex2|cMore|numNewOrders|numParentLimits|userData1|userData2|numUpdates|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'stageType|startType|isFlagged|spreadClass|spreadFlavor|stockSide|ssaleFlag|uPriceFormat|secType1|side1|positionType1|priceFormat1|secType2|side2|positionType2|priceFormat2|secType3|side3|positionType3|priceFormat3|secType4|side4|positionType4|priceFormat4|secType5|side5|positionType5|priceFormat5|secType6|side6|positionType6|priceFormat6|spdrOrderStatus|spdrCloseReason|spdrRejectReason|riskLimitDesc|riskLimitLevel|maxProgress|algoState|makeState|mktRespState|brokerState|spdrMktState|spdrBrokerStatus|autoHedge|hedgeInstrument|hedgeSecType|hedgeScope|hedgeFillUMarkLmtPrc|limitErr|cxlUPrcRange|minMaxType|leadSide|visibleInSV|takeReachRule|publicSize|progressRule|marketSession|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|takeAlphaType|makeLimitClass|makeAlphaType|refRMetric1Src\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,d.jsx)(n.Z,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrMLegBrkrState' \\\n--data-urlencode 'measure=engineName|parentNumber|baseParentNumber|modifyNumber|altOrderId|packageId|altAccnt|altUserName|stageType|startType|isFlagged|noticeNumber|execBrkrCode|spreadClass|spreadFlavor|stockSide|ssaleFlag|locateQuan|locateFirm|locatePool|stockShares|stockLegId|stockFillQuan|stockAvgFillPrice|refUPrc|liveUPrc|uPriceFormat|stockCpx|stockCsz|stockCex|numLegs|secKey1|secType1|ratio1|side1|positionType1|legId1|fillQuan1|avgFillPrice1|vega1|refUPrc1|refDelta1|refEarnCnt1|liveUPrc1|priceFormat1|legCpx1|legCsz1|legCex1|secKey2|secType2|ratio2|side2|positionType2|legId2|fillQuan2|avgFillPrice2|vega2|refUPrc2|refDelta2|refEarnCnt2|liveUPrc2|priceFormat2|legCpx2|legCsz2|legCex2|secKey3|secType3|ratio3|side3|positionType3|legId3|fillQuan3|avgFillPrice3|vega3|refUPrc3|refDelta3|refEarnCnt3|liveUPrc3|priceFormat3|legCpx3|legCsz3|legCex3|secKey4|secType4|ratio4|side4|positionType4|legId4|fillQuan4|avgFillPrice4|vega4|refUPrc4|refDelta4|refEarnCnt4|liveUPrc4|priceFormat4|legCpx4|legCsz4|legCex4|secKey5|secType5|ratio5|side5|positionType5|legId5|fillQuan5|avgFillPrice5|vega5|refUPrc5|refDelta5|refEarnCnt5|liveUPrc5|priceFormat5|legCpx5|legCsz5|legCex5|secKey6|secType6|ratio6|side6|positionType6|legId6|fillQuan6|avgFillPrice6|vega6|refUPrc6|refDelta6|refEarnCnt6|liveUPrc6|priceFormat6|legCpx6|legCsz6|legCex6|mlegVega|mlegWtVega|mlegDelta|mlegGamma|mlegTheta|description|orderSize|orderActiveSize|leavesQuantity|spdrOrderStatus|spdrCloseReason|spdrRejectReason|spdrCloseDetailTxt|openLegs|cumSquareQty|avgSquarePrc|cumPartialQty|fillVega|fillWtVega|fillDelta|fillDDelta|fillGamma|fillTheta|lastFillDttm|riskLimitSize|riskLimitDesc|riskLimitLevel|maxProgress|maxProgressDetail|maxProgressTime|algoState|algoCounter|makeState|makeCounter|mktRespState|mktRespCounter|brokerState|brokerCounter|spdrMktState|spdrBrokerStatus|progressRuleDetail|lastChildRejectDttm|lastChildRejectText|riskGroupId|triggerGroupId|hedgeGroupingCode|autoHedge|hedgeInstrument|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|externHedgeExDest|externHedgeParams|hedgeFillUMarkLmtPrc|bestWayPrc|wrstWayPrc|bestWaySz|wrstWaySz|surfacePrc|surfaceVol|surfaceUPrc|limitPrice|limitRefUPrc|limitErr|makeLimitPrice|takeLimitPrice|cxlUPrcRange|minUBid|maxUAsk|minMaxType|leadSide|maxCompletionSlippage|orderRefPremium|strategy|userName|visibleInSV|spdrComment|takeReachRule|maxExposureSize|numMakeExchanges|publicSize|progressRule|progressSliceCnt|progressExposeTime|maxChildOrders|exchMask|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|expireDttm|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|orderVolLimit|orderPrcLimit|orderRefUPrc|orderRefDe|orderRefGa|orderPrcOffset|takeLimitClass|takeAlphaType|takeAlphaFactor|takeAlphaProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidOffset|makeLimitClass|makeAlphaType|makeAlphaFactor|makeAlphaProbability|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidOffset|orderRefEventMult|orderRefEventDttm|mlegProbLimit|mlegSurfOffset|externExDest|orderDttm|minSurfVol|maxSurfVol|minSurfPrc|maxSurfPrc|minSurfUPrc|maxSurfUPrc|minQteWidth|avgQteWidth|cntQteWidth|arriveBid|arriveAsk|totalSeconds|workingSeconds|prtActiveCnt|prtQtyActive|cumExchFee|cumM10Pnl|cumArrivalPnl|uPrcDrift|sVolDrift|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|refRMetric1Src|orderRefRMetric1|cpx1|csz1|cex1|cpx2|csz2|cex2|cMore|numNewOrders|numParentLimits|userData1|userData2|numUpdates|timestamp' \\\n--data-urlencode 'group=stageType|startType|isFlagged|spreadClass|spreadFlavor|stockSide|ssaleFlag|uPriceFormat|secType1|side1|positionType1|priceFormat1|secType2|side2|positionType2|priceFormat2|secType3|side3|positionType3|priceFormat3|secType4|side4|positionType4|priceFormat4|secType5|side5|positionType5|priceFormat5|secType6|side6|positionType6|priceFormat6|spdrOrderStatus|spdrCloseReason|spdrRejectReason|riskLimitDesc|riskLimitLevel|maxProgress|algoState|makeState|mktRespState|brokerState|spdrMktState|spdrBrokerStatus|autoHedge|hedgeInstrument|hedgeSecType|hedgeScope|hedgeFillUMarkLmtPrc|limitErr|cxlUPrcRange|minMaxType|leadSide|visibleInSV|takeReachRule|publicSize|progressRule|marketSession|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|takeAlphaType|makeLimitClass|makeAlphaType|refRMetric1Src' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,d.jsx)(r.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,d.jsxs)(l.Z,{children:[(0,d.jsx)(n.Z,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrMLegBrkrState\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,d.jsx)(n.Z,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrMLegBrkrState' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function j(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}},9641:function(e,r,t){t.d(r,{Z:()=>i});var s=t("52676");t("75271");var d=t("54461");function i(e){let{children:r,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,d.Z)("tabItem_SSzl",i),hidden:t,children:r})}},71386:function(e,r,t){t.d(r,{Z:()=>f});var s=t("52676"),d=t("75271"),i=t("54461"),l=t("52289"),n=t("3225"),c=t("42834"),a=t("40578"),x=t("35834"),h=t("79616");function o(e){return d.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||d.isValidElement(e)&&function(e){let{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function j(e){let{value:r,tabValues:t}=e;return t.some(e=>e.value===r)}var m=t("44537");function p(e){let{className:r,block:t,selectedValue:d,selectValue:n,tabValues:c}=e,a=[],{blockElementScrollPositionUntilNextRender:x}=(0,l.o5)(),h=e=>{let r=e.currentTarget,t=c[a.indexOf(r)].value;t!==d&&(x(r),n(t))},o=e=>{let r=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let t=a.indexOf(e.currentTarget)+1;r=a[t]??a[0];break}case"ArrowLeft":{let t=a.indexOf(e.currentTarget)-1;r=a[t]??a[a.length-1]}}r?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},r),children:c.map(e=>{let{value:r,label:t,attributes:l}=e;return(0,s.jsx)("li",{role:"tab",tabIndex:d===r?0:-1,"aria-selected":d===r,ref:e=>a.push(e),onKeyDown:o,onClick:h,...l,className:(0,i.Z)("tabs__item","tabItem_aitt",l?.className,{"tabs__item--active":d===r}),children:t??r},r)})})}function u(e){let{lazy:r,children:t,selectedValue:l}=e,n=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){let e=n.find(e=>e.props.value===l);return e?(0,d.cloneElement)(e,{className:(0,i.Z)("margin-top--md",e.props.className)}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:n.map((e,r)=>(0,d.cloneElement)(e,{key:r,hidden:e.props.value!==l}))})}function g(e){let r=function(e){let{defaultValue:r,queryString:t=!1,groupId:s}=e,i=function(e){let{values:r,children:t}=e;return(0,d.useMemo)(()=>{let e=r??o(t).map(e=>{let{props:{value:r,label:t,attributes:s,default:d}}=e;return{value:r,label:t,attributes:s,default:d}});return!function(e){let r=(0,x.lx)(e,(e,r)=>e.value===r.value);if(r.length>0)throw Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[r,t])}(e),[l,m]=(0,d.useState)(()=>(function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!j({value:r,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}let s=t.find(e=>e.default)??t[0];if(!s)throw Error("Unexpected error: 0 tabValues");return s.value})({defaultValue:r,tabValues:i})),[p,u]=function(e){let{queryString:r=!1,groupId:t}=e,s=(0,n.k6)(),i=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,a._X)(i),(0,d.useCallback)(e=>{if(!i)return;let r=new URLSearchParams(s.location.search);r.set(i,e),s.replace({...s.location,search:r.toString()})},[i,s])]}({queryString:t,groupId:s}),[g,f]=function(e){let{groupId:r}=e,t=r?`docusaurus.tab.${r}`:null,[s,i]=(0,h.Nk)(t);return[s,(0,d.useCallback)(e=>{t&&i.set(e)},[t,i])]}({groupId:s}),y=(()=>{let e=p??g;return j({value:e,tabValues:i})?e:null})();return(0,c.Z)(()=>{y&&m(y)},[y]),{selectedValue:l,selectValue:(0,d.useCallback)(e=>{if(!j({value:e,tabValues:i}))throw Error(`Can't select invalid tab value=${e}`);m(e),u(e),f(e)},[u,f,i]),tabValues:i}}(e);return(0,s.jsxs)("div",{className:(0,i.Z)("tabs-container","tabList_ArS0"),children:[(0,s.jsx)(p,{...r,...e}),(0,s.jsx)(u,{...r,...e})]})}function f(e){let r=(0,m.Z)();return(0,s.jsx)(g,{...e,children:o(e.children)},String(r))}},91503:function(e,r,t){t.d(r,{Z:function(){return n},a:function(){return l}});var s=t(75271);let d={},i=s.createContext(d);function l(e){let r=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function n(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);