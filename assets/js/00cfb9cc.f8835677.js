"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[27469],{14864:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>m,contentTitle:()=>a,default:()=>o,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var l=t(74848),i=t(28453),d=t(11470),n=t(19365);const s={title:"ParentOrderGatewayExt"},a="Schema: ParentOrderGatewayExt (ID: 5185)",c={id:"MessageSchemas/Schema/Topics/srse-gateway/ParentOrderGatewayExt",title:"ParentOrderGatewayExt",description:"Records inserted, updated, or replaced into the ParentOrderGatewayExt table are validated and then converted to SpdrParentOrder records and forwarded to the appropriate execution engine for futher processing.  Parent orders can be inserted as either active/ready or in a wait start mode that requires subsequent release.See the SpiderRock Execution Engine concept guide for more details.",source:"@site/versioned_docs/version-8.4.10.4/MessageSchemas/Schema/Topics/5120-srse-gateway/ParentOrderGatewayExt.md",sourceDirName:"MessageSchemas/Schema/Topics/5120-srse-gateway",slug:"/MessageSchemas/Schema/Topics/srse-gateway/ParentOrderGatewayExt",permalink:"/docs/8.4.10.4/MessageSchemas/Schema/Topics/srse-gateway/ParentOrderGatewayExt",draft:!1,unlisted:!1,tags:[],version:"8.4.10.4",frontMatter:{title:"ParentOrderGatewayExt"},sidebar:"messageSchemasSidebar",previous:{title:"ParentOrderGateway",permalink:"/docs/8.4.10.4/MessageSchemas/Schema/Topics/srse-gateway/ParentOrderGateway"},next:{title:"SecDefRequestGateway",permalink:"/docs/8.4.10.4/MessageSchemas/Schema/Topics/srse-gateway/SecDefRequestGateway"}},m={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"REPEATING FIELDS",id:"repeating-fields",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function x(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(r.h1,{id:"schema-parentordergatewayext-id-5185",children:["Schema: ParentOrderGatewayExt ",(0,l.jsx)("span",{className:"small-text",children:"(ID: 5185)"})]}),"\n",(0,l.jsxs)(r.p,{children:["Records inserted, updated, or replaced into the ParentOrderGatewayExt table are validated and then converted to SpdrParentOrder records and forwarded to the appropriate execution engine for futher processing.  Parent orders can be inserted as either active/ready or in a wait start mode that requires subsequent release.",(0,l.jsx)("br",{}),(0,l.jsx)("br",{}),"See the SpiderRock Execution Engine concept guide for more details."]}),"\n",(0,l.jsx)(r.h3,{id:"metadata",children:"METADATA"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{children:"Attribute"}),(0,l.jsx)(r.th,{children:"Value"})]})}),(0,l.jsxs)(r.tbody,{children:[(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"Topic"}),(0,l.jsx)(r.td,{children:"5120-srse-gateway"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"MLink Token"}),(0,l.jsx)(r.td,{children:"Internal"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"SRSE Product"}),(0,l.jsx)(r.td,{children:"SRTrade"})]})]})]}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"Note:"})," The symbol ",(0,l.jsx)(r.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"body",children:"BODY"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{children:"#"}),(0,l.jsx)(r.th,{children:"Field"}),(0,l.jsx)(r.th,{children:"Type"}),(0,l.jsx)(r.th,{children:"Comment"})]})}),(0,l.jsxs)(r.tbody,{children:[(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"10="}),(0,l.jsx)(r.td,{children:"secKey"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"SR SecKey"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"11="}),(0,l.jsx)(r.td,{children:"secType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{children:"SR SecKeyType (Stock, Future, or Option)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"12="}),(0,l.jsx)(r.td,{children:"accnt"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"SR Account (default = primary account associated with SRSE login)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"13="}),(0,l.jsx)(r.td,{children:"orderSide"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{children:"Parent Order Size"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"14="}),(0,l.jsx)(r.td,{children:"groupingCode"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"Parent Grouping Code"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"15="}),(0,l.jsx)(r.td,{children:"clientFirm"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"103"}),(0,l.jsx)(r.td,{children:"spdrActionType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrActionType",children:"enum : SpdrActionType"})}),(0,l.jsx)(r.td,{children:"[Add (new order), AddReplace (add or replace order), Cancel (cxl existing), Replace (update existing only), Release (modify order active size)]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"106"}),(0,l.jsx)(r.td,{children:"altOrderId"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"Alternate client order ID.  This order ID will be copied to all execution reports."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"109"}),(0,l.jsx)(r.td,{children:"altAutoHedgeId"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"alternate order ID for child autohedge orders (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"112"}),(0,l.jsx)(r.td,{children:"altAccnt"}),(0,l.jsx)(r.td,{children:"string(32)"}),(0,l.jsx)(r.td,{children:'alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]'})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"115"}),(0,l.jsx)(r.td,{children:"altUserName"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"alternate (client assigned) user name (optional) [used to map between client and SR account strings]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"118"}),(0,l.jsx)(r.td,{children:"accntRouteCode"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"accntRoute acronym"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"918"}),(0,l.jsx)(r.td,{children:"execBrkrCode"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"919"}),(0,l.jsx)(r.td,{children:"externExDest"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"124"}),(0,l.jsx)(r.td,{children:"externParams"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"external algo names/parameters (usually just an algo name)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"127"}),(0,l.jsx)(r.td,{children:"strategy"}),(0,l.jsx)(r.td,{children:"string(36)"}),(0,l.jsx)(r.td,{children:"Client strategy string.  This value will appear on the SR Trade Monitor and in execution reports."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"133"}),(0,l.jsx)(r.td,{children:"securityDesc"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"additional security description"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"136"}),(0,l.jsx)(r.td,{children:"orderDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"order entry time (from client;if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"139"}),(0,l.jsx)(r.td,{children:"orderSize"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"parent order size (contracts) [-1 = no change;used when spdrActionType=Release]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"142"}),(0,l.jsx)(r.td,{children:"orderActiveSize"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"total activated size (total size released for execution) (-1 = all available size)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"145"}),(0,l.jsx)(r.td,{children:"curCumFillQuantity"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"set order size = orderSize - Max(0, curCumFillQty - ee.cumFillQty) (used to ensure integrity of submitted cxl/replace orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"148"}),(0,l.jsx)(r.td,{children:"addCumFillQuantity"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{children:"If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"151"}),(0,l.jsx)(r.td,{children:"exchMask"}),(0,l.jsx)(r.td,{children:"uint"}),(0,l.jsx)(r.td,{children:"eligible exchanges (0 = all)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"154"}),(0,l.jsx)(r.td,{children:"maxExposureSize"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"157"}),(0,l.jsx)(r.td,{children:"numMakeExchanges"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"160"}),(0,l.jsx)(r.td,{children:"publicSize"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PublicSizeHandling",children:"enum : PublicSizeHandling"})}),(0,l.jsx)(r.td,{children:"public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; MktSize=expose only 'typical' market size; FullSize=expose entire order size where possible"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"163"}),(0,l.jsx)(r.td,{children:"randomizeSize"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{children:"randomize public order size"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"166"}),(0,l.jsx)(r.td,{children:"canOverlapCxlRepl"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{children:"can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"169"}),(0,l.jsx)(r.td,{children:"progressRule"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ProgressRule",children:"enum : ProgressRule"})}),(0,l.jsx)(r.td,{children:"None = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"172"}),(0,l.jsx)(r.td,{children:"twapSliceCnt"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"[ProgressSliceCnt] number of progress slices to use. if none given will compute based on active size and duration. [max 20]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"175"}),(0,l.jsx)(r.td,{children:"progressExposeTime"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"178"}),(0,l.jsx)(r.td,{children:"auctionResponder"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/AuctionResponder",children:"enum : AuctionResponder"})}),(0,l.jsx)(r.td,{children:"if set, parent order can be an auction responder"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"181"}),(0,l.jsx)(r.td,{children:"maxMakeExchFee"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"184"}),(0,l.jsx)(r.td,{children:"maxTakeExchFee"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"187"}),(0,l.jsx)(r.td,{children:"incTakeExchFee"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/IncExchFee",children:"enum : IncExchFee"})}),(0,l.jsx)(r.td,{children:"include exchange fee in probability and surface based take limit calculations"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"190"}),(0,l.jsx)(r.td,{children:"incMakeExchFee"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/IncExchFee",children:"enum : IncExchFee"})}),(0,l.jsx)(r.td,{children:"include exchange fee in probability and surface based make limit calculations"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"193"}),(0,l.jsx)(r.td,{children:"makeExchRule"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/MakeExchRule",children:"enum : MakeExchRule"})}),(0,l.jsx)(r.td,{children:"ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"196"}),(0,l.jsx)(r.td,{children:"minMktOnClosePct"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"199"}),(0,l.jsx)(r.td,{children:"triggerType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/TriggerType",children:"enum : TriggerType"})}),(0,l.jsx)(r.td,{children:"type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"202"}),(0,l.jsx)(r.td,{children:"triggerLevel"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"stop/trigger price for parent order to go active"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"205"}),(0,l.jsx)(r.td,{children:"cxlUPrcRange"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/UPrcCxl",children:"enum : UPrcCxl"})}),(0,l.jsx)(r.td,{children:"cancel parent order if/when outside min/max uPrc range [_Halt = also cancel if the security/underlier has been halted]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"208"}),(0,l.jsx)(r.td,{children:"minUBid"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"[optional]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"211"}),(0,l.jsx)(r.td,{children:"maxUAsk"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"[optional] (< $0.01 = none)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"214"}),(0,l.jsx)(r.td,{children:"minMaxType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/MinMaxType",children:"enum : MinMaxType"})}),(0,l.jsx)(r.td,{children:"if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"217"}),(0,l.jsx)(r.td,{children:"minOptionPx"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"[optional] option price floor for tied to stock orders"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"220"}),(0,l.jsx)(r.td,{children:"maxChildOrders"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"223"}),(0,l.jsx)(r.td,{children:"spdrStageType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrStageType",children:"enum : SpdrStageType"})}),(0,l.jsx)(r.td,{children:"SizeLock = stage pending modification (can reduce size); SizeModify = stage pending modification (can increase/reduce size)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"911"}),(0,l.jsx)(r.td,{children:"marketSession"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/MarketSession",children:"enum : MarketSession"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"229"}),(0,l.jsx)(r.td,{children:"startDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"[optional] (parent order start time)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"232"}),(0,l.jsx)(r.td,{children:"orderDuration"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"[optional] (number of seconds)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"912"}),(0,l.jsx)(r.td,{children:"activeDuration"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"[optional] (number of seconds)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"235"}),(0,l.jsx)(r.td,{children:"goodTillDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"[optional] (default: 2000-01-01)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"238"}),(0,l.jsx)(r.td,{children:"startType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/StartType",children:"enum : StartType"})}),(0,l.jsx)(r.td,{children:"[WaitTrigger]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"241"}),(0,l.jsx)(r.td,{children:"triggerGroupId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"WaitTrigger group Id; all child orders parent orders with the same triggerGroupId will optimized and released together when the group is triggered; used to effect cross exchange and cross product market ISO and price level sweeps"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"244"}),(0,l.jsx)(r.td,{children:"triggerTimestamp"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"WaitTrigger trigger timestamp (nanoseconds since epoch)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"250"}),(0,l.jsx)(r.td,{children:"parentOrderHandling"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ParentOrderHandling",children:"enum : ParentOrderHandling"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"253"}),(0,l.jsx)(r.td,{children:"parentBalanceHandling"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ParentBalanceHandling",children:"enum : ParentBalanceHandling"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"920"}),(0,l.jsx)(r.td,{children:"blockVisibility"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BlockVisibility",children:"enum : BlockVisibility"})}),(0,l.jsx)(r.td,{children:"for BlockAuction orders, visibility (to responders) is neither, side only, or side + price"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"921"}),(0,l.jsx)(r.td,{children:"includeSRNetwork"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/InclExclDisclose",children:"enum : InclExclDisclose"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"256"}),(0,l.jsx)(r.td,{children:"orderLimitType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrLimitType",children:"enum : SpdrLimitType"})}),(0,l.jsx)(r.td,{children:"Various (Prc, PrcDe, Vol, Rel, Market); establishes the primary LimitPrice for a parent order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"259"}),(0,l.jsx)(r.td,{children:"takeLimitClass"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,l.jsx)(r.td,{children:"Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"262"}),(0,l.jsx)(r.td,{children:"makeLimitClass"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,l.jsx)(r.td,{children:"Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"265"}),(0,l.jsx)(r.td,{children:"takeReachRule"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ReachRule",children:"enum : ReachRule"})}),(0,l.jsx)(r.td,{children:"None = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"913"}),(0,l.jsx)(r.td,{children:"leadSide"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{children:"for legged orders, which side to lead with.  (optional, None ok)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"914"}),(0,l.jsx)(r.td,{children:"maxCompletionSlippage"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"Maximum price slippage to complete an open basket or a cross auction (face side slippage)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"268"}),(0,l.jsx)(r.td,{children:"orderPrcLimit"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"Applies if LimitType = Prc[]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"271"}),(0,l.jsx)(r.td,{children:"orderRefUPrc"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"default=underlier.mid"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"274"}),(0,l.jsx)(r.td,{children:"orderRefDelta"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"default=option.delta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"277"}),(0,l.jsx)(r.td,{children:"orderRefGamma"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"default=option.gamma"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"280"}),(0,l.jsx)(r.td,{children:"orderVolLimit"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"Applies if LimitType = Vol[] [uses SR dividends and borrow rates]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"283"}),(0,l.jsx)(r.td,{children:"rateOverride"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"zero = ignore;> zero = override"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"286"}),(0,l.jsx)(r.td,{children:"sdivOverride"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"Default: 0."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"289"}),(0,l.jsx)(r.td,{children:"ddivOverride"}),(0,l.jsx)(r.td,{children:"text2"}),(0,l.jsxs)(r.td,{children:["Discrete dividend string override ([yearsToExpiry,divYears",":divAmount",",divYears",":divAmount",", ...])"]})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"292"}),(0,l.jsx)(r.td,{children:"overrideCode"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/OverrideCode",children:"enum : OverrideCode"})}),(0,l.jsx)(r.td,{children:"override default SR dividend and rate details (only used if LimitType = Vol)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"295"}),(0,l.jsx)(r.td,{children:"orderPrcOffset"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"default=0"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"298"}),(0,l.jsx)(r.td,{children:"orderRefEventMult"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"301"}),(0,l.jsx)(r.td,{children:"orderRefEventDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"304"}),(0,l.jsx)(r.td,{children:"takeAlphaType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,l.jsx)(r.td,{children:"Applies if takeLimitClass = Probability"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"307"}),(0,l.jsx)(r.td,{children:"makeAlphaType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,l.jsx)(r.td,{children:"Applies if makeLimitClass = Probability"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"310"}),(0,l.jsx)(r.td,{children:"takeAlphaFactor"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"[-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"313"}),(0,l.jsx)(r.td,{children:"makeAlphaFactor"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"[-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"316"}),(0,l.jsx)(r.td,{children:"takeProbability"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"takeProbLimit = takeProbability [if takeAlphaType = Static]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"319"}),(0,l.jsx)(r.td,{children:"makeProbability"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"makeProbLimit = makeProbability [if makeAlphaType = Static]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"322"}),(0,l.jsx)(r.td,{children:"takeSurfPrcOffset"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"default=0"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"325"}),(0,l.jsx)(r.td,{children:"takeSurfVolOffset"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"default=0"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"328"}),(0,l.jsx)(r.td,{children:"takeSurfWidthOffset"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"[-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"331"}),(0,l.jsx)(r.td,{children:"makeSurfPrcOffset"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"default=0"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"334"}),(0,l.jsx)(r.td,{children:"makeSurfVolOffset"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"default=0"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"337"}),(0,l.jsx)(r.td,{children:"makeSurfWidthOffset"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"[-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"340"}),(0,l.jsx)(r.td,{children:"autoHedge"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/AutoHedge",children:"enum : AutoHedge"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"343"}),(0,l.jsx)(r.td,{children:"hedgeInstrument"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/HedgeInst",children:"enum : HedgeInst"})}),(0,l.jsx)(r.td,{children:"Default=underlier (EQT or FUT) [Index Options use ETF]; FrontMonth=underlier (EQT) or front month (FUT) [Index Options use FM Fut]; Stock=hedgeSecKey; Future=hedgeSecKey"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"346"}),(0,l.jsx)(r.td,{children:"hedgeSecKey"}),(0,l.jsx)(r.td,{children:"ExpiryKey"}),(0,l.jsx)(r.td,{children:"autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"349"}),(0,l.jsx)(r.td,{children:"hedgeBetaRatio"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"352"}),(0,l.jsx)(r.td,{children:"hedgeScope"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/HedgeScope",children:"enum : HedgeScope"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"915"}),(0,l.jsx)(r.td,{children:"hedgeSession"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/MarketSession",children:"enum : MarketSession"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"358"}),(0,l.jsx)(r.td,{children:"positionType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"361"}),(0,l.jsx)(r.td,{children:"ssaleFlag"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{children:"Used to determine stock auto-hedge flags."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"364"}),(0,l.jsx)(r.td,{children:"firmType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/FirmType",children:"enum : FirmType"})}),(0,l.jsx)(r.td,{children:"Used to override firmType in account config. Default: None (use SpiderRock account configuration)."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"367"}),(0,l.jsx)(r.td,{children:"theoVol"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"client supplied theoretical volatility (used for markup only)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"412"}),(0,l.jsx)(r.td,{children:"riskGroupId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsxs)(r.td,{children:["All group (grp) risk limits below are relative to this riskGroupId.  Default: 0 (none).  Required to be non-zero if ",(0,l.jsx)(r.code,{children:"autoHedge"})," is something other than None."]})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"916"}),(0,l.jsx)(r.td,{children:"reqAuxRiskGroupCtrl"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"370"}),(0,l.jsx)(r.td,{children:"refRMetric1Src"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RMetricSource",children:"enum : RMetricSource"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"373"}),(0,l.jsx)(r.td,{children:"refRMetric2Src"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RMetricSource",children:"enum : RMetricSource"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"376"}),(0,l.jsx)(r.td,{children:"refRMetric3Src"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RMetricSource",children:"enum : RMetricSource"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"379"}),(0,l.jsx)(r.td,{children:"refRMetric4Src"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RMetricSource",children:"enum : RMetricSource"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"382"}),(0,l.jsx)(r.td,{children:"refRMetric5Src"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RMetricSource",children:"enum : RMetricSource"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"385"}),(0,l.jsx)(r.td,{children:"refRMetric6Src"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RMetricSource",children:"enum : RMetricSource"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"388"}),(0,l.jsx)(r.td,{children:"refRMetric7Src"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RMetricSource",children:"enum : RMetricSource"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"391"}),(0,l.jsx)(r.td,{children:"orderRefRMetric1"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user supplied RMetric1 value (used in RiskGroupID risk controls) [netRMetric1 = sum(fillQty * orderRefRMetric1 * underlierPerCn)]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"394"}),(0,l.jsx)(r.td,{children:"orderRefRMetric2"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user supplied RMetric2 value (used in RiskGroupID risk controls) [netRMetric2 = sum(fillQty * orderRefRMetric2 * underlierPerCn)]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"397"}),(0,l.jsx)(r.td,{children:"orderRefRMetric3"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user supplied RMetric3 value (used in RiskGroupID risk controls) [netRMetric3 = sum(fillQty * orderRefRMetric3 * underlierPerCn)]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"400"}),(0,l.jsx)(r.td,{children:"orderRefRMetric4"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user supplied RMetric4 value (used in RiskGroupID risk controls) [netRMetric4 = sum(fillQty * orderRefRMetric4 * underlierPerCn)]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"403"}),(0,l.jsx)(r.td,{children:"orderRefRMetric5"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user supplied RMetric5 value (used in RiskGroupID risk controls) [netRMetric5 = sum(fillQty * orderRefRMetric5 * underlierPerCn)]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"406"}),(0,l.jsx)(r.td,{children:"orderRefRMetric6"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user supplied RMetric6 value (used in ExpDay risk controls) [netRMetric6 = sum(fillQty * orderRefRMetric6 * underlierPerCn)]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"409"}),(0,l.jsx)(r.td,{children:"orderRefRMetric7"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"439"}),(0,l.jsx)(r.td,{children:"expDayWtVegaOffset"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day wtVega offset (target)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"433"}),(0,l.jsx)(r.td,{children:"maxExpDayWtVegaLn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"436"}),(0,l.jsx)(r.td,{children:"maxExpDayWtVegaSh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"469"}),(0,l.jsx)(r.td,{children:"maxExpDayRMetric6Ln"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"472"}),(0,l.jsx)(r.td,{children:"maxExpDayRMetric6Sh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"466"}),(0,l.jsx)(r.td,{children:"symDayDDeltaOffset"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day $delta offset (target)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"460"}),(0,l.jsx)(r.td,{children:"maxSymDayDDeltaLn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"463"}),(0,l.jsx)(r.td,{children:"maxSymDayDDeltaSh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"448"}),(0,l.jsx)(r.td,{children:"symDayVegaOffset"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day vega offset (target)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"442"}),(0,l.jsx)(r.td,{children:"maxSymDayVegaLn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"445"}),(0,l.jsx)(r.td,{children:"maxSymDayVegaSh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"457"}),(0,l.jsx)(r.td,{children:"symDayWtVegaOffset"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day wtVega offset (target)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"451"}),(0,l.jsx)(r.td,{children:"maxSymDayWtVegaLn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"454"}),(0,l.jsx)(r.td,{children:"maxSymDayWtVegaSh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"478"}),(0,l.jsx)(r.td,{children:"maxSymDayRMetric7Ln"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"481"}),(0,l.jsx)(r.td,{children:"maxSymDayRMetric7Sh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"487"}),(0,l.jsx)(r.td,{children:"maxGrpDayDDeltaLn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"490"}),(0,l.jsx)(r.td,{children:"maxGrpDayDDeltaSh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"493"}),(0,l.jsx)(r.td,{children:"maxGrpDayVegaLn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"496"}),(0,l.jsx)(r.td,{children:"maxGrpDayVegaSh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"499"}),(0,l.jsx)(r.td,{children:"maxGrpDayVegaAbs"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"502"}),(0,l.jsx)(r.td,{children:"grpDayVegaRatio"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"553"}),(0,l.jsx)(r.td,{children:"maxGrpDayContractsLn"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day opt contracts long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"556"}),(0,l.jsx)(r.td,{children:"maxGrpDayContractsSh"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day opt contracts short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"559"}),(0,l.jsx)(r.td,{children:"maxGrpDayContractsAbs"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day opt contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"517"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric1Ln"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"520"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric1Sh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"523"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric1Abs"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"526"}),(0,l.jsx)(r.td,{children:"grpDayRMetric1Ratio"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"529"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric2Ln"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"532"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric2Sh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"535"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric3Ln"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"538"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric3Sh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"541"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric4Ln"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"544"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric4Sh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"547"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric5Ln"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"550"}),(0,l.jsx)(r.td,{children:"maxGrpDayRMetric5Sh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"562"}),(0,l.jsx)(r.td,{children:"symEmaCxlDDeltaLn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"565"}),(0,l.jsx)(r.td,{children:"symEmaCxlDDeltaSh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"568"}),(0,l.jsx)(r.td,{children:"symEmaCxlWtVegaLn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"571"}),(0,l.jsx)(r.td,{children:"symEmaCxlWtVegaSh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"574"}),(0,l.jsx)(r.td,{children:"traderName"}),(0,l.jsx)(r.td,{children:"string(32)"}),(0,l.jsx)(r.td,{children:"Name of the trader associated with the order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"577"}),(0,l.jsx)(r.td,{children:"userData1"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"client supplied data field; passes through to parent and child executions and reports as well as FIX drops"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"580"}),(0,l.jsx)(r.td,{children:"userData2"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"client supplied data field; passes through to parent and child executions and reports as well as FIX drops"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"583"}),(0,l.jsx)(r.td,{children:"childData"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"client supplied data field; passes through to down stream child orders"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"631"}),(0,l.jsx)(r.td,{children:"mlegTicker"}),(0,l.jsx)(r.td,{children:"TickerKey"}),(0,l.jsx)(r.td,{children:"stock ticker"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"634"}),(0,l.jsx)(r.td,{children:"mlegStockSide"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{children:"[Buy"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"637"}),(0,l.jsx)(r.td,{children:"mlegStockShares"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"number of shares included (zero if none)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"640"}),(0,l.jsx)(r.td,{children:"mlegStockLegId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR stock leg ID"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"643"}),(0,l.jsx)(r.td,{children:"mlegAltStkLegId"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"client stock leg ID (usually from a FIX order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"646"}),(0,l.jsx)(r.td,{children:"mlegSSaleFlag"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{children:"stock short sale flag"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"652"}),(0,l.jsx)(r.td,{children:"mlegRefUPrc"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"655"}),(0,l.jsx)(r.td,{children:"mlegNumLegs"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"number of valid legs below"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"658"}),(0,l.jsx)(r.td,{children:"mlegSecKey1"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"leg #1"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"661"}),(0,l.jsx)(r.td,{children:"mlegSecType1"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"664"}),(0,l.jsx)(r.td,{children:"mlegMult1"}),(0,l.jsx)(r.td,{children:"ushort"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"667"}),(0,l.jsx)(r.td,{children:"mlegSide1"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"670"}),(0,l.jsx)(r.td,{children:"mlegLegId1"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR leg Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"673"}),(0,l.jsx)(r.td,{children:"mlegAltLegId1"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"client leg Id (usually from a FIX order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"676"}),(0,l.jsx)(r.td,{children:"mlegPosType1"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"682"}),(0,l.jsx)(r.td,{children:"mlegSsaleFlag1"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"688"}),(0,l.jsx)(r.td,{children:"mlegVega1"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"691"}),(0,l.jsx)(r.td,{children:"mlegRefUPrc1"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"694"}),(0,l.jsx)(r.td,{children:"mlegRefDelta1"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"697"}),(0,l.jsx)(r.td,{children:"mlegRefEarnCnt1"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"700"}),(0,l.jsx)(r.td,{children:"mlegSecKey2"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"leg #2"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"703"}),(0,l.jsx)(r.td,{children:"mlegSecType2"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"706"}),(0,l.jsx)(r.td,{children:"mlegMult2"}),(0,l.jsx)(r.td,{children:"ushort"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"709"}),(0,l.jsx)(r.td,{children:"mlegSide2"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"712"}),(0,l.jsx)(r.td,{children:"mlegLegId2"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR leg Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"715"}),(0,l.jsx)(r.td,{children:"mlegAltLegId2"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"client leg Id (usually from a FIX order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"718"}),(0,l.jsx)(r.td,{children:"mlegPosType2"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"724"}),(0,l.jsx)(r.td,{children:"mlegSsaleFlag2"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"730"}),(0,l.jsx)(r.td,{children:"mlegVega2"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"733"}),(0,l.jsx)(r.td,{children:"mlegRefUPrc2"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"736"}),(0,l.jsx)(r.td,{children:"mlegRefDelta2"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"739"}),(0,l.jsx)(r.td,{children:"mlegRefEarnCnt2"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"742"}),(0,l.jsx)(r.td,{children:"mlegSecKey3"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"leg #3"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"745"}),(0,l.jsx)(r.td,{children:"mlegSecType3"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"748"}),(0,l.jsx)(r.td,{children:"mlegMult3"}),(0,l.jsx)(r.td,{children:"ushort"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"751"}),(0,l.jsx)(r.td,{children:"mlegSide3"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"754"}),(0,l.jsx)(r.td,{children:"mlegLegId3"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR leg Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"757"}),(0,l.jsx)(r.td,{children:"mlegAltLegId3"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"client leg Id (usually from a FIX order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"760"}),(0,l.jsx)(r.td,{children:"mlegPosType3"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"766"}),(0,l.jsx)(r.td,{children:"mlegSsaleFlag3"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"772"}),(0,l.jsx)(r.td,{children:"mlegVega3"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"775"}),(0,l.jsx)(r.td,{children:"mlegRefUPrc3"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"778"}),(0,l.jsx)(r.td,{children:"mlegRefDelta3"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"781"}),(0,l.jsx)(r.td,{children:"mlegRefEarnCnt3"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"784"}),(0,l.jsx)(r.td,{children:"mlegSecKey4"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"leg #4"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"787"}),(0,l.jsx)(r.td,{children:"mlegSecType4"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"790"}),(0,l.jsx)(r.td,{children:"mlegMult4"}),(0,l.jsx)(r.td,{children:"ushort"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"793"}),(0,l.jsx)(r.td,{children:"mlegSide4"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"796"}),(0,l.jsx)(r.td,{children:"mlegLegId4"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR leg Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"799"}),(0,l.jsx)(r.td,{children:"mlegAltLegId4"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"client leg Id (usually from a FIX order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"802"}),(0,l.jsx)(r.td,{children:"mlegPosType4"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"808"}),(0,l.jsx)(r.td,{children:"mlegSsaleFlag4"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"814"}),(0,l.jsx)(r.td,{children:"mlegVega4"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"817"}),(0,l.jsx)(r.td,{children:"mlegRefUPrc4"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"820"}),(0,l.jsx)(r.td,{children:"mlegRefDelta4"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"823"}),(0,l.jsx)(r.td,{children:"mlegRefEarnCnt4"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"826"}),(0,l.jsx)(r.td,{children:"mlegSecKey5"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"leg #5"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"829"}),(0,l.jsx)(r.td,{children:"mlegSecType5"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"832"}),(0,l.jsx)(r.td,{children:"mlegMult5"}),(0,l.jsx)(r.td,{children:"ushort"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"835"}),(0,l.jsx)(r.td,{children:"mlegSide5"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"838"}),(0,l.jsx)(r.td,{children:"mlegLegId5"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR leg Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"841"}),(0,l.jsx)(r.td,{children:"mlegAltLegId5"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"client leg Id (usually from a FIX order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"844"}),(0,l.jsx)(r.td,{children:"mlegPosType5"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"850"}),(0,l.jsx)(r.td,{children:"mlegSsaleFlag5"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"856"}),(0,l.jsx)(r.td,{children:"mlegVega5"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"859"}),(0,l.jsx)(r.td,{children:"mlegRefUPrc5"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"862"}),(0,l.jsx)(r.td,{children:"mlegRefDelta5"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"865"}),(0,l.jsx)(r.td,{children:"mlegRefEarnCnt5"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"868"}),(0,l.jsx)(r.td,{children:"mlegSecKey6"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"leg #6"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"871"}),(0,l.jsx)(r.td,{children:"mlegSecType6"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"874"}),(0,l.jsx)(r.td,{children:"mlegMult6"}),(0,l.jsx)(r.td,{children:"ushort"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"877"}),(0,l.jsx)(r.td,{children:"mlegSide6"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"880"}),(0,l.jsx)(r.td,{children:"mlegLegId6"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR leg Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"883"}),(0,l.jsx)(r.td,{children:"mlegAltLegId6"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"client leg Id (usually from a FIX order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"886"}),(0,l.jsx)(r.td,{children:"mlegPosType6"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"892"}),(0,l.jsx)(r.td,{children:"mlegSsaleFlag6"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"898"}),(0,l.jsx)(r.td,{children:"mlegVega6"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"901"}),(0,l.jsx)(r.td,{children:"mlegRefUPrc6"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"reference underlier price (PrcDe orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"904"}),(0,l.jsx)(r.td,{children:"mlegRefDelta6"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"reference delta (for PrcDe order handling)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"907"}),(0,l.jsx)(r.td,{children:"mlegRefEarnCnt6"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"reference # of earnings moves before expiration"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"917"}),(0,l.jsx)(r.td,{children:"optPremium"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"The premium for the option legs, a contribution to the order premium. Valid range is [-9999.0, 9999.0]. Default: 0."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"910"}),(0,l.jsx)(r.td,{children:"checksum"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"Must be set to 13.  This helps detect some column/value misalignments."})]})]})]}),"\n",(0,l.jsx)(r.h3,{id:"repeating-fields",children:"REPEATING FIELDS"}),"\n",(0,l.jsx)(r.p,{children:"DirectedCounterParty"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{children:"Field"}),(0,l.jsx)(r.th,{children:"Type"}),(0,l.jsx)(r.th,{children:"Comment"})]})}),(0,l.jsxs)(r.tbody,{children:[(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"923"}),(0,l.jsx)(r.td,{children:"clientFirm"}),(0,l.jsx)(r.td,{children:"string(16)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"924"}),(0,l.jsx)(r.td,{children:"inclExcl"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/InclExclDisclose",children:"enum : InclExclDisclose"})})]})]})]}),"\n",(0,l.jsx)(r.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,l.jsxs)(d.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'ParentOrderGatewayExt'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n#Required Parameters\n\"apiKey\": API_KEY,\n\"cmd\": 'getschema',\n\"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=ParentOrderGatewayExt'\n\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,l.jsxs)(d.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'ParentOrderGatewayExt\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'spdrActionType|altOrderId|altAutoHedgeId|altAccnt|altUserName|accntRouteCode|execBrkrCode|externExDest|externParams|strategy|securityDesc|orderDttm|orderSize|orderActiveSize|curCumFillQuantity|addCumFillQuantity|exchMask|maxExposureSize|numMakeExchanges|publicSize|randomizeSize|canOverlapCxlRepl|progressRule|twapSliceCnt|progressExposeTime|auctionResponder|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|minMktOnClosePct|triggerType|triggerLevel|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|spdrStageType|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|startType|triggerGroupId|triggerTimestamp|parentOrderHandling|parentBalanceHandling|blockVisibility|includeSRNetwork|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|leadSide|maxCompletionSlippage|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|orderRefEventMult|orderRefEventDttm|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|autoHedge|hedgeInstrument|hedgeSecKey|hedgeBetaRatio|hedgeScope|hedgeSession|positionType|ssaleFlag|firmType|theoVol|riskGroupId|reqAuxRiskGroupCtrl|refRMetric1Src|refRMetric2Src|refRMetric3Src|refRMetric4Src|refRMetric5Src|refRMetric6Src|refRMetric7Src|orderRefRMetric1|orderRefRMetric2|orderRefRMetric3|orderRefRMetric4|orderRefRMetric5|orderRefRMetric6|orderRefRMetric7|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|traderName|userData1|userData2|childData|mlegTicker|mlegStockSide|mlegStockShares|mlegStockLegId|mlegAltStkLegId|mlegSSaleFlag|mlegRefUPrc|mlegNumLegs|mlegSecKey1|mlegSecType1|mlegMult1|mlegSide1|mlegLegId1|mlegAltLegId1|mlegPosType1|mlegSsaleFlag1|mlegVega1|mlegRefUPrc1|mlegRefDelta1|mlegRefEarnCnt1|mlegSecKey2|mlegSecType2|mlegMult2|mlegSide2|mlegLegId2|mlegAltLegId2|mlegPosType2|mlegSsaleFlag2|mlegVega2|mlegRefUPrc2|mlegRefDelta2|mlegRefEarnCnt2|mlegSecKey3|mlegSecType3|mlegMult3|mlegSide3|mlegLegId3|mlegAltLegId3|mlegPosType3|mlegSsaleFlag3|mlegVega3|mlegRefUPrc3|mlegRefDelta3|mlegRefEarnCnt3|mlegSecKey4|mlegSecType4|mlegMult4|mlegSide4|mlegLegId4|mlegAltLegId4|mlegPosType4|mlegSsaleFlag4|mlegVega4|mlegRefUPrc4|mlegRefDelta4|mlegRefEarnCnt4|mlegSecKey5|mlegSecType5|mlegMult5|mlegSide5|mlegLegId5|mlegAltLegId5|mlegPosType5|mlegSsaleFlag5|mlegVega5|mlegRefUPrc5|mlegRefDelta5|mlegRefEarnCnt5|mlegSecKey6|mlegSecType6|mlegMult6|mlegSide6|mlegLegId6|mlegAltLegId6|mlegPosType6|mlegSsaleFlag6|mlegVega6|mlegRefUPrc6|mlegRefDelta6|mlegRefEarnCnt6|optPremium|checksum\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=ParentOrderGatewayExt' \\\n--data-urlencode 'view=spdrActionType|altOrderId|altAutoHedgeId|altAccnt|altUserName|accntRouteCode|execBrkrCode|externExDest|externParams|strategy|securityDesc|orderDttm|orderSize|orderActiveSize|curCumFillQuantity|addCumFillQuantity|exchMask|maxExposureSize|numMakeExchanges|publicSize|randomizeSize|canOverlapCxlRepl|progressRule|twapSliceCnt|progressExposeTime|auctionResponder|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|minMktOnClosePct|triggerType|triggerLevel|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|spdrStageType|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|startType|triggerGroupId|triggerTimestamp|parentOrderHandling|parentBalanceHandling|blockVisibility|includeSRNetwork|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|leadSide|maxCompletionSlippage|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|orderRefEventMult|orderRefEventDttm|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|autoHedge|hedgeInstrument|hedgeSecKey|hedgeBetaRatio|hedgeScope|hedgeSession|positionType|ssaleFlag|firmType|theoVol|riskGroupId|reqAuxRiskGroupCtrl|refRMetric1Src|refRMetric2Src|refRMetric3Src|refRMetric4Src|refRMetric5Src|refRMetric6Src|refRMetric7Src|orderRefRMetric1|orderRefRMetric2|orderRefRMetric3|orderRefRMetric4|orderRefRMetric5|orderRefRMetric6|orderRefRMetric7|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|traderName|userData1|userData2|childData|mlegTicker|mlegStockSide|mlegStockShares|mlegStockLegId|mlegAltStkLegId|mlegSSaleFlag|mlegRefUPrc|mlegNumLegs|mlegSecKey1|mlegSecType1|mlegMult1|mlegSide1|mlegLegId1|mlegAltLegId1|mlegPosType1|mlegSsaleFlag1|mlegVega1|mlegRefUPrc1|mlegRefDelta1|mlegRefEarnCnt1|mlegSecKey2|mlegSecType2|mlegMult2|mlegSide2|mlegLegId2|mlegAltLegId2|mlegPosType2|mlegSsaleFlag2|mlegVega2|mlegRefUPrc2|mlegRefDelta2|mlegRefEarnCnt2|mlegSecKey3|mlegSecType3|mlegMult3|mlegSide3|mlegLegId3|mlegAltLegId3|mlegPosType3|mlegSsaleFlag3|mlegVega3|mlegRefUPrc3|mlegRefDelta3|mlegRefEarnCnt3|mlegSecKey4|mlegSecType4|mlegMult4|mlegSide4|mlegLegId4|mlegAltLegId4|mlegPosType4|mlegSsaleFlag4|mlegVega4|mlegRefUPrc4|mlegRefDelta4|mlegRefEarnCnt4|mlegSecKey5|mlegSecType5|mlegMult5|mlegSide5|mlegLegId5|mlegAltLegId5|mlegPosType5|mlegSsaleFlag5|mlegVega5|mlegRefUPrc5|mlegRefDelta5|mlegRefEarnCnt5|mlegSecKey6|mlegSecType6|mlegMult6|mlegSide6|mlegLegId6|mlegAltLegId6|mlegPosType6|mlegSsaleFlag6|mlegVega6|mlegRefUPrc6|mlegRefDelta6|mlegRefEarnCnt6|optPremium|checksum' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,l.jsxs)(d.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'ParentOrderGatewayExt\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'spdrActionType|altOrderId|altAutoHedgeId|altAccnt|altUserName|accntRouteCode|execBrkrCode|externExDest|externParams|strategy|securityDesc|orderDttm|orderSize|orderActiveSize|curCumFillQuantity|addCumFillQuantity|exchMask|maxExposureSize|numMakeExchanges|publicSize|randomizeSize|canOverlapCxlRepl|progressRule|twapSliceCnt|progressExposeTime|auctionResponder|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|minMktOnClosePct|triggerType|triggerLevel|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|spdrStageType|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|startType|triggerGroupId|triggerTimestamp|parentOrderHandling|parentBalanceHandling|blockVisibility|includeSRNetwork|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|leadSide|maxCompletionSlippage|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|orderRefEventMult|orderRefEventDttm|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|autoHedge|hedgeInstrument|hedgeSecKey|hedgeBetaRatio|hedgeScope|hedgeSession|positionType|ssaleFlag|firmType|theoVol|riskGroupId|reqAuxRiskGroupCtrl|refRMetric1Src|refRMetric2Src|refRMetric3Src|refRMetric4Src|refRMetric5Src|refRMetric6Src|refRMetric7Src|orderRefRMetric1|orderRefRMetric2|orderRefRMetric3|orderRefRMetric4|orderRefRMetric5|orderRefRMetric6|orderRefRMetric7|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|traderName|userData1|userData2|childData|mlegTicker|mlegStockSide|mlegStockShares|mlegStockLegId|mlegAltStkLegId|mlegSSaleFlag|mlegRefUPrc|mlegNumLegs|mlegSecKey1|mlegSecType1|mlegMult1|mlegSide1|mlegLegId1|mlegAltLegId1|mlegPosType1|mlegSsaleFlag1|mlegVega1|mlegRefUPrc1|mlegRefDelta1|mlegRefEarnCnt1|mlegSecKey2|mlegSecType2|mlegMult2|mlegSide2|mlegLegId2|mlegAltLegId2|mlegPosType2|mlegSsaleFlag2|mlegVega2|mlegRefUPrc2|mlegRefDelta2|mlegRefEarnCnt2|mlegSecKey3|mlegSecType3|mlegMult3|mlegSide3|mlegLegId3|mlegAltLegId3|mlegPosType3|mlegSsaleFlag3|mlegVega3|mlegRefUPrc3|mlegRefDelta3|mlegRefEarnCnt3|mlegSecKey4|mlegSecType4|mlegMult4|mlegSide4|mlegLegId4|mlegAltLegId4|mlegPosType4|mlegSsaleFlag4|mlegVega4|mlegRefUPrc4|mlegRefDelta4|mlegRefEarnCnt4|mlegSecKey5|mlegSecType5|mlegMult5|mlegSide5|mlegLegId5|mlegAltLegId5|mlegPosType5|mlegSsaleFlag5|mlegVega5|mlegRefUPrc5|mlegRefDelta5|mlegRefEarnCnt5|mlegSecKey6|mlegSecType6|mlegMult6|mlegSide6|mlegLegId6|mlegAltLegId6|mlegPosType6|mlegSsaleFlag6|mlegVega6|mlegRefUPrc6|mlegRefDelta6|mlegRefEarnCnt6|optPremium|checksum\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'spdrActionType:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=ParentOrderGatewayExt' \\\n--data-urlencode 'view=spdrActionType|altOrderId|altAutoHedgeId|altAccnt|altUserName|accntRouteCode|execBrkrCode|externExDest|externParams|strategy|securityDesc|orderDttm|orderSize|orderActiveSize|curCumFillQuantity|addCumFillQuantity|exchMask|maxExposureSize|numMakeExchanges|publicSize|randomizeSize|canOverlapCxlRepl|progressRule|twapSliceCnt|progressExposeTime|auctionResponder|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|minMktOnClosePct|triggerType|triggerLevel|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|spdrStageType|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|startType|triggerGroupId|triggerTimestamp|parentOrderHandling|parentBalanceHandling|blockVisibility|includeSRNetwork|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|leadSide|maxCompletionSlippage|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|orderRefEventMult|orderRefEventDttm|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|autoHedge|hedgeInstrument|hedgeSecKey|hedgeBetaRatio|hedgeScope|hedgeSession|positionType|ssaleFlag|firmType|theoVol|riskGroupId|reqAuxRiskGroupCtrl|refRMetric1Src|refRMetric2Src|refRMetric3Src|refRMetric4Src|refRMetric5Src|refRMetric6Src|refRMetric7Src|orderRefRMetric1|orderRefRMetric2|orderRefRMetric3|orderRefRMetric4|orderRefRMetric5|orderRefRMetric6|orderRefRMetric7|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|traderName|userData1|userData2|childData|mlegTicker|mlegStockSide|mlegStockShares|mlegStockLegId|mlegAltStkLegId|mlegSSaleFlag|mlegRefUPrc|mlegNumLegs|mlegSecKey1|mlegSecType1|mlegMult1|mlegSide1|mlegLegId1|mlegAltLegId1|mlegPosType1|mlegSsaleFlag1|mlegVega1|mlegRefUPrc1|mlegRefDelta1|mlegRefEarnCnt1|mlegSecKey2|mlegSecType2|mlegMult2|mlegSide2|mlegLegId2|mlegAltLegId2|mlegPosType2|mlegSsaleFlag2|mlegVega2|mlegRefUPrc2|mlegRefDelta2|mlegRefEarnCnt2|mlegSecKey3|mlegSecType3|mlegMult3|mlegSide3|mlegLegId3|mlegAltLegId3|mlegPosType3|mlegSsaleFlag3|mlegVega3|mlegRefUPrc3|mlegRefDelta3|mlegRefEarnCnt3|mlegSecKey4|mlegSecType4|mlegMult4|mlegSide4|mlegLegId4|mlegAltLegId4|mlegPosType4|mlegSsaleFlag4|mlegVega4|mlegRefUPrc4|mlegRefDelta4|mlegRefEarnCnt4|mlegSecKey5|mlegSecType5|mlegMult5|mlegSide5|mlegLegId5|mlegAltLegId5|mlegPosType5|mlegSsaleFlag5|mlegVega5|mlegRefUPrc5|mlegRefDelta5|mlegRefEarnCnt5|mlegSecKey6|mlegSecType6|mlegMult6|mlegSide6|mlegLegId6|mlegAltLegId6|mlegPosType6|mlegSsaleFlag6|mlegVega6|mlegRefUPrc6|mlegRefDelta6|mlegRefEarnCnt6|optPremium|checksum' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=spdrActionType:ASC'\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,l.jsxs)(d.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'ParentOrderGatewayExt\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'spdrActionType|altOrderId|altAutoHedgeId|altAccnt|altUserName|accntRouteCode|execBrkrCode|externExDest|externParams|strategy|securityDesc|orderDttm|orderSize|orderActiveSize|curCumFillQuantity|addCumFillQuantity|exchMask|maxExposureSize|numMakeExchanges|publicSize|randomizeSize|canOverlapCxlRepl|progressRule|twapSliceCnt|progressExposeTime|auctionResponder|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|minMktOnClosePct|triggerType|triggerLevel|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|spdrStageType|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|startType|triggerGroupId|triggerTimestamp|parentOrderHandling|parentBalanceHandling|blockVisibility|includeSRNetwork|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|leadSide|maxCompletionSlippage|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|orderRefEventMult|orderRefEventDttm|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|autoHedge|hedgeInstrument|hedgeSecKey|hedgeBetaRatio|hedgeScope|hedgeSession|positionType|ssaleFlag|firmType|theoVol|riskGroupId|reqAuxRiskGroupCtrl|refRMetric1Src|refRMetric2Src|refRMetric3Src|refRMetric4Src|refRMetric5Src|refRMetric6Src|refRMetric7Src|orderRefRMetric1|orderRefRMetric2|orderRefRMetric3|orderRefRMetric4|orderRefRMetric5|orderRefRMetric6|orderRefRMetric7|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|traderName|userData1|userData2|childData|mlegTicker|mlegStockSide|mlegStockShares|mlegStockLegId|mlegAltStkLegId|mlegSSaleFlag|mlegRefUPrc|mlegNumLegs|mlegSecKey1|mlegSecType1|mlegMult1|mlegSide1|mlegLegId1|mlegAltLegId1|mlegPosType1|mlegSsaleFlag1|mlegVega1|mlegRefUPrc1|mlegRefDelta1|mlegRefEarnCnt1|mlegSecKey2|mlegSecType2|mlegMult2|mlegSide2|mlegLegId2|mlegAltLegId2|mlegPosType2|mlegSsaleFlag2|mlegVega2|mlegRefUPrc2|mlegRefDelta2|mlegRefEarnCnt2|mlegSecKey3|mlegSecType3|mlegMult3|mlegSide3|mlegLegId3|mlegAltLegId3|mlegPosType3|mlegSsaleFlag3|mlegVega3|mlegRefUPrc3|mlegRefDelta3|mlegRefEarnCnt3|mlegSecKey4|mlegSecType4|mlegMult4|mlegSide4|mlegLegId4|mlegAltLegId4|mlegPosType4|mlegSsaleFlag4|mlegVega4|mlegRefUPrc4|mlegRefDelta4|mlegRefEarnCnt4|mlegSecKey5|mlegSecType5|mlegMult5|mlegSide5|mlegLegId5|mlegAltLegId5|mlegPosType5|mlegSsaleFlag5|mlegVega5|mlegRefUPrc5|mlegRefDelta5|mlegRefEarnCnt5|mlegSecKey6|mlegSecType6|mlegMult6|mlegSide6|mlegLegId6|mlegAltLegId6|mlegPosType6|mlegSsaleFlag6|mlegVega6|mlegRefUPrc6|mlegRefDelta6|mlegRefEarnCnt6|optPremium|checksum\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'spdrActionType|addCumFillQuantity|publicSize|randomizeSize|canOverlapCxlRepl|progressRule|auctionResponder|incTakeExchFee|incMakeExchFee|makeExchRule|triggerType|cxlUPrcRange|minMaxType|spdrStageType|marketSession|startType|parentOrderHandling|parentBalanceHandling|blockVisibility|includeSRNetwork|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|leadSide|overrideCode|takeAlphaType|makeAlphaType|autoHedge|hedgeInstrument|hedgeScope|hedgeSession|positionType|ssaleFlag|firmType|reqAuxRiskGroupCtrl|refRMetric1Src|refRMetric2Src|refRMetric3Src|refRMetric4Src|refRMetric5Src|refRMetric6Src|refRMetric7Src|mlegStockSide|mlegSSaleFlag|mlegSecType1|mlegSide1|mlegPosType1|mlegSsaleFlag1|mlegSecType2|mlegSide2|mlegPosType2|mlegSsaleFlag2|mlegSecType3|mlegSide3|mlegPosType3|mlegSsaleFlag3|mlegSecType4|mlegSide4|mlegPosType4|mlegSsaleFlag4|mlegSecType5|mlegSide5|mlegPosType5|mlegSsaleFlag5|mlegSecType6|mlegSide6|mlegPosType6|mlegSsaleFlag6\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getaggregate\',\n"msgType": MSG_TYPE,\n"measure": MEASURE,\n"group": GROUP,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=ParentOrderGatewayExt' \\\n--data-urlencode 'measure=spdrActionType|altOrderId|altAutoHedgeId|altAccnt|altUserName|accntRouteCode|execBrkrCode|externExDest|externParams|strategy|securityDesc|orderDttm|orderSize|orderActiveSize|curCumFillQuantity|addCumFillQuantity|exchMask|maxExposureSize|numMakeExchanges|publicSize|randomizeSize|canOverlapCxlRepl|progressRule|twapSliceCnt|progressExposeTime|auctionResponder|maxMakeExchFee|maxTakeExchFee|incTakeExchFee|incMakeExchFee|makeExchRule|minMktOnClosePct|triggerType|triggerLevel|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|spdrStageType|marketSession|startDttm|orderDuration|activeDuration|goodTillDttm|startType|triggerGroupId|triggerTimestamp|parentOrderHandling|parentBalanceHandling|blockVisibility|includeSRNetwork|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|leadSide|maxCompletionSlippage|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|orderRefEventMult|orderRefEventDttm|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|autoHedge|hedgeInstrument|hedgeSecKey|hedgeBetaRatio|hedgeScope|hedgeSession|positionType|ssaleFlag|firmType|theoVol|riskGroupId|reqAuxRiskGroupCtrl|refRMetric1Src|refRMetric2Src|refRMetric3Src|refRMetric4Src|refRMetric5Src|refRMetric6Src|refRMetric7Src|orderRefRMetric1|orderRefRMetric2|orderRefRMetric3|orderRefRMetric4|orderRefRMetric5|orderRefRMetric6|orderRefRMetric7|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|traderName|userData1|userData2|childData|mlegTicker|mlegStockSide|mlegStockShares|mlegStockLegId|mlegAltStkLegId|mlegSSaleFlag|mlegRefUPrc|mlegNumLegs|mlegSecKey1|mlegSecType1|mlegMult1|mlegSide1|mlegLegId1|mlegAltLegId1|mlegPosType1|mlegSsaleFlag1|mlegVega1|mlegRefUPrc1|mlegRefDelta1|mlegRefEarnCnt1|mlegSecKey2|mlegSecType2|mlegMult2|mlegSide2|mlegLegId2|mlegAltLegId2|mlegPosType2|mlegSsaleFlag2|mlegVega2|mlegRefUPrc2|mlegRefDelta2|mlegRefEarnCnt2|mlegSecKey3|mlegSecType3|mlegMult3|mlegSide3|mlegLegId3|mlegAltLegId3|mlegPosType3|mlegSsaleFlag3|mlegVega3|mlegRefUPrc3|mlegRefDelta3|mlegRefEarnCnt3|mlegSecKey4|mlegSecType4|mlegMult4|mlegSide4|mlegLegId4|mlegAltLegId4|mlegPosType4|mlegSsaleFlag4|mlegVega4|mlegRefUPrc4|mlegRefDelta4|mlegRefEarnCnt4|mlegSecKey5|mlegSecType5|mlegMult5|mlegSide5|mlegLegId5|mlegAltLegId5|mlegPosType5|mlegSsaleFlag5|mlegVega5|mlegRefUPrc5|mlegRefDelta5|mlegRefEarnCnt5|mlegSecKey6|mlegSecType6|mlegMult6|mlegSide6|mlegLegId6|mlegAltLegId6|mlegPosType6|mlegSsaleFlag6|mlegVega6|mlegRefUPrc6|mlegRefDelta6|mlegRefEarnCnt6|optPremium|checksum' \\\n--data-urlencode 'group=spdrActionType|addCumFillQuantity|publicSize|randomizeSize|canOverlapCxlRepl|progressRule|auctionResponder|incTakeExchFee|incMakeExchFee|makeExchRule|triggerType|cxlUPrcRange|minMaxType|spdrStageType|marketSession|startType|parentOrderHandling|parentBalanceHandling|blockVisibility|includeSRNetwork|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|leadSide|overrideCode|takeAlphaType|makeAlphaType|autoHedge|hedgeInstrument|hedgeScope|hedgeSession|positionType|ssaleFlag|firmType|reqAuxRiskGroupCtrl|refRMetric1Src|refRMetric2Src|refRMetric3Src|refRMetric4Src|refRMetric5Src|refRMetric6Src|refRMetric7Src|mlegStockSide|mlegSSaleFlag|mlegSecType1|mlegSide1|mlegPosType1|mlegSsaleFlag1|mlegSecType2|mlegSide2|mlegPosType2|mlegSsaleFlag2|mlegSecType3|mlegSide3|mlegPosType3|mlegSsaleFlag3|mlegSecType4|mlegSide4|mlegPosType4|mlegSsaleFlag4|mlegSecType5|mlegSide5|mlegPosType5|mlegSsaleFlag5|mlegSecType6|mlegSide6|mlegPosType6|mlegSsaleFlag6' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,l.jsxs)(d.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'ParentOrderGatewayExt\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=ParentOrderGatewayExt' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function o(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(x,{...e})}):x(e)}},19365:(e,r,t)=>{t.d(r,{A:()=>n});t(96540);var l=t(34164);const i={tabItem:"tabItem_Ymn6"};var d=t(74848);function n(e){let{children:r,hidden:t,className:n}=e;return(0,d.jsx)("div",{role:"tabpanel",className:(0,l.A)(i.tabItem,n),hidden:t,children:r})}},11470:(e,r,t)=>{t.d(r,{A:()=>D});var l=t(96540),i=t(34164),d=t(23104),n=t(56347),s=t(205),a=t(57485),c=t(31682),m=t(70679);function h(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:r,children:t}=e;return(0,l.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:t,attributes:l,default:i}}=e;return{value:r,label:t,attributes:l,default:i}}))}(t);return function(e){const r=(0,c.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function o(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function g(e){let{queryString:r=!1,groupId:t}=e;const i=(0,n.W6)(),d=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,a.aZ)(d),(0,l.useCallback)((e=>{if(!d)return;const r=new URLSearchParams(i.location.search);r.set(d,e),i.replace({...i.location,search:r.toString()})}),[d,i])]}function j(e){const{defaultValue:r,queryString:t=!1,groupId:i}=e,d=x(e),[n,a]=(0,l.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!o({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const l=t.find((e=>e.default))??t[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:r,tabValues:d}))),[c,h]=g({queryString:t,groupId:i}),[j,u]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[i,d]=(0,m.Dv)(t);return[i,(0,l.useCallback)((e=>{t&&d.set(e)}),[t,d])]}({groupId:i}),p=(()=>{const e=c??j;return o({value:e,tabValues:d})?e:null})();(0,s.A)((()=>{p&&a(p)}),[p]);return{selectedValue:n,selectValue:(0,l.useCallback)((e=>{if(!o({value:e,tabValues:d}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),u(e)}),[h,u,d]),tabValues:d}}var u=t(92303);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function f(e){let{className:r,block:t,selectedValue:l,selectValue:n,tabValues:s}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,d.a_)(),m=e=>{const r=e.currentTarget,t=a.indexOf(r),i=s[t].value;i!==l&&(c(r),n(i))},h=e=>{let r=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;r=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;r=a[t]??a[a.length-1];break}}r?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},r),children:s.map((e=>{let{value:r,label:t,attributes:d}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:l===r?0:-1,"aria-selected":l===r,ref:e=>a.push(e),onKeyDown:h,onClick:m,...d,className:(0,i.A)("tabs__item",p.tabItem,d?.className,{"tabs__item--active":l===r}),children:t??r},r)}))})}function S(e){let{lazy:r,children:t,selectedValue:i}=e;const d=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=d.find((e=>e.props.value===i));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:d.map(((e,r)=>(0,l.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function R(e){const r=j(e);return(0,y.jsxs)("div",{className:(0,i.A)("tabs-container",p.tabList),children:[(0,y.jsx)(f,{...r,...e}),(0,y.jsx)(S,{...r,...e})]})}function D(e){const r=(0,u.A)();return(0,y.jsx)(R,{...e,children:h(e.children)},String(r))}},28453:(e,r,t)=>{t.d(r,{R:()=>n,x:()=>s});var l=t(96540);const i={},d=l.createContext(i);function n(e){const r=l.useContext(d);return l.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),l.createElement(d.Provider,{value:r},e.children)}}}]);