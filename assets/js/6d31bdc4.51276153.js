"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[45170],{61762:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(74848),i=n(28453);const s={title:"Order Management",sidebar_position:4},t=void 0,o={id:"Documentation/PlatformFeatures/OrderManagement/OrderManagement",title:"Order Management",description:"Execution Engine Overview",source:"@site/docs/Documentation/PlatformFeatures/OrderManagement/OrderManagement.md",sourceDirName:"Documentation/PlatformFeatures/OrderManagement",slug:"/Documentation/PlatformFeatures/OrderManagement/",permalink:"/docs/Documentation/PlatformFeatures/OrderManagement/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Order Management",sidebar_position:4},sidebar:"documentationSidebar",previous:{title:"Market Analytics",permalink:"/docs/Documentation/PlatformFeatures/Analytics/"},next:{title:"Execution Algorithms",permalink:"/docs/Documentation/PlatformFeatures/OrderManagement/ExecutionAlgorithms"}},l={},c=[{value:"Execution Engine Overview",id:"execution-engine-overview",level:2},{value:"Execution Algorithms",id:"execution-algorithms",level:2},{value:"Primary and Secondary Order Limits",id:"primary-and-secondary-order-limits",level:2},{value:"Active Taking",id:"active-taking",level:2},{value:"Active Making",id:"active-making",level:2},{value:"Contingent Cancelling",id:"contingent-cancelling",level:2},{value:"Progression Algos",id:"progression-algos",level:2},{value:"Spreads vs Singles",id:"spreads-vs-singles",level:2},{value:"AutoHedging",id:"autohedging",level:2},{value:"Legging Orders",id:"legging-orders",level:2},{value:"Contingent Taking",id:"contingent-taking",level:2},{value:"Execution Risk Counters",id:"execution-risk-counters",level:2},{value:"Integrated MAR Risk Controls",id:"integrated-mar-risk-controls",level:2},{value:"Integrated Supervisory Risk Controls",id:"integrated-supervisory-risk-controls",level:2},{value:"Risk Group Controls",id:"risk-group-controls",level:2},{value:"Integrated Compliance Controls",id:"integrated-compliance-controls",level:2},{value:"Child Order Flow Control",id:"child-order-flow-control",level:2},{value:"Accessing The SpiderRock Connect ATS",id:"accessing-the-spiderrock-connect-ats",level:2},{value:"Exchange Auction Responding",id:"exchange-auction-responding",level:2},{value:"Away Order Routing",id:"away-order-routing",level:2},{value:"Market Data Considerations",id:"market-data-considerations",level:2},{value:"Embedded Exchange Simulators",id:"embedded-exchange-simulators",level:2},{value:"TCA Metrics",id:"tca-metrics",level:2}];function d(e){const r={annotation:"annotation",h2:"h2",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",semantics:"semantics",span:"span",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"execution-engine-overview",children:"Execution Engine Overview"}),"\n",(0,a.jsx)(r.p,{children:"SpiderRock Execution Engines are at the center of order and execution management within the SpiderRock platform.  Each engine is responsible for parent and child order handling and adjacent tasks for a subset of the SpiderRock product universe.  At present, this product universe is divided into 10 US Equity/Option stripes, 1 CME Future/Option stripe, 1 CFE Future/Option stripe, and 1 EUX Future/Option stripe with stripes and their associated engines located near the relevant exchange matching engine.  All execution engines process all of the market data for their product subset regardless of whether resting parent order or client interest exists for a specific product within a subset. As a result, our execution engine topology reflects both geography as well as market data load balancing considerations and is subject to change over time."}),"\n",(0,a.jsx)(r.p,{children:"SpiderRock also operates street-side order gateway servers located between our execution engines and the various exchange and market access points. These street gateways are responsible for routing child (exchange or broker) orders and quotes either directly to exchange matching engines and other alternative trading systems or to other market access brokers for forwarding."}),"\n",(0,a.jsx)(r.p,{children:"All client orders that enter SpiderRock execution engines are considered parent orders (from our perspective) regardless of the order source (eg. SpiderRock Tools, SRSE or MLink Parent Order Gateways, FIX Client Gateways).  Upon arrival, the first parent order in a cancel/replace sequence will create a ParentBroker within an execution engine and initialize that broker which will begin generating child orders according the instructions attached to that parent order.  Subsequent parent orders in the same chain will act to modify or cancel the resting instructions of the associated ParentBroker.  Using FIX, this can be done with the standard FIX cancel/replace techniques.  With SRSE and MLink this action is performed by simply sending another SpdrParentOrder with them same ParentBroker primary key fields."}),"\n",(0,a.jsx)(r.p,{children:"Execution engines publish SpdrParentReport messages which capture and restate all reporting relevent details for each individual SpdrParentOrder that has been received as well as SpdrParentExecution messages for each individual (child level) fill reported for the associated ParentBroker.  These records, in combination, contain all of the details necessary to (re)create either a FIX parent order drop stream or a FIX execution only drop stream.   They also contain all of the details necessary to generate SpiderRock side CAT reports."}),"\n",(0,a.jsx)(r.p,{children:"In addition, at regular intervals, execution engines publish SpdrParentBrkrState, SpdrParentBrkrDetail records that contain execution state for each active (single instrument) ParentBrokers as well as SpdrMLegBrkrState records that contain state and markup details for all active (multi-leg) ParentBrokers. These records are publish more frequently and contain additional information (eg. current effective limit prices, TCA execution markup, risk control state, etc) not usually found in simpler FIX execution reports."}),"\n",(0,a.jsx)(r.p,{children:"For clients that wish to operate longer running algos SpiderRock provides SpdrParentLimit messages. These records contain many of the same fields that are found in the SpdrParentOrder messages.  If a SpdrParentOrder allows for 'delegation' to a SpdrParentLimit then fields in the SpdrParentLimit record will take precedence over those found in the SpdrParentOrder message.  This is advantageous because SpdrParentLimit records can be accepted and processed at much higher rates that SpdrParentOrder records and do not cause excessive FIX cancel/replace transactions when creating downstream drop copies."}),"\n",(0,a.jsx)(r.p,{children:"Parent orders can be cancelled in a number of ways, including by cancelling an individual SpdrParentOrder (by parentNumber), an entire SpdrParentOrder chain (by baseParentNumber), by ParentBroker pkey (accnt, clientFirm, secKey, secType, orderSide, spdrSource, and groupingCode), by account, or by clientFirm.  Cancel messages can be send via FIX, MLink, and SRSE interchangebly.  For example, an order sent in via FIX can be cancelled with a SpdrAccntCancel message sent via an MLink server."}),"\n",(0,a.jsx)(r.p,{children:"ParentBrokers, once initialized, continually monitor markets and create or cancel child orders as instructed until their current instructions have been fully satified, expire, or are cancelled."}),"\n",(0,a.jsx)(r.p,{children:"SpiderRock execution systems are optimized for high performance (low latency) between execution engines, street gateways, and the markets and normal performance (1 ms or so) between client system and SpiderRock execution engines."}),"\n",(0,a.jsx)(r.h2,{id:"execution-algorithms",children:"Execution Algorithms"}),"\n",(0,a.jsx)(r.p,{children:"SpiderRock execution algorithms, or more specifically, parent order handling frameworks, are the engine components primarily responsible for creating and canceling child orders. The most commonly utilized frameworks are ActiveTaker and ActiveMaker which can operate either individually or in combination.  The ActiveTaker framework only generates child orders that are immediately marketable while the ActiveMaker framework only generates child orders that are NOT immediately marketable. Some parent order instructions are desiged to generate at most one child order while others can create and cancel many child orders over time as related markets move around."}),"\n",(0,a.jsx)(r.p,{children:"These frameworks can be used for equities, futures, and options as well as spreads and are the underlying handlers for our longer running progression algo family."}),"\n",(0,a.jsx)(r.p,{children:"With the introduction of the SpiderRock Connect ATS active taker handlers are also capable of initiating flash auctions in some circumstances. In addition, both our active maker and active taker frameworks are capable of responding to SpiderRock Connect auction as well as all exchange or other ATS originated auctions."}),"\n",(0,a.jsx)(r.p,{children:"We also have special purpose order handling frameworks that can place child orders in exchange open/closing auctions, perform co-ordinated cross market sweeps, and execute other specialized order actions."}),"\n",(0,a.jsx)(r.p,{children:"At a higher level our engines also feature several types of mulit-step progression algos that work parent orders over time utilizing single purpose frameworks at each step. Examples include the VWAP, TWAP, and SpiderPulse as well as Seeker and Legger (spreads) algo families."}),"\n",(0,a.jsx)(r.h2,{id:"primary-and-secondary-order-limits",children:"Primary and Secondary Order Limits"}),"\n",(0,a.jsx)(r.p,{children:"All of our order handling frameworks feature split (primary and secondary) client limit price handling.  Clients directly supply the primary limit, either as a static limit or a simple formula based limit (volatility, delta/gamma adjusted, etc). The secondary limit is computed from a combination of an offset the client has supplied and a live fair market value that SpiderRock supplies. The effective limit when creating or canceling child orders is then the combination of the primary and secondary limit."}),"\n",(0,a.jsxs)(r.p,{children:["For example, a BUY order with a primary limit of ",(0,a.jsxs)(r.span,{className:"katex",children:[(0,a.jsx)(r.span,{className:"katex-mathml",children:(0,a.jsx)(r.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(r.semantics,{children:[(0,a.jsxs)(r.mrow,{children:[(0,a.jsx)(r.mn,{children:"1.00"}),(0,a.jsx)(r.mi,{children:"a"}),(0,a.jsx)(r.mi,{children:"n"}),(0,a.jsx)(r.mi,{children:"d"}),(0,a.jsx)(r.mi,{children:"a"}),(0,a.jsx)(r.mi,{children:"s"}),(0,a.jsx)(r.mi,{children:"e"}),(0,a.jsx)(r.mi,{children:"c"}),(0,a.jsx)(r.mi,{children:"o"}),(0,a.jsx)(r.mi,{children:"n"}),(0,a.jsx)(r.mi,{children:"d"}),(0,a.jsx)(r.mi,{children:"a"}),(0,a.jsx)(r.mi,{children:"r"}),(0,a.jsx)(r.mi,{children:"y"}),(0,a.jsx)(r.mi,{children:"o"}),(0,a.jsx)(r.mi,{children:"f"}),(0,a.jsx)(r.mi,{children:"f"}),(0,a.jsx)(r.mi,{children:"s"}),(0,a.jsx)(r.mi,{children:"e"}),(0,a.jsx)(r.mi,{children:"t"}),(0,a.jsx)(r.mi,{children:"o"}),(0,a.jsx)(r.mi,{children:"f"}),(0,a.jsx)(r.mo,{children:"+"})]}),(0,a.jsx)(r.annotation,{encoding:"application/x-tex",children:"1.00 and a secondary offset of +"})]})})}),(0,a.jsx)(r.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(r.span,{className:"base",children:[(0,a.jsx)(r.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,a.jsx)(r.span,{className:"mord",children:"1.00"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"an"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"d"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"a"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"seco"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"d"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"a"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"ryo"}),(0,a.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"ff"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"se"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"o"}),(0,a.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,a.jsx)(r.span,{className:"mord",children:"+"})]})})]}),"0.01 with the SpiderRock fair market value at ",(0,a.jsxs)(r.span,{className:"katex",children:[(0,a.jsx)(r.span,{className:"katex-mathml",children:(0,a.jsx)(r.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(r.semantics,{children:[(0,a.jsxs)(r.mrow,{children:[(0,a.jsx)(r.mn,{children:"0.95"}),(0,a.jsx)(r.mi,{children:"w"}),(0,a.jsx)(r.mi,{children:"o"}),(0,a.jsx)(r.mi,{children:"u"}),(0,a.jsx)(r.mi,{children:"l"}),(0,a.jsx)(r.mi,{children:"d"}),(0,a.jsx)(r.mi,{children:"h"}),(0,a.jsx)(r.mi,{children:"a"}),(0,a.jsx)(r.mi,{children:"v"}),(0,a.jsx)(r.mi,{children:"e"}),(0,a.jsx)(r.mi,{children:"a"}),(0,a.jsx)(r.mi,{children:"n"}),(0,a.jsx)(r.mi,{children:"e"}),(0,a.jsx)(r.mi,{children:"f"}),(0,a.jsx)(r.mi,{children:"f"}),(0,a.jsx)(r.mi,{children:"e"}),(0,a.jsx)(r.mi,{children:"c"}),(0,a.jsx)(r.mi,{children:"t"}),(0,a.jsx)(r.mi,{children:"i"}),(0,a.jsx)(r.mi,{children:"v"}),(0,a.jsx)(r.mi,{children:"e"}),(0,a.jsx)(r.mi,{children:"l"}),(0,a.jsx)(r.mi,{children:"i"}),(0,a.jsx)(r.mi,{children:"m"}),(0,a.jsx)(r.mi,{children:"i"}),(0,a.jsx)(r.mi,{children:"t"}),(0,a.jsx)(r.mi,{children:"o"}),(0,a.jsx)(r.mi,{children:"f"})]}),(0,a.jsx)(r.annotation,{encoding:"application/x-tex",children:"0.95 would have an effective limit of "})]})})}),(0,a.jsx)(r.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(r.span,{className:"base",children:[(0,a.jsx)(r.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,a.jsx)(r.span,{className:"mord",children:"0.95"}),(0,a.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.02691em"},children:"w"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"o"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"d"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"ha"}),(0,a.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"e"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"an"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"e"}),(0,a.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"ff"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"ec"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"i"}),(0,a.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"e"}),(0,a.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"imi"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(r.span,{className:"mord mathnormal",children:"o"}),(0,a.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"})]})})]}),"0.96 (minimum of the primary and instantaneous secondary limit)."]}),"\n",(0,a.jsx)(r.p,{children:"SpiderRock engines have machine learning based fair price models that continuously compute fair market values for most bid/ask markets.  In addition we have surface based fair market values for most options markets."}),"\n",(0,a.jsx)(r.h2,{id:"active-taking",children:"Active Taking"}),"\n",(0,a.jsx)(r.h2,{id:"active-making",children:"Active Making"}),"\n",(0,a.jsx)(r.h2,{id:"contingent-cancelling",children:"Contingent Cancelling"}),"\n",(0,a.jsx)(r.h2,{id:"progression-algos",children:"Progression Algos"}),"\n",(0,a.jsx)(r.h2,{id:"spreads-vs-singles",children:"Spreads vs Singles"}),"\n",(0,a.jsx)(r.h2,{id:"autohedging",children:"AutoHedging"}),"\n",(0,a.jsx)(r.h2,{id:"legging-orders",children:"Legging Orders"}),"\n",(0,a.jsx)(r.h2,{id:"contingent-taking",children:"Contingent Taking"}),"\n",(0,a.jsx)(r.h2,{id:"execution-risk-counters",children:"Execution Risk Counters"}),"\n",(0,a.jsx)(r.p,{children:"SpiderRock execution engines maintain a collection of risk counters for all orders and executions handled by the engine. These risk counters are used with MAR and Supervisory risk controls as well as parent order RiskGroupID controls to constrain the generation of child orders. ParentBrokers continually check all risk counters and their associated risk controls to establish a Minimum Available Risk Size (size to the most restrictive risk limit) while they are active. This available risk size value becomes an upper bound on the size of any child order generated by the system and can also result in resting child order being immediately cancelled if they no longer have enough risk size to fill the balance of the child order."}),"\n",(0,a.jsx)(r.h2,{id:"integrated-mar-risk-controls",children:"Integrated MAR Risk Controls"}),"\n",(0,a.jsx)(r.p,{children:"Multiple sets of MAR risk control records typically exist for each clientFirm and account in the system. One of these record sets is under the exclusive control of SpiderRock and is required to exist for order handling to proceed.  Other MAR risk control sets are under the control of the client.  And others are under the exclusive control of their their prime broker or sponsor."}),"\n",(0,a.jsx)(r.p,{children:"MAR risk control records contain restrictions on parent order size as well as total account and ticker margin and contracts."}),"\n",(0,a.jsx)(r.p,{children:"Parent orders are rejected if they violate a parent order arrival contraint from any of the MAR risk control sets.  Once an associated ParentBroker is active all potential child orders are constrained by all related MAR risk control records."}),"\n",(0,a.jsx)(r.h2,{id:"integrated-supervisory-risk-controls",children:"Integrated Supervisory Risk Controls"}),"\n",(0,a.jsx)(r.p,{children:"Clients can, in addition to MAR risk controls, establish firm specific supervisory risk controls.  These controls focus on accounts and product groups and allow share, contract, and greek based contraints."}),"\n",(0,a.jsx)(r.p,{children:"Parent orders are rejected if they violate a parent order arrival contraint from a supervisory risk record.  And all associated child order size are also contrainted by relevant supervisory risk controls (if any)."}),"\n",(0,a.jsx)(r.h2,{id:"risk-group-controls",children:"Risk Group Controls"}),"\n",(0,a.jsx)(r.p,{children:"Parent orders and associated ParentBrokers can be part of an account RiskGroup (RiskGroupID + Accnt). If associated with a RiskGroup all child orders that would be generated by a ParentBroker are constrained by the RiskGroup controls established by the parent order."}),"\n",(0,a.jsx)(r.p,{children:"RiskGroup control values can be supplied on individual parent orders (RiskGroupID and the risk group control fields are parent order parameters) or they can be established by created via SpdrRiskGroupControl live-data objects (parent order contains a RiskGroupID and the associated SpdrRiskGroupControl message contains teh control levels)."}),"\n",(0,a.jsx)(r.h2,{id:"integrated-compliance-controls",children:"Integrated Compliance Controls"}),"\n",(0,a.jsx)(r.h2,{id:"child-order-flow-control",children:"Child Order Flow Control"}),"\n",(0,a.jsx)(r.p,{children:"SpiderRock execution engines are usually capable of generating child orders (much) faster than downstream systems can consume them.  This is especially common when simultaneously managing large numbers of orders in option markets with active/volitile underlying securities and tight cancel/replace child order thresholds. In order to successfully manage orders in this type of environment SpiderRock utilizes a sophisticated child order flow control design that classifies and priorizes child order flow to ensure that immediate high priority cancel bandwith is always available under normal operation at the potential cost of delaying creation of new child orders. This acts to protect down stream systems from queuing or rejecting child orders and cancels during market bursts, both of which can adversely affect execution quality.  To mitigate the impacts of this type of flow control SpiderRock monitors its' own exchange connectivity pool and adds capacity as necessary and also works with downstream brokers to ensure sufficient capacity on order handling sessions in which SpiderRock does not control the last leg of the exchange routing path."}),"\n",(0,a.jsx)(r.h2,{id:"accessing-the-spiderrock-connect-ats",children:"Accessing The SpiderRock Connect ATS"}),"\n",(0,a.jsx)(r.h2,{id:"exchange-auction-responding",children:"Exchange Auction Responding"}),"\n",(0,a.jsx)(r.h2,{id:"away-order-routing",children:"Away Order Routing"}),"\n",(0,a.jsx)(r.h2,{id:"market-data-considerations",children:"Market Data Considerations"}),"\n",(0,a.jsx)(r.h2,{id:"embedded-exchange-simulators",children:"Embedded Exchange Simulators"}),"\n",(0,a.jsx)(r.h2,{id:"tca-metrics",children:"TCA Metrics"})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>o});var a=n(96540);const i={},s=a.createContext(i);function t(e){const r=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(s.Provider,{value:r},e.children)}}}]);