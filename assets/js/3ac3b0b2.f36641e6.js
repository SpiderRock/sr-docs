"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[63879],{41324:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>c,toc:()=>h});var i=r(74848),a=r(28453),n=r(11470),s=r(19365);const d={title:"SpdrParentBrkrDetail"},l="Schema: SpdrParentBrkrDetail (ID: 4060)",c={id:"MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrDetail",title:"SpdrParentBrkrDetail",description:"SpdrParentBrkrDetail records are created/published by SpiderRock Execution Engines. Each record describes the current active detail of a single parent broker.",source:"@site/versioned_docs/version-8.4.12.1/MessageSchemas/Schema/Topics/3985-parent-orders/SpdrParentBrkrDetail.md",sourceDirName:"MessageSchemas/Schema/Topics/3985-parent-orders",slug:"/MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrDetail",permalink:"/docs/8.4.12.1/MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrDetail",draft:!1,unlisted:!1,tags:[],version:"8.4.12.1",frontMatter:{title:"SpdrParentBrkrDetail"},sidebar:"messageSchemasSidebar",previous:{title:"SpdrMLegBrkrState",permalink:"/docs/8.4.12.1/MessageSchemas/Schema/Topics/parent-orders/SpdrMLegBrkrState"},next:{title:"SpdrParentBrkrEvent",permalink:"/docs/8.4.12.1/MessageSchemas/Schema/Topics/parent-orders/SpdrParentBrkrEvent"}},o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function x(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h1,{id:"schema-spdrparentbrkrdetail-id-4060",children:["Schema: SpdrParentBrkrDetail ",(0,i.jsx)("span",{className:"small-text",children:"(ID: 4060)"})]}),"\n",(0,i.jsx)(t.p,{children:"SpdrParentBrkrDetail records are created/published by SpiderRock Execution Engines. Each record describes the current active detail of a single parent broker."}),"\n",(0,i.jsx)(t.h3,{id:"metadata",children:"METADATA"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Attribute"}),(0,i.jsx)(t.th,{children:"Value"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Topic"}),(0,i.jsx)(t.td,{children:"3985-parent-orders"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"MLink Token"}),(0,i.jsx)(t.td,{children:"Internal"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SRSE Product"}),(0,i.jsx)(t.td,{children:"SRTrade"})]})]})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Note:"})," The symbol ",(0,i.jsx)(t.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"body",children:"BODY"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"#"}),(0,i.jsx)(t.th,{children:"Field"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Comment"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"10="}),(0,i.jsx)(t.td,{children:"accnt"}),(0,i.jsx)(t.td,{children:"string(16)"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"11="}),(0,i.jsx)(t.td,{children:"secKey"}),(0,i.jsx)(t.td,{children:"OptionKey"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"12="}),(0,i.jsx)(t.td,{children:"secType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"13="}),(0,i.jsx)(t.td,{children:"spdrSource"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/SpdrSource",children:"enum : SpdrSource"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"14="}),(0,i.jsx)(t.td,{children:"groupingCode"}),(0,i.jsx)(t.td,{children:"long"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"15="}),(0,i.jsx)(t.td,{children:"orderSide"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"16="}),(0,i.jsx)(t.td,{children:"clientFirm"}),(0,i.jsx)(t.td,{children:"string(16)"}),(0,i.jsx)(t.td,{children:"SR client firm"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"100"}),(0,i.jsx)(t.td,{children:"userName"}),(0,i.jsx)(t.td,{children:"string(24)"}),(0,i.jsx)(t.td,{children:"SR user name string"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"106"}),(0,i.jsx)(t.td,{children:"engineName"}),(0,i.jsx)(t.td,{children:"text1"}),(0,i.jsx)(t.td,{children:"server stripe"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"109"}),(0,i.jsx)(t.td,{children:"parentNumber"}),(0,i.jsx)(t.td,{children:"long"}),(0,i.jsx)(t.td,{children:"SR parent number"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"112"}),(0,i.jsx)(t.td,{children:"baseParentNumber"}),(0,i.jsx)(t.td,{children:"long"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"115"}),(0,i.jsx)(t.td,{children:"riskGroupId"}),(0,i.jsx)(t.td,{children:"long"}),(0,i.jsx)(t.td,{children:"all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"118"}),(0,i.jsx)(t.td,{children:"triggerGroupId"}),(0,i.jsx)(t.td,{children:"long"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"124"}),(0,i.jsx)(t.td,{children:"strategy"}),(0,i.jsx)(t.td,{children:"string(36)"}),(0,i.jsx)(t.td,{children:"parent order strategy (description only)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"581"}),(0,i.jsx)(t.td,{children:"spdrStageType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/SpdrStageType",children:"enum : SpdrStageType"})}),(0,i.jsx)(t.td,{children:"parent is a staged order [ToolVisible]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"582"}),(0,i.jsx)(t.td,{children:"startType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/StartType",children:"enum : StartType"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"127"}),(0,i.jsx)(t.td,{children:"maxExposureSize"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"130"}),(0,i.jsx)(t.td,{children:"numMakeExchanges"}),(0,i.jsx)(t.td,{children:"byte"}),(0,i.jsx)(t.td,{children:"number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"133"}),(0,i.jsx)(t.td,{children:"publicSize"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/PublicSizeHandling",children:"enum : PublicSizeHandling"})}),(0,i.jsx)(t.td,{children:"public order size handling"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"136"}),(0,i.jsx)(t.td,{children:"canOverlapCxlRepl"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,i.jsx)(t.td,{children:"can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"139"}),(0,i.jsx)(t.td,{children:"progressRule"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ProgressRule",children:"enum : ProgressRule"})}),(0,i.jsx)(t.td,{children:"Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"142"}),(0,i.jsx)(t.td,{children:"progressSliceCnt"}),(0,i.jsx)(t.td,{children:"byte"}),(0,i.jsx)(t.td,{children:"number of progress slices to use (default = 4 or 8) [max 20]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"145"}),(0,i.jsx)(t.td,{children:"progressExposeTime"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"148"}),(0,i.jsx)(t.td,{children:"vwapParticipation"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"target vwap participation rate (target % of trade activity)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"151"}),(0,i.jsx)(t.td,{children:"minMktOnClosePct"}),(0,i.jsx)(t.td,{children:"byte"}),(0,i.jsx)(t.td,{children:"Minimum pct [0 - 100] of order reserved for the on-close auction"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"154"}),(0,i.jsx)(t.td,{children:"triggerType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/TriggerType",children:"enum : TriggerType"})}),(0,i.jsx)(t.td,{children:"type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"157"}),(0,i.jsx)(t.td,{children:"triggerLevel"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"stop/trigger price for parent order to go active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"583"}),(0,i.jsx)(t.td,{children:"marketSession"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/MarketSession",children:"enum : MarketSession"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"163"}),(0,i.jsx)(t.td,{children:"startDttm"}),(0,i.jsx)(t.td,{children:"DateTime"}),(0,i.jsx)(t.td,{children:"[optional] (parent order start time)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"166"}),(0,i.jsx)(t.td,{children:"orderDuration"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"[optional] (number of seconds)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"169"}),(0,i.jsx)(t.td,{children:"goodTillDttm"}),(0,i.jsx)(t.td,{children:"DateTime"}),(0,i.jsx)(t.td,{children:"[optional] (default: 2099-01-01)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"584"}),(0,i.jsx)(t.td,{children:"expireDttm"}),(0,i.jsx)(t.td,{children:"DateTime"}),(0,i.jsx)(t.td,{children:"EE Parent Order Expiry Dttm"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"172"}),(0,i.jsx)(t.td,{children:"cxlUPrcRange"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/UPrcCxl",children:"enum : UPrcCxl"})}),(0,i.jsx)(t.td,{children:"cancel spdr order if/when outside stock price range"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"175"}),(0,i.jsx)(t.td,{children:"minUBid"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"[optional]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"178"}),(0,i.jsx)(t.td,{children:"maxUAsk"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"[optional] (< $0.01 = none)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"181"}),(0,i.jsx)(t.td,{children:"minMaxType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/MinMaxType",children:"enum : MinMaxType"})}),(0,i.jsx)(t.td,{children:"if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"184"}),(0,i.jsx)(t.td,{children:"minOptionPx"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"[optional] option price floor for tied to stock orders"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"187"}),(0,i.jsx)(t.td,{children:"maxChildOrders"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"190"}),(0,i.jsx)(t.td,{children:"exchMask"}),(0,i.jsx)(t.td,{children:"uint"}),(0,i.jsx)(t.td,{children:"eligible exchanges (0 = all)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"587"}),(0,i.jsx)(t.td,{children:"externExDest"}),(0,i.jsx)(t.td,{children:"string(16)"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"586"}),(0,i.jsx)(t.td,{children:"execBrkrCode"}),(0,i.jsx)(t.td,{children:"string(16)"}),(0,i.jsx)(t.td,{children:"execBrkrCode attached to parent order (if any)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"196"}),(0,i.jsx)(t.td,{children:"positionType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"199"}),(0,i.jsx)(t.td,{children:"ssaleFlag"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"202"}),(0,i.jsx)(t.td,{children:"locateQuan"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"available locate quantity (if selling short) @ child order send time"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"205"}),(0,i.jsx)(t.td,{children:"locateFirm"}),(0,i.jsx)(t.td,{children:"string(6)"}),(0,i.jsx)(t.td,{children:"firm granting the locate (also locate firm used on street FIX orders)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"208"}),(0,i.jsx)(t.td,{children:"locatePool"}),(0,i.jsx)(t.td,{children:"string(16)"}),(0,i.jsx)(t.td,{children:"locate pool @ firm granting the locate"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"211"}),(0,i.jsx)(t.td,{children:"parentOrderHandling"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ParentOrderHandling",children:"enum : ParentOrderHandling"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"214"}),(0,i.jsx)(t.td,{children:"parentBalanceHandling"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ParentBalanceHandling",children:"enum : ParentBalanceHandling"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"217"}),(0,i.jsx)(t.td,{children:"blockVisibility"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/BlockVisibility",children:"enum : BlockVisibility"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"220"}),(0,i.jsx)(t.td,{children:"orderLimitType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/SpdrLimitType",children:"enum : SpdrLimitType"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"223"}),(0,i.jsx)(t.td,{children:"takeLimitClass"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,i.jsx)(t.td,{children:"Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"226"}),(0,i.jsx)(t.td,{children:"makeLimitClass"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,i.jsx)(t.td,{children:"Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"229"}),(0,i.jsx)(t.td,{children:"takeReachRule"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ReachRule",children:"enum : ReachRule"})}),(0,i.jsx)(t.td,{children:"Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"232"}),(0,i.jsx)(t.td,{children:"orderPrcLimit"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{children:"Applies if LimitType = Prc[]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"235"}),(0,i.jsx)(t.td,{children:"orderRefUPrc"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{children:"default=underlier.mid"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"238"}),(0,i.jsx)(t.td,{children:"orderRefDelta"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"default=option.delta"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"241"}),(0,i.jsx)(t.td,{children:"orderRefGamma"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"default=option.gamma"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"244"}),(0,i.jsx)(t.td,{children:"orderRefTheta"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"247"}),(0,i.jsx)(t.td,{children:"orderRefYears"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"250"}),(0,i.jsx)(t.td,{children:"orderVolLimit"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"Applies if LimitType = Vol[] [uses SR dividends and borrow rates]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"253"}),(0,i.jsx)(t.td,{children:"rateOverride"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"zero = ignore;> zero = override"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"256"}),(0,i.jsx)(t.td,{children:"sdivOverride"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"259"}),(0,i.jsx)(t.td,{children:"ddivOverride"}),(0,i.jsx)(t.td,{children:"text2"}),(0,i.jsxs)(t.td,{children:["discrete dividend string override ([yearsToExpiry,divYears",":divAmount",",divYears",":divAmount",", ...])"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"262"}),(0,i.jsx)(t.td,{children:"overrideCode"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/OverrideCode",children:"enum : OverrideCode"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"265"}),(0,i.jsx)(t.td,{children:"orderPrcOffset"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{children:"default=0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"268"}),(0,i.jsx)(t.td,{children:"takeAlphaType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,i.jsx)(t.td,{children:"Applies if takeLimitClass = Probability"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"271"}),(0,i.jsx)(t.td,{children:"makeAlphaType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,i.jsx)(t.td,{children:"Applies if makeLimitClass = Probability"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"274"}),(0,i.jsx)(t.td,{children:"takeAlphaFactor"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"[-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"277"}),(0,i.jsx)(t.td,{children:"makeAlphaFactor"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"[-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"280"}),(0,i.jsx)(t.td,{children:"takeProbability"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"takeProbLimit = takeProbability [if takeAlphaType = Static]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"283"}),(0,i.jsx)(t.td,{children:"makeProbability"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"makeProbLimit = makeProbability [if makeAlphaType = Static]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"286"}),(0,i.jsx)(t.td,{children:"takeSurfPrcOffset"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{children:"default=0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"289"}),(0,i.jsx)(t.td,{children:"takeSurfVolOffset"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"default=0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"292"}),(0,i.jsx)(t.td,{children:"takeSurfWidthOffset"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"[-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"295"}),(0,i.jsx)(t.td,{children:"makeSurfPrcOffset"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{children:"default=0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"298"}),(0,i.jsx)(t.td,{children:"makeSurfVolOffset"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"default=0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"301"}),(0,i.jsx)(t.td,{children:"makeSurfWidthOffset"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"[-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"328"}),(0,i.jsx)(t.td,{children:"expDayWtVegaOffset"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day wtVega offset (target)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"322"}),(0,i.jsx)(t.td,{children:"maxExpDayWtVegaLn"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"325"}),(0,i.jsx)(t.td,{children:"maxExpDayWtVegaSh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"358"}),(0,i.jsx)(t.td,{children:"maxExpDayRMetric6Ln"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"361"}),(0,i.jsx)(t.td,{children:"maxExpDayRMetric6Sh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"355"}),(0,i.jsx)(t.td,{children:"symDayDDeltaOffset"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day $delta offset (target)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"349"}),(0,i.jsx)(t.td,{children:"maxSymDayDDeltaLn"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"352"}),(0,i.jsx)(t.td,{children:"maxSymDayDDeltaSh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"337"}),(0,i.jsx)(t.td,{children:"symDayVegaOffset"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day vega offset (target)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"331"}),(0,i.jsx)(t.td,{children:"maxSymDayVegaLn"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"334"}),(0,i.jsx)(t.td,{children:"maxSymDayVegaSh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"346"}),(0,i.jsx)(t.td,{children:"symDayWtVegaOffset"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day wtVega offset (target)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"340"}),(0,i.jsx)(t.td,{children:"maxSymDayWtVegaLn"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"343"}),(0,i.jsx)(t.td,{children:"maxSymDayWtVegaSh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"367"}),(0,i.jsx)(t.td,{children:"maxSymDayRMetric7Ln"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"370"}),(0,i.jsx)(t.td,{children:"maxSymDayRMetric7Sh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"376"}),(0,i.jsx)(t.td,{children:"maxGrpDayDDeltaLn"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"379"}),(0,i.jsx)(t.td,{children:"maxGrpDayDDeltaSh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"385"}),(0,i.jsx)(t.td,{children:"maxGrpDayVegaLn"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"388"}),(0,i.jsx)(t.td,{children:"maxGrpDayVegaSh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"391"}),(0,i.jsx)(t.td,{children:"maxGrpDayVegaAbs"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"394"}),(0,i.jsx)(t.td,{children:"grpDayVegaRatio"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"445"}),(0,i.jsx)(t.td,{children:"maxGrpDayContractsLn"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day opt contracts long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"448"}),(0,i.jsx)(t.td,{children:"maxGrpDayContractsSh"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day opt contracts short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"451"}),(0,i.jsx)(t.td,{children:"maxGrpDayContractsAbs"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day opt contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"409"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric1Ln"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"412"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric1Sh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"415"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric1Abs"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"418"}),(0,i.jsx)(t.td,{children:"grpDayRMetric1Ratio"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"421"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric2Ln"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"424"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric2Sh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"427"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric3Ln"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"430"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric3Sh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"433"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric4Ln"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"436"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric4Sh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"439"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric5Ln"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"442"}),(0,i.jsx)(t.td,{children:"maxGrpDayRMetric5Sh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"454"}),(0,i.jsx)(t.td,{children:"symEmaCxlDDeltaLn"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"457"}),(0,i.jsx)(t.td,{children:"symEmaCxlDDeltaSh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"460"}),(0,i.jsx)(t.td,{children:"symEmaCxlWtVegaLn"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"463"}),(0,i.jsx)(t.td,{children:"symEmaCxlWtVegaSh"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"466"}),(0,i.jsx)(t.td,{children:"arriveBid"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"469"}),(0,i.jsx)(t.td,{children:"arriveAsk"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"472"}),(0,i.jsx)(t.td,{children:"arriveSweepCount"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"number of parent orders arriving with immediately available sweep qty"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"475"}),(0,i.jsx)(t.td,{children:"arriveSweepOrderQty"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total size of all child orders generated due to parent order arrival sweep"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"478"}),(0,i.jsx)(t.td,{children:"arriveSweepFillQty"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total fill size due to parent order arrival sweep"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"481"}),(0,i.jsx)(t.td,{children:"numSweepChildOrders"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"child orders generated in initial arrival sweep"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"484"}),(0,i.jsx)(t.td,{children:"auctionLink"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total linkage auction contracts while parent order was active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"487"}),(0,i.jsx)(t.td,{children:"auctionFace"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total facilitation auction contracts while parent order was active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"490"}),(0,i.jsx)(t.td,{children:"auctionResp"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total auction response contracts"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"493"}),(0,i.jsx)(t.td,{children:"prtActiveCnt"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total print events while parent order was active; [any exchange; all prints]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"496"}),(0,i.jsx)(t.td,{children:"prtQtyActive"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total quantity printed while parent order was active; [any exchange; all prints]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"499"}),(0,i.jsx)(t.td,{children:"prtQtyActiveMny"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"total of (quantity printed x print price) while parent order was active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"502"}),(0,i.jsx)(t.td,{children:"prtEligibleCnt"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total eligible (public) print events while parent order was active; [any exchange; all eligible prints]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"505"}),(0,i.jsx)(t.td,{children:"prtQtyEligible"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total eligible (public) quantity printed while parent order was active; [any exchange; all eligible prints]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"508"}),(0,i.jsx)(t.td,{children:"prtQtyLimitOK"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total quantity printed at or better than parent limit while parent was active; SUM(MIN(PrintSize,OpenParentOrderSize)) [any exchange]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"511"}),(0,i.jsx)(t.td,{children:"prtQtyCompete"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total quantity printed on an exchange on which we had a competitive child order on that exchange; SUM(MIN(PrintSize, OpenChildOrderSize)) [childOrder.exch = print.exch]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"514"}),(0,i.jsx)(t.td,{children:"prtQtyAwayChld"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total quantity printed on an away exchange when we had a competitive child order(s) in the market and the away exchange was competitive prior to the print; SUM(MIN(PrintSize, OpenChildOrderSize)) [childOrder.exch != print.exch]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"517"}),(0,i.jsx)(t.td,{children:"prtQtyNoCompete"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total quantity printed on an exchange when the print exchange was not competitive prior to the print (non quote-competitive prints)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"520"}),(0,i.jsx)(t.td,{children:"prtQtyNoCompNbbo"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total quantity printed on an exchange when the NBBO was not competitive prior to the print (non nbbo-competitive prints)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"523"}),(0,i.jsx)(t.td,{children:"mkCheckCnt"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total number of times order was checked for making"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"526"}),(0,i.jsx)(t.td,{children:"minMkProb"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"min make probability while broker active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"529"}),(0,i.jsx)(t.td,{children:"avgMkProb"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"average make probability while broker active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"532"}),(0,i.jsx)(t.td,{children:"curMkProb"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"current make probability"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"535"}),(0,i.jsx)(t.td,{children:"tkCheckCnt"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total number of times order was checked for taking"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"538"}),(0,i.jsx)(t.td,{children:"maxTkProb"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"max take probability while broker active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"541"}),(0,i.jsx)(t.td,{children:"avgTkProb"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"average take probability while broker active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"544"}),(0,i.jsx)(t.td,{children:"curTkProb"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"current take probability"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"547"}),(0,i.jsx)(t.td,{children:"prtPrbCnt"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total number of print probability records while broker active (all limit types)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"550"}),(0,i.jsx)(t.td,{children:"prtPrbCheck"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"number of print probability records with active probability printTake handler"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"553"}),(0,i.jsx)(t.td,{children:"prtPrbLmtOK"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"number of print probability records that pass broker takeLimit"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"556"}),(0,i.jsx)(t.td,{children:"tkQtyLmtOK"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"total quantity available to take at parent limit or better while broker active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"559"}),(0,i.jsx)(t.td,{children:"avgQteSzRatio"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"average ratio of child size / nbbo size during the life of the working order when child order is at nbbo"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"562"}),(0,i.jsx)(t.td,{children:"cntQteSzRatio"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"sample counter for above [1 second intervals]; qteCnRatio / qteCnRatioCnt = avg of child size / nbbo size while broker active"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"565"}),(0,i.jsx)(t.td,{children:"minQteWidth"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"minimum quote width during active order window"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"568"}),(0,i.jsx)(t.td,{children:"avgQteWidth"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{children:"average quote width (during active order window)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"571"}),(0,i.jsx)(t.td,{children:"cntQteWidth"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"574"}),(0,i.jsx)(t.td,{children:"updateSrc"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/UpdateSource",children:"enum : UpdateSource"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"577"}),(0,i.jsx)(t.td,{children:"numUpdates"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{children:"number of record updates (cumulative for the day)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"580"}),(0,i.jsx)(t.td,{children:"timestamp"}),(0,i.jsx)(t.td,{children:"DateTime"}),(0,i.jsx)(t.td,{children:"SR system timestamp"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,i.jsxs)(n.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrParentBrkrDetail'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n#Required Parameters\n\"apiKey\": API_KEY,\n\"cmd\": 'getschema',\n\"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrParentBrkrDetail'\n\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,i.jsxs)(n.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentBrkrDetail\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'userName|engineName|parentNumber|baseParentNumber|riskGroupId|triggerGroupId|strategy|spdrStageType|startType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|triggerType|triggerLevel|marketSession|startDttm|orderDuration|goodTillDttm|expireDttm|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|exchMask|externExDest|execBrkrCode|positionType|ssaleFlag|locateQuan|locateFirm|locatePool|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderRefTheta|orderRefYears|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|arriveBid|arriveAsk|arriveSweepCount|arriveSweepOrderQty|arriveSweepFillQty|numSweepChildOrders|auctionLink|auctionFace|auctionResp|prtActiveCnt|prtQtyActive|prtQtyActiveMny|prtEligibleCnt|prtQtyEligible|prtQtyLimitOK|prtQtyCompete|prtQtyAwayChld|prtQtyNoCompete|prtQtyNoCompNbbo|mkCheckCnt|minMkProb|avgMkProb|curMkProb|tkCheckCnt|maxTkProb|avgTkProb|curTkProb|prtPrbCnt|prtPrbCheck|prtPrbLmtOK|tkQtyLmtOK|avgQteSzRatio|cntQteSzRatio|minQteWidth|avgQteWidth|cntQteWidth|updateSrc|numUpdates|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrParentBrkrDetail' \\\n--data-urlencode 'view=userName|engineName|parentNumber|baseParentNumber|riskGroupId|triggerGroupId|strategy|spdrStageType|startType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|triggerType|triggerLevel|marketSession|startDttm|orderDuration|goodTillDttm|expireDttm|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|exchMask|externExDest|execBrkrCode|positionType|ssaleFlag|locateQuan|locateFirm|locatePool|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderRefTheta|orderRefYears|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|arriveBid|arriveAsk|arriveSweepCount|arriveSweepOrderQty|arriveSweepFillQty|numSweepChildOrders|auctionLink|auctionFace|auctionResp|prtActiveCnt|prtQtyActive|prtQtyActiveMny|prtEligibleCnt|prtQtyEligible|prtQtyLimitOK|prtQtyCompete|prtQtyAwayChld|prtQtyNoCompete|prtQtyNoCompNbbo|mkCheckCnt|minMkProb|avgMkProb|curMkProb|tkCheckCnt|maxTkProb|avgTkProb|curTkProb|prtPrbCnt|prtPrbCheck|prtPrbLmtOK|tkQtyLmtOK|avgQteSzRatio|cntQteSzRatio|minQteWidth|avgQteWidth|cntQteWidth|updateSrc|numUpdates|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,i.jsxs)(n.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentBrkrDetail\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'userName|engineName|parentNumber|baseParentNumber|riskGroupId|triggerGroupId|strategy|spdrStageType|startType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|triggerType|triggerLevel|marketSession|startDttm|orderDuration|goodTillDttm|expireDttm|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|exchMask|externExDest|execBrkrCode|positionType|ssaleFlag|locateQuan|locateFirm|locatePool|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderRefTheta|orderRefYears|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|arriveBid|arriveAsk|arriveSweepCount|arriveSweepOrderQty|arriveSweepFillQty|numSweepChildOrders|auctionLink|auctionFace|auctionResp|prtActiveCnt|prtQtyActive|prtQtyActiveMny|prtEligibleCnt|prtQtyEligible|prtQtyLimitOK|prtQtyCompete|prtQtyAwayChld|prtQtyNoCompete|prtQtyNoCompNbbo|mkCheckCnt|minMkProb|avgMkProb|curMkProb|tkCheckCnt|maxTkProb|avgTkProb|curTkProb|prtPrbCnt|prtPrbCheck|prtPrbLmtOK|tkQtyLmtOK|avgQteSzRatio|cntQteSzRatio|minQteWidth|avgQteWidth|cntQteWidth|updateSrc|numUpdates|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'userName:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrParentBrkrDetail' \\\n--data-urlencode 'view=userName|engineName|parentNumber|baseParentNumber|riskGroupId|triggerGroupId|strategy|spdrStageType|startType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|triggerType|triggerLevel|marketSession|startDttm|orderDuration|goodTillDttm|expireDttm|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|exchMask|externExDest|execBrkrCode|positionType|ssaleFlag|locateQuan|locateFirm|locatePool|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderRefTheta|orderRefYears|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|arriveBid|arriveAsk|arriveSweepCount|arriveSweepOrderQty|arriveSweepFillQty|numSweepChildOrders|auctionLink|auctionFace|auctionResp|prtActiveCnt|prtQtyActive|prtQtyActiveMny|prtEligibleCnt|prtQtyEligible|prtQtyLimitOK|prtQtyCompete|prtQtyAwayChld|prtQtyNoCompete|prtQtyNoCompNbbo|mkCheckCnt|minMkProb|avgMkProb|curMkProb|tkCheckCnt|maxTkProb|avgTkProb|curTkProb|prtPrbCnt|prtPrbCheck|prtPrbLmtOK|tkQtyLmtOK|avgQteSzRatio|cntQteSzRatio|minQteWidth|avgQteWidth|cntQteWidth|updateSrc|numUpdates|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=userName:ASC'\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,i.jsxs)(n.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentBrkrDetail\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'userName|engineName|parentNumber|baseParentNumber|riskGroupId|triggerGroupId|strategy|spdrStageType|startType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|triggerType|triggerLevel|marketSession|startDttm|orderDuration|goodTillDttm|expireDttm|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|exchMask|externExDest|execBrkrCode|positionType|ssaleFlag|locateQuan|locateFirm|locatePool|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderRefTheta|orderRefYears|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|arriveBid|arriveAsk|arriveSweepCount|arriveSweepOrderQty|arriveSweepFillQty|numSweepChildOrders|auctionLink|auctionFace|auctionResp|prtActiveCnt|prtQtyActive|prtQtyActiveMny|prtEligibleCnt|prtQtyEligible|prtQtyLimitOK|prtQtyCompete|prtQtyAwayChld|prtQtyNoCompete|prtQtyNoCompNbbo|mkCheckCnt|minMkProb|avgMkProb|curMkProb|tkCheckCnt|maxTkProb|avgTkProb|curTkProb|prtPrbCnt|prtPrbCheck|prtPrbLmtOK|tkQtyLmtOK|avgQteSzRatio|cntQteSzRatio|minQteWidth|avgQteWidth|cntQteWidth|updateSrc|numUpdates|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'spdrStageType|startType|publicSize|canOverlapCxlRepl|progressRule|triggerType|marketSession|cxlUPrcRange|minMaxType|positionType|ssaleFlag|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|overrideCode|takeAlphaType|makeAlphaType|updateSrc\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getaggregate\',\n"msgType": MSG_TYPE,\n"measure": MEASURE,\n"group": GROUP,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrParentBrkrDetail' \\\n--data-urlencode 'measure=userName|engineName|parentNumber|baseParentNumber|riskGroupId|triggerGroupId|strategy|spdrStageType|startType|maxExposureSize|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|progressSliceCnt|progressExposeTime|vwapParticipation|minMktOnClosePct|triggerType|triggerLevel|marketSession|startDttm|orderDuration|goodTillDttm|expireDttm|cxlUPrcRange|minUBid|maxUAsk|minMaxType|minOptionPx|maxChildOrders|exchMask|externExDest|execBrkrCode|positionType|ssaleFlag|locateQuan|locateFirm|locatePool|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|orderPrcLimit|orderRefUPrc|orderRefDelta|orderRefGamma|orderRefTheta|orderRefYears|orderVolLimit|rateOverride|sdivOverride|ddivOverride|overrideCode|orderPrcOffset|takeAlphaType|makeAlphaType|takeAlphaFactor|makeAlphaFactor|takeProbability|makeProbability|takeSurfPrcOffset|takeSurfVolOffset|takeSurfWidthOffset|makeSurfPrcOffset|makeSurfVolOffset|makeSurfWidthOffset|expDayWtVegaOffset|maxExpDayWtVegaLn|maxExpDayWtVegaSh|maxExpDayRMetric6Ln|maxExpDayRMetric6Sh|symDayDDeltaOffset|maxSymDayDDeltaLn|maxSymDayDDeltaSh|symDayVegaOffset|maxSymDayVegaLn|maxSymDayVegaSh|symDayWtVegaOffset|maxSymDayWtVegaLn|maxSymDayWtVegaSh|maxSymDayRMetric7Ln|maxSymDayRMetric7Sh|maxGrpDayDDeltaLn|maxGrpDayDDeltaSh|maxGrpDayVegaLn|maxGrpDayVegaSh|maxGrpDayVegaAbs|grpDayVegaRatio|maxGrpDayContractsLn|maxGrpDayContractsSh|maxGrpDayContractsAbs|maxGrpDayRMetric1Ln|maxGrpDayRMetric1Sh|maxGrpDayRMetric1Abs|grpDayRMetric1Ratio|maxGrpDayRMetric2Ln|maxGrpDayRMetric2Sh|maxGrpDayRMetric3Ln|maxGrpDayRMetric3Sh|maxGrpDayRMetric4Ln|maxGrpDayRMetric4Sh|maxGrpDayRMetric5Ln|maxGrpDayRMetric5Sh|symEmaCxlDDeltaLn|symEmaCxlDDeltaSh|symEmaCxlWtVegaLn|symEmaCxlWtVegaSh|arriveBid|arriveAsk|arriveSweepCount|arriveSweepOrderQty|arriveSweepFillQty|numSweepChildOrders|auctionLink|auctionFace|auctionResp|prtActiveCnt|prtQtyActive|prtQtyActiveMny|prtEligibleCnt|prtQtyEligible|prtQtyLimitOK|prtQtyCompete|prtQtyAwayChld|prtQtyNoCompete|prtQtyNoCompNbbo|mkCheckCnt|minMkProb|avgMkProb|curMkProb|tkCheckCnt|maxTkProb|avgTkProb|curTkProb|prtPrbCnt|prtPrbCheck|prtPrbLmtOK|tkQtyLmtOK|avgQteSzRatio|cntQteSzRatio|minQteWidth|avgQteWidth|cntQteWidth|updateSrc|numUpdates|timestamp' \\\n--data-urlencode 'group=spdrStageType|startType|publicSize|canOverlapCxlRepl|progressRule|triggerType|marketSession|cxlUPrcRange|minMaxType|positionType|ssaleFlag|parentOrderHandling|parentBalanceHandling|blockVisibility|orderLimitType|takeLimitClass|makeLimitClass|takeReachRule|overrideCode|takeAlphaType|makeAlphaType|updateSrc' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,i.jsxs)(n.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentBrkrDetail\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrParentBrkrDetail' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},19365:(e,t,r)=>{r.d(t,{A:()=>s});r(96540);var i=r(34164);const a={tabItem:"tabItem_Ymn6"};var n=r(74848);function s(e){let{children:t,hidden:r,className:s}=e;return(0,n.jsx)("div",{role:"tabpanel",className:(0,i.A)(a.tabItem,s),hidden:r,children:t})}},11470:(e,t,r)=>{r.d(t,{A:()=>S});var i=r(96540),a=r(34164),n=r(23104),s=r(56347),d=r(205),l=r(57485),c=r(31682),o=r(70679);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:t,children:r}=e;return(0,i.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:r,attributes:i,default:a}}=e;return{value:t,label:r,attributes:i,default:a}}))}(r);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:r}=e;const a=(0,s.W6)(),n=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,l.aZ)(n),(0,i.useCallback)((e=>{if(!n)return;const t=new URLSearchParams(a.location.search);t.set(n,e),a.replace({...a.location,search:t.toString()})}),[n,a])]}function j(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,n=x(e),[s,l]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=r.find((e=>e.default))??r[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:n}))),[c,h]=p({queryString:r,groupId:a}),[j,u]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,n]=(0,o.Dv)(r);return[a,(0,i.useCallback)((e=>{r&&n.set(e)}),[r,n])]}({groupId:a}),y=(()=>{const e=c??j;return m({value:e,tabValues:n})?e:null})();(0,d.A)((()=>{y&&l(y)}),[y]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),u(e)}),[h,u,n]),tabValues:n}}var u=r(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(74848);function f(e){let{className:t,block:r,selectedValue:i,selectValue:s,tabValues:d}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,n.a_)(),o=e=>{const t=e.currentTarget,r=l.indexOf(t),a=d[r].value;a!==i&&(c(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;t=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;t=l[r]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},t),children:d.map((e=>{let{value:t,label:r,attributes:n}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:e=>l.push(e),onKeyDown:h,onClick:o,...n,className:(0,a.A)("tabs__item",y.tabItem,n?.className,{"tabs__item--active":i===t}),children:r??t},t)}))})}function b(e){let{lazy:t,children:r,selectedValue:a}=e;const n=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=n.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:n.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function k(e){const t=j(e);return(0,g.jsxs)("div",{className:(0,a.A)("tabs-container",y.tabList),children:[(0,g.jsx)(f,{...t,...e}),(0,g.jsx)(b,{...t,...e})]})}function S(e){const t=(0,u.A)();return(0,g.jsx)(k,{...e,children:h(e.children)},String(t))}},28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>d});var i=r(96540);const a={},n=i.createContext(a);function s(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);