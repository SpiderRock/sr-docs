"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[96070],{48845:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>h,contentTitle:()=>c,default:()=>j,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var d=i(74848),l=i(28453),t=i(11470),n=i(19365);const s={title:"TradeCubeDetailV5"},c="Schema: TradeCubeDetailV5 (ID: 4870)",a={id:"MessageSchemas/Schema/Topics/risk-v5/TradeCubeDetailV5",title:"TradeCubeDetailV5",description:"TradeCubeDetail records are published by CoreRiskServers and are visible in SRSE throughout the day.  They are designed to be aggregated and analyzed over time.TradeCubeDetail records are published to the SpiderRock Archive Host data pipeline after all markup detail is complete.",source:"@site/docs/MessageSchemas/Schema/Topics/4740-risk-v5/TradeCubeDetailV5.md",sourceDirName:"MessageSchemas/Schema/Topics/4740-risk-v5",slug:"/MessageSchemas/Schema/Topics/risk-v5/TradeCubeDetailV5",permalink:"/docs/MessageSchemas/Schema/Topics/risk-v5/TradeCubeDetailV5",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"TradeCubeDetailV5"},sidebar:"messageSchemasSidebar",previous:{title:"SymbolRiskSummaryV5",permalink:"/docs/MessageSchemas/Schema/Topics/risk-v5/SymbolRiskSummaryV5"},next:{title:"5030-srse-calculators",permalink:"/docs/MessageSchemas/Schema/Topics/srse-calculators/"}},h={},o=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function x(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(r.h1,{id:"schema-tradecubedetailv5-id-4870",children:["Schema: TradeCubeDetailV5 ",(0,d.jsx)("span",{className:"small-text",children:"(ID: 4870)"})]}),"\n",(0,d.jsxs)(r.p,{children:["TradeCubeDetail records are published by CoreRiskServers and are visible in SRSE throughout the day.  They are designed to be aggregated and analyzed over time.",(0,d.jsx)("br",{}),(0,d.jsx)("br",{}),"TradeCubeDetail records are published to the SpiderRock Archive Host data pipeline after all markup detail is complete."]}),"\n",(0,d.jsx)(r.h3,{id:"metadata",children:"METADATA"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Attribute"}),(0,d.jsx)(r.th,{children:"Value"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Topic"}),(0,d.jsx)(r.td,{children:"4740-risk-v5"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"MLink Token"}),(0,d.jsx)(r.td,{children:"SystemData"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"SRSE Product"}),(0,d.jsx)(r.td,{children:"SRRisk"})]})]})]}),"\n",(0,d.jsx)("br",{}),"\n",(0,d.jsxs)(r.blockquote,{children:["\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Note:"})," The symbol ",(0,d.jsx)(r.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"body",children:"BODY"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"#"}),(0,d.jsx)(r.th,{children:"Field"}),(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Comment"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"10="}),(0,d.jsx)(r.td,{children:"fillNumber"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{children:"SpiderRock execution number (globally unique over trailing 10 days)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"11="}),(0,d.jsx)(r.td,{children:"tradeDate"}),(0,d.jsx)(r.td,{children:"DateKey"}),(0,d.jsx)(r.td,{children:"trade date"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"100"}),(0,d.jsx)(r.td,{children:"runStatus"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/RunStatus",children:"enum : RunStatus"})}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"103"}),(0,d.jsx)(r.td,{children:"sysEnvironment"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SysEnvironment",children:"enum : SysEnvironment"})}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"106"}),(0,d.jsx)(r.td,{children:"version"}),(0,d.jsx)(r.td,{children:"byte"}),(0,d.jsx)(r.td,{children:"record version number; starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"109"}),(0,d.jsx)(r.td,{children:"clOrdId"}),(0,d.jsx)(r.td,{children:"string(24)"}),(0,d.jsx)(r.td,{children:"clOrdId resulting in fill (child order)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"112"}),(0,d.jsx)(r.td,{children:"parentNumber"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{children:"SpiderRock parent number"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"115"}),(0,d.jsx)(r.td,{children:"packageId"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{children:"groups related order/brokers together (eg. Legger w/MLeg Parent)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"118"}),(0,d.jsx)(r.td,{children:"altOrderId"}),(0,d.jsx)(r.td,{children:"string(24)"}),(0,d.jsx)(r.td,{children:"alternate order ID (usually clOrdId from client)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"121"}),(0,d.jsx)(r.td,{children:"srcRoutingCode"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{children:"inbound FIX routing code, if any"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"124"}),(0,d.jsx)(r.td,{children:"spdrSource"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrSource",children:"enum : SpdrSource"})}),(0,d.jsx)(r.td,{children:"SpiderRock parent order source code [broker pkey]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"127"}),(0,d.jsx)(r.td,{children:"groupingCode"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{children:"SpiderRock parent broker number [broker pkey]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"130"}),(0,d.jsx)(r.td,{children:"accnt"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"SpiderRock Accnt Code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"133"}),(0,d.jsx)(r.td,{children:"clientFirm"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"SpiderRock ClientFirm Code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"136"}),(0,d.jsx)(r.td,{children:"priAggGroup"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"primary aggregation group"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"139"}),(0,d.jsx)(r.td,{children:"secAggGroup"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"secondary aggregation group"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"145"}),(0,d.jsx)(r.td,{children:"secKey"}),(0,d.jsx)(r.td,{children:"OptionKey"}),(0,d.jsx)(r.td,{children:"security key"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"148"}),(0,d.jsx)(r.td,{children:"secType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,d.jsx)(r.td,{children:"security type [Stock, Future, Option]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"151"}),(0,d.jsx)(r.td,{children:"ticker"}),(0,d.jsx)(r.td,{children:"TickerKey"}),(0,d.jsx)(r.td,{children:"base ticker"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"154"}),(0,d.jsx)(r.td,{children:"viewGroup1"}),(0,d.jsx)(r.td,{children:"string(12)"}),(0,d.jsx)(r.td,{children:"viewGroup1 (user supplied; if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"157"}),(0,d.jsx)(r.td,{children:"viewGroup2"}),(0,d.jsx)(r.td,{children:"string(12)"}),(0,d.jsx)(r.td,{children:"viewGroup2 (user supplied; if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"160"}),(0,d.jsx)(r.td,{children:"viewGroup3"}),(0,d.jsx)(r.td,{children:"string(12)"}),(0,d.jsx)(r.td,{children:"viewGroup3 (user supplied; if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"163"}),(0,d.jsx)(r.td,{children:"riskClass"}),(0,d.jsx)(r.td,{children:"string(8)"}),(0,d.jsx)(r.td,{children:"user supplied risk class code (from SymbolControl record)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"166"}),(0,d.jsx)(r.td,{children:"symbolType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SymbolType",children:"enum : SymbolType"})}),(0,d.jsx)(r.td,{children:"symbol type"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"169"}),(0,d.jsx)(r.td,{children:"sector"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"user supplied sector code (from SymbolControl record)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"172"}),(0,d.jsx)(r.td,{children:"indNum"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"ind num (00)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"175"}),(0,d.jsx)(r.td,{children:"subNum"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"sub num (0000)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"178"}),(0,d.jsx)(r.td,{children:"grpNum"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"grp num (000000)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"181"}),(0,d.jsx)(r.td,{children:"nbrNum"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"nbr num (00000000)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"184"}),(0,d.jsx)(r.td,{children:"edays"}),(0,d.jsx)(r.td,{children:"short"}),(0,d.jsx)(r.td,{children:"days to next earnings [-5, +60]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"187"}),(0,d.jsx)(r.td,{children:"expCode"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ExpCode",children:"enum : ExpCode"})}),(0,d.jsx)(r.td,{children:"expiration tenor code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"190"}),(0,d.jsx)(r.td,{children:"skewCode"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SkewCode",children:"enum : SkewCode"})}),(0,d.jsx)(r.td,{children:"strike skew code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"193"}),(0,d.jsx)(r.td,{children:"widthCode"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/WidthCode",children:"enum : WidthCode"})}),(0,d.jsx)(r.td,{children:"market width code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"196"}),(0,d.jsx)(r.td,{children:"priceFormat"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,d.jsx)(r.td,{children:"SpiderRock price display format code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"199"}),(0,d.jsx)(r.td,{children:"uPriceFormat"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,d.jsx)(r.td,{children:"SpiderRock underlier price display code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"202"}),(0,d.jsx)(r.td,{children:"years"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"years to expiration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"205"}),(0,d.jsx)(r.td,{children:"underliersPerCn"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"underliers per contract (futures and options)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"208"}),(0,d.jsx)(r.td,{children:"underlierType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/UnderlierType",children:"enum : UnderlierType"})}),(0,d.jsx)(r.td,{children:"underlier type (affects $greek calcs)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"211"}),(0,d.jsx)(r.td,{children:"tickValue"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"$NLV value of a single tick change in display premium\t(pointValue = tickValue / tickSize)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"214"}),(0,d.jsx)(r.td,{children:"pointValue"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"$NLV value of a point"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"217"}),(0,d.jsx)(r.td,{children:"pointCurrency"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"220"}),(0,d.jsx)(r.td,{children:"uPrcRatio"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"UPrcRatio (SymbolRatio) from product definition"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"223"}),(0,d.jsx)(r.td,{children:"minTickSize"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"226"}),(0,d.jsx)(r.td,{children:"routingCode"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{children:"SpiderRock market routing code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"229"}),(0,d.jsx)(r.td,{children:"origExecID"}),(0,d.jsx)(r.td,{children:"string(20)"}),(0,d.jsx)(r.td,{children:"original execution ID string (child order)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"232"}),(0,d.jsx)(r.td,{children:"lastExecID"}),(0,d.jsx)(r.td,{children:"string(20)"}),(0,d.jsx)(r.td,{children:"most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"235"}),(0,d.jsx)(r.td,{children:"transactDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{children:"transaction date/time as reported by exchange or down stream broker"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"238"}),(0,d.jsx)(r.td,{children:"execStatus"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ExecStatus",children:"enum : ExecStatus"})}),(0,d.jsx)(r.td,{children:"SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"241"}),(0,d.jsx)(r.td,{children:"remoteText"}),(0,d.jsx)(r.td,{children:"string(64)"}),(0,d.jsx)(r.td,{children:"text comment from endpoint (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"244"}),(0,d.jsx)(r.td,{children:"orderLimitType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrLimitType",children:"enum : SpdrLimitType"})}),(0,d.jsx)(r.td,{children:"parent order limit type [Vol, VolX, PrcDe, PrcDeX, etc]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"247"}),(0,d.jsx)(r.td,{children:"orderLimitClass"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,d.jsx)(r.td,{children:"parent order limit class (makeLimitClass if fill was from making; takeLimitClass if fill was from taking)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"250"}),(0,d.jsx)(r.td,{children:"parentShape"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrOrderShape",children:"enum : SpdrOrderShape"})}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"253"}),(0,d.jsx)(r.td,{children:"parentOrderHandling"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ParentOrderHandling",children:"enum : ParentOrderHandling"})}),(0,d.jsx)(r.td,{children:"base parent order algo [take style algo]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"256"}),(0,d.jsx)(r.td,{children:"parentBalanceHandling"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ParentBalanceHandling",children:"enum : ParentBalanceHandling"})}),(0,d.jsx)(r.td,{children:"base parent order balance handling [make style algo]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"259"}),(0,d.jsx)(r.td,{children:"parentOrderSize"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"parent order size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"262"}),(0,d.jsx)(r.td,{children:"method"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"execution method string"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"265"}),(0,d.jsx)(r.td,{children:"strategy"}),(0,d.jsx)(r.td,{children:"string(36)"}),(0,d.jsx)(r.td,{children:"client strategy [usually client supplied]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"268"}),(0,d.jsx)(r.td,{children:"userName"}),(0,d.jsx)(r.td,{children:"string(24)"}),(0,d.jsx)(r.td,{children:"SpiderRock user name associated with the parent order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"271"}),(0,d.jsx)(r.td,{children:"origin"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"parent order origin string"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"274"}),(0,d.jsx)(r.td,{children:"source"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"execution source string"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"277"}),(0,d.jsx)(r.td,{children:"server"}),(0,d.jsx)(r.td,{children:"string(20)"}),(0,d.jsx)(r.td,{children:"SpiderRock execution engine that handled the parent order"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"280"}),(0,d.jsx)(r.td,{children:"clearingFirm"}),(0,d.jsx)(r.td,{children:"string(8)"}),(0,d.jsx)(r.td,{children:"clearing firm (delivery)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"283"}),(0,d.jsx)(r.td,{children:"clearingAccnt"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"clearing firm account (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"286"}),(0,d.jsx)(r.td,{children:"lastCapacity"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/OrderCapacity",children:"enum : OrderCapacity"})}),(0,d.jsx)(r.td,{children:"child order capacity"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"289"}),(0,d.jsx)(r.td,{children:"execRole"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ExecRole",children:"enum : ExecRole"})}),(0,d.jsx)(r.td,{children:"SpiderRock relationship to this execution record (Direct, Drop, etc)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"705"}),(0,d.jsx)(r.td,{children:"execBrkrCode"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"SR exec broker acronym"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"295"}),(0,d.jsx)(r.td,{children:"execBrkrAccnt"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"account at executing broker/prime (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"298"}),(0,d.jsx)(r.td,{children:"execBrkrClFirm"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{children:"client/firm at executing broker/prime (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"301"}),(0,d.jsx)(r.td,{children:"execBrkrUserName"}),(0,d.jsx)(r.td,{children:"string(16)"}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"304"}),(0,d.jsx)(r.td,{children:"clearingFlipType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/FlipType",children:"enum : FlipType"})}),(0,d.jsx)(r.td,{children:"clearingFlip Type (CMTA or Giveup)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"307"}),(0,d.jsx)(r.td,{children:"clearingFlipFirm"}),(0,d.jsx)(r.td,{children:"string(6)"}),(0,d.jsx)(r.td,{children:"clearingFlip Broker/MPID/CMTA"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"310"}),(0,d.jsx)(r.td,{children:"clearingFlipAccnt"}),(0,d.jsx)(r.td,{children:"string(10)"}),(0,d.jsx)(r.td,{children:"clearingFlip additional detail (sub-accnt)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"313"}),(0,d.jsx)(r.td,{children:"riskGroupId"}),(0,d.jsx)(r.td,{children:"long"}),(0,d.jsx)(r.td,{children:"riskGroupId (parent order group ID) for this execution report"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"316"}),(0,d.jsx)(r.td,{children:"fillBrkrRate"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"billing brokerage rate (tier 1)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"319"}),(0,d.jsx)(r.td,{children:"fillRoutingRate"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"billing routing rate (tier 1)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"322"}),(0,d.jsx)(r.td,{children:"billingSecType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BillingSecType",children:"enum : BillingSecType"})}),(0,d.jsx)(r.td,{children:"SpiderRock billing security type"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"325"}),(0,d.jsx)(r.td,{children:"billingCategory"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BillingCategory",children:"enum : BillingCategory"})}),(0,d.jsx)(r.td,{children:"SpiderRock billing category"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"328"}),(0,d.jsx)(r.td,{children:"firmType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/FirmType",children:"enum : FirmType"})}),(0,d.jsx)(r.td,{children:"chld order firm type [Customer, ProCust, Firm, MM, etc]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"331"}),(0,d.jsx)(r.td,{children:"side"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,d.jsx)(r.td,{children:"parent/child order side"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"334"}),(0,d.jsx)(r.td,{children:"priceType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PriceType",children:"enum : PriceType"})}),(0,d.jsx)(r.td,{children:"order limit price type"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"337"}),(0,d.jsx)(r.td,{children:"ssaleFlag"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,d.jsx)(r.td,{children:"child order short sale flag"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"340"}),(0,d.jsx)(r.td,{children:"spdrSSaleFlag"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,d.jsx)(r.td,{children:"parent order short sale flag"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"343"}),(0,d.jsx)(r.td,{children:"positionType"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,d.jsx)(r.td,{children:"child order position type"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"346"}),(0,d.jsx)(r.td,{children:"autoHedge"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/AutoHedge",children:"enum : AutoHedge"})}),(0,d.jsx)(r.td,{children:"SpiderRock auto-hedge algorithm (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"349"}),(0,d.jsx)(r.td,{children:"orderDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{children:"Date/time of parent order arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"352"}),(0,d.jsx)(r.td,{children:"orderUBid"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"underlier market bid @ parent order arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"355"}),(0,d.jsx)(r.td,{children:"orderUAsk"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"underlier market ask @ parent order arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"358"}),(0,d.jsx)(r.td,{children:"orderBid"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"option market bid @ parent order arrival (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"361"}),(0,d.jsx)(r.td,{children:"orderAsk"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"option market ask @ parent order arrival (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"364"}),(0,d.jsx)(r.td,{children:"orderSurfPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"SpiderRock surface price @ parent order arrival (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"367"}),(0,d.jsx)(r.td,{children:"orderSurfVol"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"370"}),(0,d.jsx)(r.td,{children:"orderLimitVol"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"parent order limit volatilty (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"373"}),(0,d.jsx)(r.td,{children:"orderLimitPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"parent order limit price @ parent order arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"376"}),(0,d.jsx)(r.td,{children:"orderLimitRefUPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"limit reference underlier price @ parent order arrival (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"379"}),(0,d.jsx)(r.td,{children:"childShape"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/SpdrOrderShape",children:"enum : SpdrOrderShape"})}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"382"}),(0,d.jsx)(r.td,{children:"childSize"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"child order size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"385"}),(0,d.jsx)(r.td,{children:"childPrice"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"child order price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"388"}),(0,d.jsx)(r.td,{children:"childExch"}),(0,d.jsx)(r.td,{children:"string(6)"}),(0,d.jsx)(r.td,{children:"child order exchange code (SpiderRock)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"391"}),(0,d.jsx)(r.td,{children:"childExDest"}),(0,d.jsx)(r.td,{children:"string(12)"}),(0,d.jsx)(r.td,{children:"child order exchange code (downstream)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"394"}),(0,d.jsx)(r.td,{children:"childDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{children:"child order send date/time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"397"}),(0,d.jsx)(r.td,{children:"childUBid"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"underlier market bid @ child order send time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"400"}),(0,d.jsx)(r.td,{children:"childUAsk"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"underlier market bid @ child order send time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"403"}),(0,d.jsx)(r.td,{children:"childBid"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"option market bid @ child order send time (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"406"}),(0,d.jsx)(r.td,{children:"childAsk"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"option market ask @ child order send time (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"409"}),(0,d.jsx)(r.td,{children:"childSurfPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"SpiderRock surface price @ child order send time (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"412"}),(0,d.jsx)(r.td,{children:"childVol"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"child order volatilty (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"415"}),(0,d.jsx)(r.td,{children:"childProb"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"child order probability (T+x)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"418"}),(0,d.jsx)(r.td,{children:"childLimitPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"parent order limit price @ child order send time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"421"}),(0,d.jsx)(r.td,{children:"childLimitRefUPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"limit reference underlier price @ child order send time (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"424"}),(0,d.jsx)(r.td,{children:"childLimitPnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"child limit improvement pnl (childLimitPrc to fillPrice)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"427"}),(0,d.jsx)(r.td,{children:"childAlgoHandler"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ChildHandler",children:"enum : ChildHandler"})}),(0,d.jsx)(r.td,{children:"algo that generated the child order responsible for this fill"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"430"}),(0,d.jsx)(r.td,{children:"childOrderHandling"}),(0,d.jsx)(r.td,{children:"string(24)"}),(0,d.jsx)(r.td,{children:"algo that generated the child order responsible for this fill"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"433"}),(0,d.jsx)(r.td,{children:"childCreateReason"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ChildCreateReason",children:"enum : ChildCreateReason"})}),(0,d.jsx)(r.td,{children:"child order create reason code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"436"}),(0,d.jsx)(r.td,{children:"childCancelReason"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ChildCancelReason",children:"enum : ChildCancelReason"})}),(0,d.jsx)(r.td,{children:"child order cancel reason code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"439"}),(0,d.jsx)(r.td,{children:"childMktStance"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/MktStance",children:"enum : MktStance"})}),(0,d.jsx)(r.td,{children:"child order was expected to be marketable @ child send time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"442"}),(0,d.jsx)(r.td,{children:"childCxlAttempted"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,d.jsx)(r.td,{children:"cancel attempt was made on the child order prior to receiving this fill"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"445"}),(0,d.jsx)(r.td,{children:"childCxlFillLatency"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"cancel latency (for fills with a cancel attempt)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"448"}),(0,d.jsx)(r.td,{children:"fillExch"}),(0,d.jsx)(r.td,{children:"string(12)"}),(0,d.jsx)(r.td,{children:"ExDest code from child order execution report (lastMkt)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"451"}),(0,d.jsx)(r.td,{children:"fillPrice"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"fill price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"454"}),(0,d.jsx)(r.td,{children:"fillTs"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"fill report ts (seconds since startup; 100 nanosec resolution)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"457"}),(0,d.jsx)(r.td,{children:"fillDttm"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{children:"Date/time of fill arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"460"}),(0,d.jsx)(r.td,{children:"fillSize"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"fill quantity"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"463"}),(0,d.jsx)(r.td,{children:"effFillSize"}),(0,d.jsx)(r.td,{children:"int"}),(0,d.jsx)(r.td,{children:"fill size x underliers per contract"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"466"}),(0,d.jsx)(r.td,{children:"fillVol"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"fill volatilty (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"469"}),(0,d.jsx)(r.td,{children:"fillProb"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"fill order probability (T+x)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"472"}),(0,d.jsx)(r.td,{children:"fillLimitPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"parent order limit price @ fill arrival time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"475"}),(0,d.jsx)(r.td,{children:"fillLimitRefUPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"limit reference underlier price @ fill arrival time (options only)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"478"}),(0,d.jsx)(r.td,{children:"fillLimitPnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"fill limit improvement pnl (fillLimitPrc to fillPrice)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"481"}),(0,d.jsx)(r.td,{children:"fillDe"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"fill delta"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"484"}),(0,d.jsx)(r.td,{children:"fillVe"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"fill vega"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"487"}),(0,d.jsx)(r.td,{children:"fillTh"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"fill theta"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"493"}),(0,d.jsx)(r.td,{children:"fillUPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"fill underlier mid-market"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"496"}),(0,d.jsx)(r.td,{children:"fillBeta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"SpiderRock estimate of beta to SPX"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"532"}),(0,d.jsx)(r.td,{children:"fillTv"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"theo vol (user supplied)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"535"}),(0,d.jsx)(r.td,{children:"fillTp"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"theo price"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"538"}),(0,d.jsx)(r.td,{children:"fillUBid"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"underlier market bid @ fill arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"541"}),(0,d.jsx)(r.td,{children:"fillUAsk"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"underlier market ask @ fill arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"544"}),(0,d.jsx)(r.td,{children:"fillBid"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"option market bid @ fill arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"547"}),(0,d.jsx)(r.td,{children:"fillAsk"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"option market ask @ fill arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"550"}),(0,d.jsx)(r.td,{children:"fillSurfPrc"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"SpiderRock surface price @ fill arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"553"}),(0,d.jsx)(r.td,{children:"fillPostUMark1M"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"underlier mark @ fill arrival + 1M"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"556"}),(0,d.jsx)(r.td,{children:"fillPostUMark10M"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"underlier mark @ fill arrival + 10M"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"559"}),(0,d.jsx)(r.td,{children:"fillPostMark1M"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"SpiderRock mid or surface mark @ fill arrival + 1M"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"562"}),(0,d.jsx)(r.td,{children:"fillPostMark10M"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"SpiderRock mid or surface mark @ fill arrival + 10M"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"701"}),(0,d.jsx)(r.td,{children:"marginUDnVDn"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"Aggregate RiskSlide: uPrc dn, vol dn"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"702"}),(0,d.jsx)(r.td,{children:"marginUDnVUp"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"Aggregate RiskSlide: uPrc dn, vol up"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"703"}),(0,d.jsx)(r.td,{children:"marginUUpVDn"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"Aggregate RiskSlide: uPrc up, vol dn"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"704"}),(0,d.jsx)(r.td,{children:"marginUUpVUp"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"Aggregate RiskSlide: uPrc up, vol up"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"565"}),(0,d.jsx)(r.td,{children:"riskCode"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/RiskCode",children:"enum : RiskCode"})}),(0,d.jsx)(r.td,{children:"SpiderRock Risk Code (if any)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"568"}),(0,d.jsx)(r.td,{children:"exchLiquidityTag"}),(0,d.jsx)(r.td,{children:"string(4)"}),(0,d.jsx)(r.td,{children:"liquidity tag (exchange)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"571"}),(0,d.jsx)(r.td,{children:"spdrLiquidityTag"}),(0,d.jsx)(r.td,{children:"string(2)"}),(0,d.jsx)(r.td,{children:"SpiderRock normalized liquidity tag"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"574"}),(0,d.jsx)(r.td,{children:"fillExchDetail"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsxs)(r.td,{children:["other fix tags (tag",":value","#tag",":value",") [additional detail used for analysis]"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"577"}),(0,d.jsx)(r.td,{children:"notionalValue"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"cn * mult * uPrc"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"580"}),(0,d.jsx)(r.td,{children:"marketValue"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"cn * mult * fillPrice"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"583"}),(0,d.jsx)(r.td,{children:"orderMktWidth"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"market width @ parent order arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"586"}),(0,d.jsx)(r.td,{children:"childMktWidth"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"market width @ child order send time"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"589"}),(0,d.jsx)(r.td,{children:"fillMktWidth"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"market width @ fill arrival"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"592"}),(0,d.jsx)(r.td,{children:"parentOrderAge"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"elaspsed time from parent order entry/update to this fill event"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"595"}),(0,d.jsx)(r.td,{children:"parentAgeCode"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.a,{href:"../../../Enums/ParentAge",children:"enum : ParentAge"})}),(0,d.jsx)(r.td,{children:"elaspsed time from parent order entry/update to this fill event [coded]"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"598"}),(0,d.jsx)(r.td,{children:"trdDelta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"trade delta"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"601"}),(0,d.jsx)(r.td,{children:"trdDDelta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"trade $delta"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"604"}),(0,d.jsx)(r.td,{children:"trdGamma"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"trade gamma"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"607"}),(0,d.jsx)(r.td,{children:"trdVega"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"trade vega"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"610"}),(0,d.jsx)(r.td,{children:"trdWtVega"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"trade wtVega (vega * vol / sqrt(max(0.1, years * 4)))"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"613"}),(0,d.jsx)(r.td,{children:"trdTheta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"trade theta"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"616"}),(0,d.jsx)(r.td,{children:"trdPrem"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"trade premium over parity"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"619"}),(0,d.jsx)(r.td,{children:"trdBeta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"trade beta"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"622"}),(0,d.jsx)(r.td,{children:"trdDBeta"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"trade $beta"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"625"}),(0,d.jsx)(r.td,{children:"surfEdge"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"SR surface edge (user supplied theo vol/prc to SpiderRock surface price)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"628"}),(0,d.jsx)(r.td,{children:"surfEdgeUnit"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"SR surface edge normalized to $100 underlier"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"631"}),(0,d.jsx)(r.td,{children:"theoEdge"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"theo edge (user supplied theo vol/prc to SpiderRock surface price)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"634"}),(0,d.jsx)(r.td,{children:"theoEdgeUnit"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"theo edge normalized to $100 underlier"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"637"}),(0,d.jsx)(r.td,{children:"exchFee"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"SpiderRock exchange fee estimate"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"640"}),(0,d.jsx)(r.td,{children:"halfWidthPnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"estimated half-width Pnl"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"643"}),(0,d.jsx)(r.td,{children:"clArrivePnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-dir * qty * (fillPrice - clArriveMark)  # maybe use orderSurfPrc instead"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"646"}),(0,d.jsx)(r.td,{children:"arrivePnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-dir * qty * (fillPrice - 0.5 * (orderBid + orderAsk))  # maybe use orderSurfPrc instead"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"649"}),(0,d.jsx)(r.td,{children:"arriveDnPnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"arrivePnl - uDriftArrivePnl"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"652"}),(0,d.jsx)(r.td,{children:"uDriftArrivePnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"-dir * qty * fillDe * (0.5 * (fillUBid + fillUAsk) - 0.5 * (orderUBid + orderUAsk))"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"655"}),(0,d.jsx)(r.td,{children:"dayDnPnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"delta neutral Pnl (to EOD)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"658"}),(0,d.jsx)(r.td,{children:"dayM1Pnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"delta neutral Pnl (Fill + 1M)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"661"}),(0,d.jsx)(r.td,{children:"dayM10Pnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"delta neutral Pnl (Fill + 10M)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"664"}),(0,d.jsx)(r.td,{children:"uDriftDayPnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"underlier delta drift Pnl (to EOD)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"667"}),(0,d.jsx)(r.td,{children:"uDriftM1Pnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"underlier delta drift Pnl (Fill + 1M)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"670"}),(0,d.jsx)(r.td,{children:"uDriftM10Pnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"underlier delta drift Pnl (Fill + 10M)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"673"}),(0,d.jsx)(r.td,{children:"dayPnl"}),(0,d.jsx)(r.td,{children:"float"}),(0,d.jsx)(r.td,{children:"actual Pnl to EOD"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"676"}),(0,d.jsx)(r.td,{children:"liveMark"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"SpiderRock internal use"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"679"}),(0,d.jsx)(r.td,{children:"liveUPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"SpiderRock internal use"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"682"}),(0,d.jsx)(r.td,{children:"pendMark"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"SpiderRock internal use"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"685"}),(0,d.jsx)(r.td,{children:"pendUPrc"}),(0,d.jsx)(r.td,{children:"double"}),(0,d.jsx)(r.td,{children:"SpiderRock internal use"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"688"}),(0,d.jsx)(r.td,{children:"trdMarkError"}),(0,d.jsx)(r.td,{children:"string(8)"}),(0,d.jsx)(r.td,{children:"trade mark error code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"691"}),(0,d.jsx)(r.td,{children:"dayMarkError"}),(0,d.jsx)(r.td,{children:"string(8)"}),(0,d.jsx)(r.td,{children:"day mark error code"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"694"}),(0,d.jsx)(r.td,{children:"userData1"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{children:"client supplied data field; passes through to parent and child executions and reports as well as FIX drops"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"697"}),(0,d.jsx)(r.td,{children:"userData2"}),(0,d.jsx)(r.td,{children:"text1"}),(0,d.jsx)(r.td,{children:"client supplied data field; passes through to parent and child executions and reports as well as FIX drops"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"700"}),(0,d.jsx)(r.td,{children:"timestamp"}),(0,d.jsx)(r.td,{children:"DateTime"}),(0,d.jsx)(r.td,{children:"SR system timestamp"})]})]})]}),"\n",(0,d.jsx)(r.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,d.jsxs)(t.A,{children:[(0,d.jsx)(n.A,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'TradeCubeDetailV5'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n#Required Parameters\n\"apiKey\": API_KEY,\n\"cmd\": 'getschema',\n\"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,d.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=TradeCubeDetailV5'\n\n"})})})]}),"\n",(0,d.jsx)(r.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,d.jsxs)(t.A,{children:[(0,d.jsx)(n.A,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'TradeCubeDetailV5\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'runStatus|sysEnvironment|version|clOrdId|parentNumber|packageId|altOrderId|srcRoutingCode|spdrSource|groupingCode|accnt|clientFirm|priAggGroup|secAggGroup|secKey|secType|ticker|viewGroup1|viewGroup2|viewGroup3|riskClass|symbolType|sector|indNum|subNum|grpNum|nbrNum|edays|expCode|skewCode|widthCode|priceFormat|uPriceFormat|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|routingCode|origExecID|lastExecID|transactDttm|execStatus|remoteText|orderLimitType|orderLimitClass|parentShape|parentOrderHandling|parentBalanceHandling|parentOrderSize|method|strategy|userName|origin|source|server|clearingFirm|clearingAccnt|lastCapacity|execRole|execBrkrCode|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|riskGroupId|fillBrkrRate|fillRoutingRate|billingSecType|billingCategory|firmType|side|priceType|ssaleFlag|spdrSSaleFlag|positionType|autoHedge|orderDttm|orderUBid|orderUAsk|orderBid|orderAsk|orderSurfPrc|orderSurfVol|orderLimitVol|orderLimitPrc|orderLimitRefUPrc|childShape|childSize|childPrice|childExch|childExDest|childDttm|childUBid|childUAsk|childBid|childAsk|childSurfPrc|childVol|childProb|childLimitPrc|childLimitRefUPrc|childLimitPnl|childAlgoHandler|childOrderHandling|childCreateReason|childCancelReason|childMktStance|childCxlAttempted|childCxlFillLatency|fillExch|fillPrice|fillTs|fillDttm|fillSize|effFillSize|fillVol|fillProb|fillLimitPrc|fillLimitRefUPrc|fillLimitPnl|fillDe|fillVe|fillTh|fillUPrc|fillBeta|fillTv|fillTp|fillUBid|fillUAsk|fillBid|fillAsk|fillSurfPrc|fillPostUMark1M|fillPostUMark10M|fillPostMark1M|fillPostMark10M|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskCode|exchLiquidityTag|spdrLiquidityTag|fillExchDetail|notionalValue|marketValue|orderMktWidth|childMktWidth|fillMktWidth|parentOrderAge|parentAgeCode|trdDelta|trdDDelta|trdGamma|trdVega|trdWtVega|trdTheta|trdPrem|trdBeta|trdDBeta|surfEdge|surfEdgeUnit|theoEdge|theoEdgeUnit|exchFee|halfWidthPnl|clArrivePnl|arrivePnl|arriveDnPnl|uDriftArrivePnl|dayDnPnl|dayM1Pnl|dayM10Pnl|uDriftDayPnl|uDriftM1Pnl|uDriftM10Pnl|dayPnl|liveMark|liveUPrc|pendMark|pendUPrc|trdMarkError|dayMarkError|userData1|userData2|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'clOrdId:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,d.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=TradeCubeDetailV5' \\\n--data-urlencode 'view=runStatus|sysEnvironment|version|clOrdId|parentNumber|packageId|altOrderId|srcRoutingCode|spdrSource|groupingCode|accnt|clientFirm|priAggGroup|secAggGroup|secKey|secType|ticker|viewGroup1|viewGroup2|viewGroup3|riskClass|symbolType|sector|indNum|subNum|grpNum|nbrNum|edays|expCode|skewCode|widthCode|priceFormat|uPriceFormat|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|routingCode|origExecID|lastExecID|transactDttm|execStatus|remoteText|orderLimitType|orderLimitClass|parentShape|parentOrderHandling|parentBalanceHandling|parentOrderSize|method|strategy|userName|origin|source|server|clearingFirm|clearingAccnt|lastCapacity|execRole|execBrkrCode|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|riskGroupId|fillBrkrRate|fillRoutingRate|billingSecType|billingCategory|firmType|side|priceType|ssaleFlag|spdrSSaleFlag|positionType|autoHedge|orderDttm|orderUBid|orderUAsk|orderBid|orderAsk|orderSurfPrc|orderSurfVol|orderLimitVol|orderLimitPrc|orderLimitRefUPrc|childShape|childSize|childPrice|childExch|childExDest|childDttm|childUBid|childUAsk|childBid|childAsk|childSurfPrc|childVol|childProb|childLimitPrc|childLimitRefUPrc|childLimitPnl|childAlgoHandler|childOrderHandling|childCreateReason|childCancelReason|childMktStance|childCxlAttempted|childCxlFillLatency|fillExch|fillPrice|fillTs|fillDttm|fillSize|effFillSize|fillVol|fillProb|fillLimitPrc|fillLimitRefUPrc|fillLimitPnl|fillDe|fillVe|fillTh|fillUPrc|fillBeta|fillTv|fillTp|fillUBid|fillUAsk|fillBid|fillAsk|fillSurfPrc|fillPostUMark1M|fillPostUMark10M|fillPostMark1M|fillPostMark10M|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskCode|exchLiquidityTag|spdrLiquidityTag|fillExchDetail|notionalValue|marketValue|orderMktWidth|childMktWidth|fillMktWidth|parentOrderAge|parentAgeCode|trdDelta|trdDDelta|trdGamma|trdVega|trdWtVega|trdTheta|trdPrem|trdBeta|trdDBeta|surfEdge|surfEdgeUnit|theoEdge|theoEdgeUnit|exchFee|halfWidthPnl|clArrivePnl|arrivePnl|arriveDnPnl|uDriftArrivePnl|dayDnPnl|dayM1Pnl|dayM10Pnl|uDriftDayPnl|uDriftM1Pnl|uDriftM10Pnl|dayPnl|liveMark|liveUPrc|pendMark|pendUPrc|trdMarkError|dayMarkError|userData1|userData2|timestamp' \\\n--data-urlencode 'where=clOrdId:eq:ExampleString'\n"})})})]}),"\n",(0,d.jsx)(r.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,d.jsxs)(t.A,{children:[(0,d.jsx)(n.A,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'TradeCubeDetailV5\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'runStatus|sysEnvironment|version|clOrdId|parentNumber|packageId|altOrderId|srcRoutingCode|spdrSource|groupingCode|accnt|clientFirm|priAggGroup|secAggGroup|secKey|secType|ticker|viewGroup1|viewGroup2|viewGroup3|riskClass|symbolType|sector|indNum|subNum|grpNum|nbrNum|edays|expCode|skewCode|widthCode|priceFormat|uPriceFormat|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|routingCode|origExecID|lastExecID|transactDttm|execStatus|remoteText|orderLimitType|orderLimitClass|parentShape|parentOrderHandling|parentBalanceHandling|parentOrderSize|method|strategy|userName|origin|source|server|clearingFirm|clearingAccnt|lastCapacity|execRole|execBrkrCode|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|riskGroupId|fillBrkrRate|fillRoutingRate|billingSecType|billingCategory|firmType|side|priceType|ssaleFlag|spdrSSaleFlag|positionType|autoHedge|orderDttm|orderUBid|orderUAsk|orderBid|orderAsk|orderSurfPrc|orderSurfVol|orderLimitVol|orderLimitPrc|orderLimitRefUPrc|childShape|childSize|childPrice|childExch|childExDest|childDttm|childUBid|childUAsk|childBid|childAsk|childSurfPrc|childVol|childProb|childLimitPrc|childLimitRefUPrc|childLimitPnl|childAlgoHandler|childOrderHandling|childCreateReason|childCancelReason|childMktStance|childCxlAttempted|childCxlFillLatency|fillExch|fillPrice|fillTs|fillDttm|fillSize|effFillSize|fillVol|fillProb|fillLimitPrc|fillLimitRefUPrc|fillLimitPnl|fillDe|fillVe|fillTh|fillUPrc|fillBeta|fillTv|fillTp|fillUBid|fillUAsk|fillBid|fillAsk|fillSurfPrc|fillPostUMark1M|fillPostUMark10M|fillPostMark1M|fillPostMark10M|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskCode|exchLiquidityTag|spdrLiquidityTag|fillExchDetail|notionalValue|marketValue|orderMktWidth|childMktWidth|fillMktWidth|parentOrderAge|parentAgeCode|trdDelta|trdDDelta|trdGamma|trdVega|trdWtVega|trdTheta|trdPrem|trdBeta|trdDBeta|surfEdge|surfEdgeUnit|theoEdge|theoEdgeUnit|exchFee|halfWidthPnl|clArrivePnl|arrivePnl|arriveDnPnl|uDriftArrivePnl|dayDnPnl|dayM1Pnl|dayM10Pnl|uDriftDayPnl|uDriftM1Pnl|uDriftM10Pnl|dayPnl|liveMark|liveUPrc|pendMark|pendUPrc|trdMarkError|dayMarkError|userData1|userData2|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'clOrdId:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'runStatus:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,d.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=TradeCubeDetailV5' \\\n--data-urlencode 'view=runStatus|sysEnvironment|version|clOrdId|parentNumber|packageId|altOrderId|srcRoutingCode|spdrSource|groupingCode|accnt|clientFirm|priAggGroup|secAggGroup|secKey|secType|ticker|viewGroup1|viewGroup2|viewGroup3|riskClass|symbolType|sector|indNum|subNum|grpNum|nbrNum|edays|expCode|skewCode|widthCode|priceFormat|uPriceFormat|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|routingCode|origExecID|lastExecID|transactDttm|execStatus|remoteText|orderLimitType|orderLimitClass|parentShape|parentOrderHandling|parentBalanceHandling|parentOrderSize|method|strategy|userName|origin|source|server|clearingFirm|clearingAccnt|lastCapacity|execRole|execBrkrCode|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|riskGroupId|fillBrkrRate|fillRoutingRate|billingSecType|billingCategory|firmType|side|priceType|ssaleFlag|spdrSSaleFlag|positionType|autoHedge|orderDttm|orderUBid|orderUAsk|orderBid|orderAsk|orderSurfPrc|orderSurfVol|orderLimitVol|orderLimitPrc|orderLimitRefUPrc|childShape|childSize|childPrice|childExch|childExDest|childDttm|childUBid|childUAsk|childBid|childAsk|childSurfPrc|childVol|childProb|childLimitPrc|childLimitRefUPrc|childLimitPnl|childAlgoHandler|childOrderHandling|childCreateReason|childCancelReason|childMktStance|childCxlAttempted|childCxlFillLatency|fillExch|fillPrice|fillTs|fillDttm|fillSize|effFillSize|fillVol|fillProb|fillLimitPrc|fillLimitRefUPrc|fillLimitPnl|fillDe|fillVe|fillTh|fillUPrc|fillBeta|fillTv|fillTp|fillUBid|fillUAsk|fillBid|fillAsk|fillSurfPrc|fillPostUMark1M|fillPostUMark10M|fillPostMark1M|fillPostMark10M|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskCode|exchLiquidityTag|spdrLiquidityTag|fillExchDetail|notionalValue|marketValue|orderMktWidth|childMktWidth|fillMktWidth|parentOrderAge|parentAgeCode|trdDelta|trdDDelta|trdGamma|trdVega|trdWtVega|trdTheta|trdPrem|trdBeta|trdDBeta|surfEdge|surfEdgeUnit|theoEdge|theoEdgeUnit|exchFee|halfWidthPnl|clArrivePnl|arrivePnl|arriveDnPnl|uDriftArrivePnl|dayDnPnl|dayM1Pnl|dayM10Pnl|uDriftDayPnl|uDriftM1Pnl|uDriftM10Pnl|dayPnl|liveMark|liveUPrc|pendMark|pendUPrc|trdMarkError|dayMarkError|userData1|userData2|timestamp' \\\n--data-urlencode 'where=clOrdId:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=runStatus:ASC'\n"})})})]}),"\n",(0,d.jsx)(r.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,d.jsxs)(t.A,{children:[(0,d.jsx)(n.A,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'TradeCubeDetailV5\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'runStatus|sysEnvironment|version|clOrdId|parentNumber|packageId|altOrderId|srcRoutingCode|spdrSource|groupingCode|accnt|clientFirm|priAggGroup|secAggGroup|secKey|secType|ticker|viewGroup1|viewGroup2|viewGroup3|riskClass|symbolType|sector|indNum|subNum|grpNum|nbrNum|edays|expCode|skewCode|widthCode|priceFormat|uPriceFormat|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|routingCode|origExecID|lastExecID|transactDttm|execStatus|remoteText|orderLimitType|orderLimitClass|parentShape|parentOrderHandling|parentBalanceHandling|parentOrderSize|method|strategy|userName|origin|source|server|clearingFirm|clearingAccnt|lastCapacity|execRole|execBrkrCode|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|riskGroupId|fillBrkrRate|fillRoutingRate|billingSecType|billingCategory|firmType|side|priceType|ssaleFlag|spdrSSaleFlag|positionType|autoHedge|orderDttm|orderUBid|orderUAsk|orderBid|orderAsk|orderSurfPrc|orderSurfVol|orderLimitVol|orderLimitPrc|orderLimitRefUPrc|childShape|childSize|childPrice|childExch|childExDest|childDttm|childUBid|childUAsk|childBid|childAsk|childSurfPrc|childVol|childProb|childLimitPrc|childLimitRefUPrc|childLimitPnl|childAlgoHandler|childOrderHandling|childCreateReason|childCancelReason|childMktStance|childCxlAttempted|childCxlFillLatency|fillExch|fillPrice|fillTs|fillDttm|fillSize|effFillSize|fillVol|fillProb|fillLimitPrc|fillLimitRefUPrc|fillLimitPnl|fillDe|fillVe|fillTh|fillUPrc|fillBeta|fillTv|fillTp|fillUBid|fillUAsk|fillBid|fillAsk|fillSurfPrc|fillPostUMark1M|fillPostUMark10M|fillPostMark1M|fillPostMark10M|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskCode|exchLiquidityTag|spdrLiquidityTag|fillExchDetail|notionalValue|marketValue|orderMktWidth|childMktWidth|fillMktWidth|parentOrderAge|parentAgeCode|trdDelta|trdDDelta|trdGamma|trdVega|trdWtVega|trdTheta|trdPrem|trdBeta|trdDBeta|surfEdge|surfEdgeUnit|theoEdge|theoEdgeUnit|exchFee|halfWidthPnl|clArrivePnl|arrivePnl|arriveDnPnl|uDriftArrivePnl|dayDnPnl|dayM1Pnl|dayM10Pnl|uDriftDayPnl|uDriftM1Pnl|uDriftM10Pnl|dayPnl|liveMark|liveUPrc|pendMark|pendUPrc|trdMarkError|dayMarkError|userData1|userData2|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'runStatus|sysEnvironment|spdrSource|secType|symbolType|expCode|skewCode|widthCode|priceFormat|uPriceFormat|underlierType|pointCurrency|execStatus|orderLimitType|orderLimitClass|parentShape|parentOrderHandling|parentBalanceHandling|lastCapacity|execRole|clearingFlipType|billingSecType|billingCategory|firmType|side|priceType|ssaleFlag|spdrSSaleFlag|positionType|autoHedge|childShape|childAlgoHandler|childCreateReason|childCancelReason|childMktStance|childCxlAttempted|riskCode|parentAgeCode\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'clOrdId:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getaggregate\',\n"msgType": MSG_TYPE,\n"measure": MEASURE,\n"group": GROUP,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,d.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=TradeCubeDetailV5' \\\n--data-urlencode 'measure=runStatus|sysEnvironment|version|clOrdId|parentNumber|packageId|altOrderId|srcRoutingCode|spdrSource|groupingCode|accnt|clientFirm|priAggGroup|secAggGroup|secKey|secType|ticker|viewGroup1|viewGroup2|viewGroup3|riskClass|symbolType|sector|indNum|subNum|grpNum|nbrNum|edays|expCode|skewCode|widthCode|priceFormat|uPriceFormat|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|routingCode|origExecID|lastExecID|transactDttm|execStatus|remoteText|orderLimitType|orderLimitClass|parentShape|parentOrderHandling|parentBalanceHandling|parentOrderSize|method|strategy|userName|origin|source|server|clearingFirm|clearingAccnt|lastCapacity|execRole|execBrkrCode|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|riskGroupId|fillBrkrRate|fillRoutingRate|billingSecType|billingCategory|firmType|side|priceType|ssaleFlag|spdrSSaleFlag|positionType|autoHedge|orderDttm|orderUBid|orderUAsk|orderBid|orderAsk|orderSurfPrc|orderSurfVol|orderLimitVol|orderLimitPrc|orderLimitRefUPrc|childShape|childSize|childPrice|childExch|childExDest|childDttm|childUBid|childUAsk|childBid|childAsk|childSurfPrc|childVol|childProb|childLimitPrc|childLimitRefUPrc|childLimitPnl|childAlgoHandler|childOrderHandling|childCreateReason|childCancelReason|childMktStance|childCxlAttempted|childCxlFillLatency|fillExch|fillPrice|fillTs|fillDttm|fillSize|effFillSize|fillVol|fillProb|fillLimitPrc|fillLimitRefUPrc|fillLimitPnl|fillDe|fillVe|fillTh|fillUPrc|fillBeta|fillTv|fillTp|fillUBid|fillUAsk|fillBid|fillAsk|fillSurfPrc|fillPostUMark1M|fillPostUMark10M|fillPostMark1M|fillPostMark10M|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskCode|exchLiquidityTag|spdrLiquidityTag|fillExchDetail|notionalValue|marketValue|orderMktWidth|childMktWidth|fillMktWidth|parentOrderAge|parentAgeCode|trdDelta|trdDDelta|trdGamma|trdVega|trdWtVega|trdTheta|trdPrem|trdBeta|trdDBeta|surfEdge|surfEdgeUnit|theoEdge|theoEdgeUnit|exchFee|halfWidthPnl|clArrivePnl|arrivePnl|arriveDnPnl|uDriftArrivePnl|dayDnPnl|dayM1Pnl|dayM10Pnl|uDriftDayPnl|uDriftM1Pnl|uDriftM10Pnl|dayPnl|liveMark|liveUPrc|pendMark|pendUPrc|trdMarkError|dayMarkError|userData1|userData2|timestamp' \\\n--data-urlencode 'group=runStatus|sysEnvironment|spdrSource|secType|symbolType|expCode|skewCode|widthCode|priceFormat|uPriceFormat|underlierType|pointCurrency|execStatus|orderLimitType|orderLimitClass|parentShape|parentOrderHandling|parentBalanceHandling|lastCapacity|execRole|clearingFlipType|billingSecType|billingCategory|firmType|side|priceType|ssaleFlag|spdrSSaleFlag|positionType|autoHedge|childShape|childAlgoHandler|childCreateReason|childCancelReason|childMktStance|childCxlAttempted|riskCode|parentAgeCode' \\\n--data-urlencode 'where=clOrdId:eq:ExampleString'\n"})})})]}),"\n",(0,d.jsx)(r.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,d.jsxs)(t.A,{children:[(0,d.jsx)(n.A,{value:"Python",label:"Python",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'TradeCubeDetailV5\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'clOrdId:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,d.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=TradeCubeDetailV5' \\\n--data-urlencode 'where=clOrdId:eq:ExampleString'\n"})})})]})]})}function j(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(x,{...e})}):x(e)}},19365:(e,r,i)=>{i.d(r,{A:()=>n});i(96540);var d=i(34164);const l={tabItem:"tabItem_Ymn6"};var t=i(74848);function n(e){let{children:r,hidden:i,className:n}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,d.A)(l.tabItem,n),hidden:i,children:r})}},11470:(e,r,i)=>{i.d(r,{A:()=>S});var d=i(96540),l=i(34164),t=i(23104),n=i(56347),s=i(205),c=i(57485),a=i(31682),h=i(70679);function o(e){return d.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,d.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:r,children:i}=e;return(0,d.useMemo)((()=>{const e=r??function(e){return o(e).map((e=>{let{props:{value:r,label:i,attributes:d,default:l}}=e;return{value:r,label:i,attributes:d,default:l}}))}(i);return function(e){const r=(0,a.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,i])}function j(e){let{value:r,tabValues:i}=e;return i.some((e=>e.value===r))}function u(e){let{queryString:r=!1,groupId:i}=e;const l=(0,n.W6)(),t=function(e){let{queryString:r=!1,groupId:i}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:r,groupId:i});return[(0,c.aZ)(t),(0,d.useCallback)((e=>{if(!t)return;const r=new URLSearchParams(l.location.search);r.set(t,e),l.replace({...l.location,search:r.toString()})}),[t,l])]}function p(e){const{defaultValue:r,queryString:i=!1,groupId:l}=e,t=x(e),[n,c]=(0,d.useState)((()=>function(e){let{defaultValue:r,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!j({value:r,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const d=i.find((e=>e.default))??i[0];if(!d)throw new Error("Unexpected error: 0 tabValues");return d.value}({defaultValue:r,tabValues:t}))),[a,o]=u({queryString:i,groupId:l}),[p,m]=function(e){let{groupId:r}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(r),[l,t]=(0,h.Dv)(i);return[l,(0,d.useCallback)((e=>{i&&t.set(e)}),[i,t])]}({groupId:l}),g=(()=>{const e=a??p;return j({value:e,tabValues:t})?e:null})();(0,s.A)((()=>{g&&c(g)}),[g]);return{selectedValue:n,selectValue:(0,d.useCallback)((e=>{if(!j({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);c(e),o(e),m(e)}),[o,m,t]),tabValues:t}}var m=i(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=i(74848);function y(e){let{className:r,block:i,selectedValue:d,selectValue:n,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:a}=(0,t.a_)(),h=e=>{const r=e.currentTarget,i=c.indexOf(r),l=s[i].value;l!==d&&(a(r),n(l))},o=e=>{let r=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const i=c.indexOf(e.currentTarget)+1;r=c[i]??c[0];break}case"ArrowLeft":{const i=c.indexOf(e.currentTarget)-1;r=c[i]??c[c.length-1];break}}r?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":i},r),children:s.map((e=>{let{value:r,label:i,attributes:t}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:d===r?0:-1,"aria-selected":d===r,ref:e=>c.push(e),onKeyDown:o,onClick:h,...t,className:(0,l.A)("tabs__item",g.tabItem,t?.className,{"tabs__item--active":d===r}),children:i??r},r)}))})}function k(e){let{lazy:r,children:i,selectedValue:l}=e;const t=(Array.isArray(i)?i:[i]).filter(Boolean);if(r){const e=t.find((e=>e.props.value===l));return e?(0,d.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:t.map(((e,r)=>(0,d.cloneElement)(e,{key:r,hidden:e.props.value!==l})))})}function P(e){const r=p(e);return(0,f.jsxs)("div",{className:(0,l.A)("tabs-container",g.tabList),children:[(0,f.jsx)(y,{...r,...e}),(0,f.jsx)(k,{...r,...e})]})}function S(e){const r=(0,m.A)();return(0,f.jsx)(P,{...e,children:o(e.children)},String(r))}},28453:(e,r,i)=>{i.d(r,{R:()=>n,x:()=>s});var d=i(96540);const l={},t=d.createContext(l);function n(e){const r=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:n(e.components),d.createElement(t.Provider,{value:r},e.children)}}}]);