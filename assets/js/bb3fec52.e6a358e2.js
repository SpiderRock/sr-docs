"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[27293],{16099:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>h,contentTitle:()=>c,default:()=>j,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var l=i(74848),d=i(28453),t=i(11470),n=i(19365);const s={title:"SpdrParentExecution"},c="Schema: SpdrParentExecution (ID: 4085)",a={id:"MessageSchemas/Schema/Topics/parent-orders/SpdrParentExecution",title:"SpdrParentExecution",description:"SpdrParentExecution records are published every time a parent order execution is received.  They also update as additional post execution mark information is available at F+1m and F+10m.",source:"@site/versioned_docs/version-8.4.10.2/MessageSchemas/Schema/Topics/3985-parent-orders/SpdrParentExecution.md",sourceDirName:"MessageSchemas/Schema/Topics/3985-parent-orders",slug:"/MessageSchemas/Schema/Topics/parent-orders/SpdrParentExecution",permalink:"/docs/8.4.10.2/MessageSchemas/Schema/Topics/parent-orders/SpdrParentExecution",draft:!1,unlisted:!1,tags:[],version:"8.4.10.2",frontMatter:{title:"SpdrParentExecution"},sidebar:"messageSchemasSidebar",previous:{title:"SpdrParentCancel",permalink:"/docs/8.4.10.2/MessageSchemas/Schema/Topics/parent-orders/SpdrParentCancel"},next:{title:"SpdrParentLimit",permalink:"/docs/8.4.10.2/MessageSchemas/Schema/Topics/parent-orders/SpdrParentLimit"}},h={},o=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function x(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(r.h1,{id:"schema-spdrparentexecution-id-4085",children:["Schema: SpdrParentExecution ",(0,l.jsx)("span",{className:"small-text",children:"(ID: 4085)"})]}),"\n",(0,l.jsx)(r.p,{children:"SpdrParentExecution records are published every time a parent order execution is received.  They also update as additional post execution mark information is available at F+1m and F+10m."}),"\n",(0,l.jsx)(r.h3,{id:"metadata",children:"METADATA"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{children:"Attribute"}),(0,l.jsx)(r.th,{children:"Value"})]})}),(0,l.jsxs)(r.tbody,{children:[(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"Topic"}),(0,l.jsx)(r.td,{children:"3985-parent-orders"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"MLink Token"}),(0,l.jsx)(r.td,{children:"ClientTrading"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"SRSE Product"}),(0,l.jsx)(r.td,{children:"SRTrade"})]})]})]}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"Note:"})," The symbol ",(0,l.jsx)(r.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"body",children:"BODY"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{children:"#"}),(0,l.jsx)(r.th,{children:"Field"}),(0,l.jsx)(r.th,{children:"Type"}),(0,l.jsx)(r.th,{children:"Comment"})]})}),(0,l.jsxs)(r.tbody,{children:[(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"10="}),(0,l.jsx)(r.td,{children:"fillNumber"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SpiderRock execution number (globally unique over trailing 10 days)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"100"}),(0,l.jsx)(r.td,{children:"sysRealm"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SysRealm",children:"enum : SysRealm"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"103"}),(0,l.jsx)(r.td,{children:"sysEnvironment"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SysEnvironment",children:"enum : SysEnvironment"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"106"}),(0,l.jsx)(r.td,{children:"runStatus"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RunStatus",children:"enum : RunStatus"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"109"}),(0,l.jsx)(r.td,{children:"version"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"112"}),(0,l.jsx)(r.td,{children:"execStatus"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ExecStatus",children:"enum : ExecStatus"})}),(0,l.jsx)(r.td,{children:"SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"115"}),(0,l.jsx)(r.td,{children:"execShape"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ExecShape",children:"enum : ExecShape"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"118"}),(0,l.jsx)(r.td,{children:"packageId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR package Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"121"}),(0,l.jsx)(r.td,{children:"parentNumber"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR parent number"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"124"}),(0,l.jsx)(r.td,{children:"parentVersion"}),(0,l.jsx)(r.td,{children:"short"}),(0,l.jsx)(r.td,{children:"SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"127"}),(0,l.jsx)(r.td,{children:"baseParentNumber"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"130"}),(0,l.jsx)(r.td,{children:"clOrdId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SR child order clOrdID resulting in fill"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"133"}),(0,l.jsx)(r.td,{children:"reviewClOrdId"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"review session clOrdId (usually from inbound review FIX session)S"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"136"}),(0,l.jsx)(r.td,{children:"altFillId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"alternate fill ID (usually from AwayTktGateway.pkey.clientFillID)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"139"}),(0,l.jsx)(r.td,{children:"altOrderId"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"alternate order ID (usually clOrdId from client)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"142"}),(0,l.jsx)(r.td,{children:"altCrossId"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"145"}),(0,l.jsx)(r.td,{children:"altLegRefId"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"148"}),(0,l.jsx)(r.td,{children:"altAccnt"}),(0,l.jsx)(r.td,{children:"string(32)"}),(0,l.jsx)(r.td,{children:'alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]'})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"151"}),(0,l.jsx)(r.td,{children:"altUserName"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"alternate (client assigned) user name (optional) [used to map between client and SR account strings]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"154"}),(0,l.jsx)(r.td,{children:"srcRoutingCode"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"inbound FIX routing code, if any"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"157"}),(0,l.jsx)(r.td,{children:"riskGroupId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"riskGroupId (parent order group ID) for this execution report"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"160"}),(0,l.jsx)(r.td,{children:"triggerGroupId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"WaitTrigger group Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"163"}),(0,l.jsx)(r.td,{children:"triggerTimestamp"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"WaitTrigger trigger timestamp (nanoseconds since epoch)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"166"}),(0,l.jsx)(r.td,{children:"streetClOrdId"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"street side clOrdId (clOrdId or equivalent of the street side order) [SR/street gateway generated]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"169"}),(0,l.jsx)(r.td,{children:"streetOrderId"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"street side orderId (orderId or equivalent of the street side order) [from street side execReport]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"178"}),(0,l.jsx)(r.td,{children:"parentShape"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrOrderShape",children:"enum : SpdrOrderShape"})}),(0,l.jsx)(r.td,{children:"shape of originating parent order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"181"}),(0,l.jsx)(r.td,{children:"secKey"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"execution security key"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"184"}),(0,l.jsx)(r.td,{children:"secType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{children:"execution security type [Stock, Future, Option]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"187"}),(0,l.jsx)(r.td,{children:"ticker"}),(0,l.jsx)(r.td,{children:"TickerKey"}),(0,l.jsx)(r.td,{children:"base stock key (used for symbol risk aggregation)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"843"}),(0,l.jsx)(r.td,{children:"originTicker"}),(0,l.jsx)(r.td,{children:"TickerKey"}),(0,l.jsx)(r.td,{children:"Origin Parent Order TickerKey (will only be set for Spiderrock regional composite orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"844"}),(0,l.jsx)(r.td,{children:"originSecKey"}),(0,l.jsx)(r.td,{children:"OptionKey"}),(0,l.jsx)(r.td,{children:"Origin Parent Order SecKey (will only be set for Spiderrock regional composite orders)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"190"}),(0,l.jsx)(r.td,{children:"accnt"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"SpiderRock trading accnt [broker pkey]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"193"}),(0,l.jsx)(r.td,{children:"clientFirm"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"SR client firm"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"196"}),(0,l.jsx)(r.td,{children:"spdrSource"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrSource",children:"enum : SpdrSource"})}),(0,l.jsx)(r.td,{children:"SpiderRock parent order source code [broker pkey]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"199"}),(0,l.jsx)(r.td,{children:"groupingCode"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"SpiderRock parent broker number [broker pkey]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"809"}),(0,l.jsx)(r.td,{children:"coreClientFirm"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"810"}),(0,l.jsx)(r.td,{children:"sponsorClientFirm"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"202"}),(0,l.jsx)(r.td,{children:"routingCode"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"SpiderRock market routing code"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"811"}),(0,l.jsx)(r.td,{children:"engineName"}),(0,l.jsx)(r.td,{children:"string(32)"}),(0,l.jsx)(r.td,{children:"SpiderRock execution engine that handled the parent order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"208"}),(0,l.jsx)(r.td,{children:"gatewayName"}),(0,l.jsx)(r.td,{children:"string(20)"}),(0,l.jsx)(r.td,{children:"StreetGateway server than handled the child order (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"211"}),(0,l.jsx)(r.td,{children:"execRole"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ExecRole",children:"enum : ExecRole"})}),(0,l.jsx)(r.td,{children:"SpiderRock relationship to this execution record"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"833"}),(0,l.jsx)(r.td,{children:"execBrkrCode"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"SR Assigned executing broker code"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"217"}),(0,l.jsx)(r.td,{children:"execBrkrMPID"}),(0,l.jsx)(r.td,{children:"string(8)"}),(0,l.jsx)(r.td,{children:"FINRA/Assigned exec broker MPID (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"834"}),(0,l.jsx)(r.td,{children:"altBrkrMPID"}),(0,l.jsx)(r.td,{children:"string(8)"}),(0,l.jsx)(r.td,{children:"alternative broker MPID for a given route (if needed)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"220"}),(0,l.jsx)(r.td,{children:"execBrkrAccnt"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"account at executing broker (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"223"}),(0,l.jsx)(r.td,{children:"execBrkrClFirm"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"client/firm at executing broker (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"226"}),(0,l.jsx)(r.td,{children:"execBrkrUserName"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"userName at execution broker (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"229"}),(0,l.jsx)(r.td,{children:"clearingFlipType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/FlipType",children:"enum : FlipType"})}),(0,l.jsx)(r.td,{children:"Clearing Flip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"232"}),(0,l.jsx)(r.td,{children:"clearingFlipFirm"}),(0,l.jsx)(r.td,{children:"string(6)"}),(0,l.jsx)(r.td,{children:"Clearing Flip Firm (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"235"}),(0,l.jsx)(r.td,{children:"clearingFlipAccnt"}),(0,l.jsx)(r.td,{children:"string(10)"}),(0,l.jsx)(r.td,{children:"Clearing Flip Account (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"238"}),(0,l.jsx)(r.td,{children:"clearingFirm"}),(0,l.jsx)(r.td,{children:"string(4)"}),(0,l.jsx)(r.td,{children:"clearing firm"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"241"}),(0,l.jsx)(r.td,{children:"clearingAccnt"}),(0,l.jsx)(r.td,{children:"string(12)"}),(0,l.jsx)(r.td,{children:"clearing firm account (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"244"}),(0,l.jsx)(r.td,{children:"origExecID"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"original execution ID string (child order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"247"}),(0,l.jsx)(r.td,{children:"lastExecID"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"250"}),(0,l.jsx)(r.td,{children:"remoteText"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"text comment from remote endpoint (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"253"}),(0,l.jsx)(r.td,{children:"orderSide"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,l.jsx)(r.td,{children:"order side"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"256"}),(0,l.jsx)(r.td,{children:"spdrOrderStatus"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrOrderStatus",children:"enum : SpdrOrderStatus"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"259"}),(0,l.jsx)(r.td,{children:"spdrCloseReason"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrCloseReason",children:"enum : SpdrCloseReason"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"262"}),(0,l.jsx)(r.td,{children:"cumFillQuantity"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"cumulative fills (this parent number only)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"265"}),(0,l.jsx)(r.td,{children:"avgFillPrice"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"268"}),(0,l.jsx)(r.td,{children:"cumLegFillQuantity"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"cumulative fills (spread only)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"271"}),(0,l.jsx)(r.td,{children:"avgLegFillPrice"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"274"}),(0,l.jsx)(r.td,{children:"leavesQty"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"277"}),(0,l.jsx)(r.td,{children:"priceType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PriceType",children:"enum : PriceType"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"280"}),(0,l.jsx)(r.td,{children:"childShape"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrOrderShape",children:"enum : SpdrOrderShape"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"283"}),(0,l.jsx)(r.td,{children:"childSize"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"child order size"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"286"}),(0,l.jsx)(r.td,{children:"childPrice"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"child order price"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"289"}),(0,l.jsx)(r.td,{children:"childDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"child order generation date/time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"292"}),(0,l.jsx)(r.td,{children:"childExch"}),(0,l.jsx)(r.td,{children:"string(6)"}),(0,l.jsx)(r.td,{children:"child order exchange"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"845"}),(0,l.jsx)(r.td,{children:"childExDest"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"child order exchange destination code"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"298"}),(0,l.jsx)(r.td,{children:"childExecBroker"}),(0,l.jsx)(r.td,{children:"string(8)"}),(0,l.jsx)(r.td,{children:"executing broker that child order was routed to"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"301"}),(0,l.jsx)(r.td,{children:"childIsDirected"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{children:"child order isDirected flag"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"304"}),(0,l.jsx)(r.td,{children:"childIsoSweep"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{children:"child order ISO sweep flag"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"307"}),(0,l.jsx)(r.td,{children:"childOrderHandling"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"child order handling string from the algo that generated the child order responsible for this fill"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"310"}),(0,l.jsx)(r.td,{children:"childAlgoHandler"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ChildHandler",children:"enum : ChildHandler"})}),(0,l.jsx)(r.td,{children:"algo handler for this child order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"313"}),(0,l.jsx)(r.td,{children:"childCreateReason"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ChildCreateReason",children:"enum : ChildCreateReason"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"316"}),(0,l.jsx)(r.td,{children:"childCancelReason"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ChildCancelReason",children:"enum : ChildCancelReason"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"319"}),(0,l.jsx)(r.td,{children:"childMakerTaker"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/MakerTaker",children:"enum : MakerTaker"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"322"}),(0,l.jsx)(r.td,{children:"childUBid"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier market bid at @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"325"}),(0,l.jsx)(r.td,{children:"childUAsk"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier market ask at @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"328"}),(0,l.jsx)(r.td,{children:"childBid"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market bid at the @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"331"}),(0,l.jsx)(r.td,{children:"childAsk"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market ask at the @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"334"}),(0,l.jsx)(r.td,{children:"childMark"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"mid-market (SR surface price if option) @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"337"}),(0,l.jsx)(r.td,{children:"childFairWidth"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"model fair width @ child order create"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"340"}),(0,l.jsx)(r.td,{children:"childVol"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"child order volatility @ childLimitRefUPrc"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"343"}),(0,l.jsx)(r.td,{children:"childProb"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"SR probability for the child order @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"346"}),(0,l.jsx)(r.td,{children:"childLimitRefUPrc"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"limit reference underlier price @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"349"}),(0,l.jsx)(r.td,{children:"childLimitPrc"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"parent order limit price @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"352"}),(0,l.jsx)(r.td,{children:"childVolAtm"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"atm volatility @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"355"}),(0,l.jsx)(r.td,{children:"childPosType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,l.jsx)(r.td,{children:"child order position type"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"358"}),(0,l.jsx)(r.td,{children:"childFirmOptPosition"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"effective firm option position @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"361"}),(0,l.jsx)(r.td,{children:"childSSaleFlag"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{children:"short sale flag"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"364"}),(0,l.jsx)(r.td,{children:"childFirmStkPosition"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"effective firm stock position @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"367"}),(0,l.jsx)(r.td,{children:"childFirmOpenOrders"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"open sell orders counted in marking @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"370"}),(0,l.jsx)(r.td,{children:"childLocateQuan"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"available locate quantity (if selling short) @ child order send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"373"}),(0,l.jsx)(r.td,{children:"childLocateFirm"}),(0,l.jsx)(r.td,{children:"string(6)"}),(0,l.jsx)(r.td,{children:"firm granting the locate"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"376"}),(0,l.jsx)(r.td,{children:"childLocatePool"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"locate pool @ firm granting locate"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"379"}),(0,l.jsx)(r.td,{children:"childMktStance"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/MktStance",children:"enum : MktStance"})}),(0,l.jsx)(r.td,{children:"child order was expected to be marketable @ child send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"382"}),(0,l.jsx)(r.td,{children:"childCxlAttempted"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{children:"cancel attempt was made on the child order prior to receiving this fill"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"385"}),(0,l.jsx)(r.td,{children:"childCxlFillLatency"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"cancel attempt -to- fill report latency (in ms)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"388"}),(0,l.jsx)(r.td,{children:"childMethod"}),(0,l.jsx)(r.td,{children:"string(8)"}),(0,l.jsx)(r.td,{children:"execution method string"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"391"}),(0,l.jsx)(r.td,{children:"childSource"}),(0,l.jsx)(r.td,{children:"string(12)"}),(0,l.jsx)(r.td,{children:"execution source string"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"394"}),(0,l.jsx)(r.td,{children:"firmType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/FirmType",children:"enum : FirmType"})}),(0,l.jsx)(r.td,{children:"child order firm type [Customer, ProCust, Firm, MM, etc]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"397"}),(0,l.jsx)(r.td,{children:"priAggGroup"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"primary aggregation group"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"400"}),(0,l.jsx)(r.td,{children:"secAggGroup"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{children:"secondary aggregation group"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"403"}),(0,l.jsx)(r.td,{children:"directedClientFirm"}),(0,l.jsx)(r.td,{children:"string(16)"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"406"}),(0,l.jsx)(r.td,{children:"isCommPaying"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"409"}),(0,l.jsx)(r.td,{children:"fillTransactDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"transaction date/time as reported by exchange or down stream broker"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"412"}),(0,l.jsx)(r.td,{children:"fillTs"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"fill report ts (seconds since startup; 100 nanosec resolution)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"415"}),(0,l.jsx)(r.td,{children:"fillDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"Date/time of fill arrival (SRDateTime)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"418"}),(0,l.jsx)(r.td,{children:"fillExch"}),(0,l.jsx)(r.td,{children:"string(12)"}),(0,l.jsx)(r.td,{children:"ExDest code from child order execution report"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"421"}),(0,l.jsx)(r.td,{children:"fillExecId"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"street side execution Id"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"424"}),(0,l.jsx)(r.td,{children:"fillExecRefId"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"street side execution ref Id (only used when busting an execution)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"427"}),(0,l.jsx)(r.td,{children:"fillLegRefId"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"legRefId for multileg fills"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"430"}),(0,l.jsx)(r.td,{children:"fillLegRatio"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"legRatio (if spread order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"433"}),(0,l.jsx)(r.td,{children:"fillExchFee"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"SpiderRock estimate of the exchange fee based on liquidity tags (best effort)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"436"}),(0,l.jsx)(r.td,{children:"fillMarket"}),(0,l.jsx)(r.td,{children:"string(8)"}),(0,l.jsx)(r.td,{children:"usually from execReport.lastMkt as reported by child order venue"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"439"}),(0,l.jsx)(r.td,{children:"fillPrice"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"fill price"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"442"}),(0,l.jsx)(r.td,{children:"fillQuantity"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"fill quantity"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"445"}),(0,l.jsx)(r.td,{children:"fillReportDetail"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"extra detail (if any) from child execution"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"448"}),(0,l.jsx)(r.td,{children:"fillBid"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market bid @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"451"}),(0,l.jsx)(r.td,{children:"fillAsk"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market ask @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"454"}),(0,l.jsx)(r.td,{children:"fillMark"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"mid-market (or SR surface price if option) @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"457"}),(0,l.jsx)(r.td,{children:"fillFairWidth"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"model fair width @ fill time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"460"}),(0,l.jsx)(r.td,{children:"fillUMark"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier mark @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"463"}),(0,l.jsx)(r.td,{children:"fillUBid"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier market bid @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"466"}),(0,l.jsx)(r.td,{children:"fillUAsk"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier market bid @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"469"}),(0,l.jsx)(r.td,{children:"fillUBidSz"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"underlier bid size @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"472"}),(0,l.jsx)(r.td,{children:"fillUAskSz"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"underlier ask size @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"475"}),(0,l.jsx)(r.td,{children:"fillVolAtm"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"atm volatility @ fill arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"478"}),(0,l.jsx)(r.td,{children:"fillMark1M"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"mid-market (or SR surface price if option) @ fill arrival + 1m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"481"}),(0,l.jsx)(r.td,{children:"fillMark10M"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"mid-market (or SR surface price if option) @ fill arrival + 10m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"484"}),(0,l.jsx)(r.td,{children:"fillBid1M"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market bid @ fill arrival + 1m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"487"}),(0,l.jsx)(r.td,{children:"fillAsk1M"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market ask @ fill arrival + 1m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"490"}),(0,l.jsx)(r.td,{children:"fillBid10M"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market bid @ fill arrival + 10m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"493"}),(0,l.jsx)(r.td,{children:"fillAsk10M"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market ask @ fill arrival + 10m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"496"}),(0,l.jsx)(r.td,{children:"fillUMark1M"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier mark @ fill arrival + 1m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"499"}),(0,l.jsx)(r.td,{children:"fillUMark10M"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier mark @ fill arrival + 10m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"502"}),(0,l.jsx)(r.td,{children:"fillVolAtm1M"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"atm volatility (options only) + 1m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"505"}),(0,l.jsx)(r.td,{children:"fillVolAtm10M"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"atm volatility (options only) + 10m"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"508"}),(0,l.jsx)(r.td,{children:"fillState1M"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/FillMarkState",children:"enum : FillMarkState"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"511"}),(0,l.jsx)(r.td,{children:"fillState10M"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/FillMarkState",children:"enum : FillMarkState"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"514"}),(0,l.jsx)(r.td,{children:"fillVol"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill volatility @ fillLimitRefUPrc & fillLimitRefSDiv"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"517"}),(0,l.jsx)(r.td,{children:"fillVolS"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill volatility @ surfaceUPrc & surfaceSDiv"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"520"}),(0,l.jsx)(r.td,{children:"fillProb"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"T+10m probability for the fill @ fill arrival send time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"523"}),(0,l.jsx)(r.td,{children:"fillLimitRefUPrc"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"limit reference underlier price @ fill arrival time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"526"}),(0,l.jsx)(r.td,{children:"fillLimitRefSDiv"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"limit reference sdiv value @ fill arrival time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"529"}),(0,l.jsx)(r.td,{children:"fillLimitPrc"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"parent order limit price @ fill arrival time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"532"}),(0,l.jsx)(r.td,{children:"fillVe"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill vega"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"535"}),(0,l.jsx)(r.td,{children:"fillGa"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill gamma"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"538"}),(0,l.jsx)(r.td,{children:"fillDe"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill delta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"541"}),(0,l.jsx)(r.td,{children:"fillTh"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill theta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"547"}),(0,l.jsx)(r.td,{children:"fillVeRatio"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"fill ve / fill atm ve"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"550"}),(0,l.jsx)(r.td,{children:"fillBeta"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"SpiderRock estimate of beta to SPX"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"812"}),(0,l.jsx)(r.td,{children:"riskVega"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk vega"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"813"}),(0,l.jsx)(r.td,{children:"riskWtVega"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk gamma"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"814"}),(0,l.jsx)(r.td,{children:"riskNValue"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk delta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"815"}),(0,l.jsx)(r.td,{children:"riskDelta"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk delta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"816"}),(0,l.jsx)(r.td,{children:"riskDDelta"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"risk ddelta"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"817"}),(0,l.jsx)(r.td,{children:"riskRm1"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"818"}),(0,l.jsx)(r.td,{children:"riskRm2"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"819"}),(0,l.jsx)(r.td,{children:"riskRm3"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"820"}),(0,l.jsx)(r.td,{children:"riskRm4"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"821"}),(0,l.jsx)(r.td,{children:"riskRm5"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"822"}),(0,l.jsx)(r.td,{children:"riskRm6"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"823"}),(0,l.jsx)(r.td,{children:"riskRm7"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"824"}),(0,l.jsx)(r.td,{children:"marginUDnVDn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier down, vol down"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"825"}),(0,l.jsx)(r.td,{children:"marginUDnVUp"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier down, vol up"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"826"}),(0,l.jsx)(r.td,{children:"marginUUpVDn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier up, vol down"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"827"}),(0,l.jsx)(r.td,{children:"marginUUpVUp"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier up, vol up"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"828"}),(0,l.jsx)(r.td,{children:"riskU15Dn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier dn 15% shock slide"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"829"}),(0,l.jsx)(r.td,{children:"riskU15Up"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier up 15% shock slide"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"830"}),(0,l.jsx)(r.td,{children:"riskU50Dn"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier dn 50% shock slide"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"831"}),(0,l.jsx)(r.td,{children:"riskU50Up"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"underlier up 50% shock slide"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"604"}),(0,l.jsx)(r.td,{children:"fillBrkrRate"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"billing brokerage rate (tier 1)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"607"}),(0,l.jsx)(r.td,{children:"fillRoutingRate"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"billing routing rate (tier 1)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"835"}),(0,l.jsx)(r.td,{children:"mmPrefCode"}),(0,l.jsx)(r.td,{children:"string(6)"}),(0,l.jsx)(r.td,{children:"market maker preference code (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"836"}),(0,l.jsx)(r.td,{children:"mmCredit"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"expected market maker credit (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"610"}),(0,l.jsx)(r.td,{children:"riskCode"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RiskCode",children:"enum : RiskCode"})}),(0,l.jsx)(r.td,{children:"SpiderRock Risk Code (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"613"}),(0,l.jsx)(r.td,{children:"billingSecType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BillingSecType",children:"enum : BillingSecType"})}),(0,l.jsx)(r.td,{children:"SpiderRock billing security type"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"616"}),(0,l.jsx)(r.td,{children:"billingCategory"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/BillingCategory",children:"enum : BillingCategory"})}),(0,l.jsx)(r.td,{children:"SpiderRock billing category"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"619"}),(0,l.jsx)(r.td,{children:"spdrLiquidityTag"}),(0,l.jsx)(r.td,{children:"string(2)"}),(0,l.jsx)(r.td,{children:"SpiderRock normalized liquidity tag"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"622"}),(0,l.jsx)(r.td,{children:"exchLiquidityTag"}),(0,l.jsx)(r.td,{children:"string(4)"}),(0,l.jsx)(r.td,{children:"liquidity tag as reported by downstream venue (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"625"}),(0,l.jsx)(r.td,{children:"fillExchDetail"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsxs)(r.td,{children:["other fix tags (tag",":value","#tag",":value",") [additional detail used for analysis]"]})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"628"}),(0,l.jsx)(r.td,{children:"lastCapacity"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/OrderCapacity",children:"enum : OrderCapacity"})}),(0,l.jsx)(r.td,{children:"child order capacity"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"631"}),(0,l.jsx)(r.td,{children:"exchFirmType"}),(0,l.jsx)(r.td,{children:"string(6)"}),(0,l.jsx)(r.td,{children:"used to reflect field from a downstread execution back up to upstream fill report"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"634"}),(0,l.jsx)(r.td,{children:"extExecBroker"}),(0,l.jsx)(r.td,{children:"string(12)"}),(0,l.jsx)(r.td,{children:"used to reflect field from a downstream destination back up to and upstream fill report"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"637"}),(0,l.jsx)(r.td,{children:"relationshipType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/RelationshipType",children:"enum : RelationshipType"})}),(0,l.jsx)(r.td,{children:"type of SR <-> client relationship"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"640"}),(0,l.jsx)(r.td,{children:"clArriveMark"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"client specified arrival mark (passed through from parent order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"643"}),(0,l.jsx)(r.td,{children:"parentDttm"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"parent order creation date/time"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"646"}),(0,l.jsx)(r.td,{children:"parentOrderSize"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"parent order size"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"649"}),(0,l.jsx)(r.td,{children:"parentUBid"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier market bid @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"652"}),(0,l.jsx)(r.td,{children:"parentUAsk"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier market ask @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"655"}),(0,l.jsx)(r.td,{children:"parentUMark"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier mid mark @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"658"}),(0,l.jsx)(r.td,{children:"parentBid"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market bid @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"661"}),(0,l.jsx)(r.td,{children:"parentAsk"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"market ask @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"664"}),(0,l.jsx)(r.td,{children:"parentMark"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"mid-market (or SR surface price) @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"667"}),(0,l.jsx)(r.td,{children:"parentFairWidth"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"model fair width @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"670"}),(0,l.jsx)(r.td,{children:"parentSurfVol"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"SR surf vol @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"673"}),(0,l.jsx)(r.td,{children:"parentLimitVol"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"parent order limit volatilty (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"676"}),(0,l.jsx)(r.td,{children:"parentLimitPrc"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"parent order limit price @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"679"}),(0,l.jsx)(r.td,{children:"parentLimitRefUPrc"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"limit reference underlier price @ parent order arrival"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"682"}),(0,l.jsx)(r.td,{children:"parentTheoVol"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"client supplied theoretical volatility (used for markup only) [copied from parent order]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"685"}),(0,l.jsx)(r.td,{children:"parentTheoPrc"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"option price corresponding parentTheoVol"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"688"}),(0,l.jsx)(r.td,{children:"parentPosType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,l.jsx)(r.td,{children:"parent order position type"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"691"}),(0,l.jsx)(r.td,{children:"parentSSaleFlag"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,l.jsx)(r.td,{children:"short sale flag on parent order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"832"}),(0,l.jsx)(r.td,{children:"noticeNumber"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{children:"RFR / Auction noticeNumber (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"697"}),(0,l.jsx)(r.td,{children:"numMakeExchanges"}),(0,l.jsx)(r.td,{children:"byte"}),(0,l.jsx)(r.td,{children:"number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available."})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"700"}),(0,l.jsx)(r.td,{children:"publicSize"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PublicSizeHandling",children:"enum : PublicSizeHandling"})}),(0,l.jsx)(r.td,{children:"public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"703"}),(0,l.jsx)(r.td,{children:"canOverlapCxlRepl"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{children:"can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"706"}),(0,l.jsx)(r.td,{children:"progressRule"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ProgressRule",children:"enum : ProgressRule"})}),(0,l.jsx)(r.td,{children:"Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"709"}),(0,l.jsx)(r.td,{children:"exchMaskEnabled"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,l.jsx)(r.td,{children:"exchMask != 0"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"712"}),(0,l.jsx)(r.td,{children:"timeInForce"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/TimeInForce",children:"enum : TimeInForce"})}),(0,l.jsx)(r.td,{children:"Parent order market session"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"715"}),(0,l.jsx)(r.td,{children:"parentOrderHandling"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ParentOrderHandling",children:"enum : ParentOrderHandling"})}),(0,l.jsx)(r.td,{children:"Primary/Take Algo Handler"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"718"}),(0,l.jsx)(r.td,{children:"parentBalanceHandling"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ParentBalanceHandling",children:"enum : ParentBalanceHandling"})}),(0,l.jsx)(r.td,{children:"Make Algo Handler"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"721"}),(0,l.jsx)(r.td,{children:"orderLimitType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrLimitType",children:"enum : SpdrLimitType"})}),(0,l.jsx)(r.td,{children:"Primary Limit Type (Prc, Vol, Rel, Market, Smrt, etc)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"724"}),(0,l.jsx)(r.td,{children:"orderLimitClass"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrLimitClass",children:"enum : SpdrLimitClass"})}),(0,l.jsx)(r.td,{children:"Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"727"}),(0,l.jsx)(r.td,{children:"takeReachRule"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/ReachRule",children:"enum : ReachRule"})}),(0,l.jsx)(r.td,{children:"Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"730"}),(0,l.jsx)(r.td,{children:"overrideCode"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/OverrideCode",children:"enum : OverrideCode"})}),(0,l.jsx)(r.td,{children:"SDiv/DDiv override rule (applies if LimitType = Vol)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"733"}),(0,l.jsx)(r.td,{children:"alphaType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/AlphaType",children:"enum : AlphaType"})}),(0,l.jsx)(r.td,{children:"Affects limit probabilities (applies if LimitClass = Probability)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"736"}),(0,l.jsx)(r.td,{children:"parentStrategy"}),(0,l.jsx)(r.td,{children:"string(36)"}),(0,l.jsx)(r.td,{children:"client strategy [usually client supplied]"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"739"}),(0,l.jsx)(r.td,{children:"userName"}),(0,l.jsx)(r.td,{children:"string(24)"}),(0,l.jsx)(r.td,{children:"user name associated with the parent order"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"742"}),(0,l.jsx)(r.td,{children:"autoHedge"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/AutoHedge",children:"enum : AutoHedge"})}),(0,l.jsx)(r.td,{children:"auto-hedge algorithm (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"745"}),(0,l.jsx)(r.td,{children:"hedgeSecKey"}),(0,l.jsx)(r.td,{children:"ExpiryKey"}),(0,l.jsx)(r.td,{children:"auto-hedge sec key (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"748"}),(0,l.jsx)(r.td,{children:"hedgeSecType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,l.jsx)(r.td,{children:"auto-hedge sec type (if any)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"751"}),(0,l.jsx)(r.td,{children:"hedgeBetaRatio"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"754"}),(0,l.jsx)(r.td,{children:"hedgeScope"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/HedgeScope",children:"enum : HedgeScope"})}),(0,l.jsx)(r.td,{children:"hedge group scope"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"757"}),(0,l.jsx)(r.td,{children:"userData1"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"client supplied data field; passes through to parent and child executions and reports as well as FIX drops"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"760"}),(0,l.jsx)(r.td,{children:"userData2"}),(0,l.jsx)(r.td,{children:"text1"}),(0,l.jsx)(r.td,{children:"client supplied data field; passes through to parent and child executions and reports as well as FIX drops"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"763"}),(0,l.jsx)(r.td,{children:"years"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"years to expiration"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"766"}),(0,l.jsx)(r.td,{children:"underliersPerCn"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"option delivery underliers per contract"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"769"}),(0,l.jsx)(r.td,{children:"underlierType"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/UnderlierType",children:"enum : UnderlierType"})}),(0,l.jsx)(r.td,{children:"type of underlier (affects $greek calculations)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"772"}),(0,l.jsx)(r.td,{children:"tickValue"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"$NLV value of a single tick change in display premium\t(pointValue = tickValue / tickSize)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"775"}),(0,l.jsx)(r.td,{children:"pointValue"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"$NLV value of a single point change in display premium (pointValue = tickValue / tickSize)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"778"}),(0,l.jsx)(r.td,{children:"pointCurrency"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"781"}),(0,l.jsx)(r.td,{children:"uPrcRatio"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"UPrcRatio (SymbolRatio) from product definition"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"784"}),(0,l.jsx)(r.td,{children:"minTickSize"}),(0,l.jsx)(r.td,{children:"float"}),(0,l.jsx)(r.td,{children:"minimum market price variation (dnTickSize if on a boundary)"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"787"}),(0,l.jsx)(r.td,{children:"priceFormat"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,l.jsx)(r.td,{children:"SpiderRock price display format code"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"790"}),(0,l.jsx)(r.td,{children:"uPriceFormat"}),(0,l.jsx)(r.td,{children:(0,l.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,l.jsx)(r.td,{children:"SpiderRock underlier price display format code"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"837"}),(0,l.jsx)(r.td,{children:"responseType"}),(0,l.jsx)(r.td,{children:"string(4)"}),(0,l.jsx)(r.td,{children:"usually an exch auction response type"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"838"}),(0,l.jsx)(r.td,{children:"nbboBid"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"nbbo bid @ child order send"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"839"}),(0,l.jsx)(r.td,{children:"nbboAsk"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"nbbo ask @ child order send"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"840"}),(0,l.jsx)(r.td,{children:"childUPrc"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"underlier price when child order sent"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"841"}),(0,l.jsx)(r.td,{children:"exchBidSz"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"exch bid size @ child order send"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"842"}),(0,l.jsx)(r.td,{children:"exchAskSz"}),(0,l.jsx)(r.td,{children:"int"}),(0,l.jsx)(r.td,{children:"exch ask size @ child order send"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"793"}),(0,l.jsx)(r.td,{children:"liveUPrc"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"SpiderRock internal use only"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"796"}),(0,l.jsx)(r.td,{children:"liveMark"}),(0,l.jsx)(r.td,{children:"double"}),(0,l.jsx)(r.td,{children:"SpiderRock internal use only"})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"799"}),(0,l.jsx)(r.td,{children:"srcTimestamp"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"802"}),(0,l.jsx)(r.td,{children:"sgwTimestamp"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"805"}),(0,l.jsx)(r.td,{children:"engTimestamp"}),(0,l.jsx)(r.td,{children:"long"}),(0,l.jsx)(r.td,{})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{children:"808"}),(0,l.jsx)(r.td,{children:"timestamp"}),(0,l.jsx)(r.td,{children:"DateTime"}),(0,l.jsx)(r.td,{children:"timestamp of this record [not necessarily the timstamp of the fill itself]"})]})]})]}),"\n",(0,l.jsx)(r.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,l.jsxs)(t.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrParentExecution'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n#Required Parameters\n\"apiKey\": API_KEY,\n\"cmd\": 'getschema',\n\"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrParentExecution'\n\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,l.jsxs)(t.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentExecution\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|reviewClOrdId|altFillId|altOrderId|altCrossId|altLegRefId|altAccnt|altUserName|srcRoutingCode|riskGroupId|triggerGroupId|triggerTimestamp|streetClOrdId|streetOrderId|parentShape|secKey|secType|ticker|originTicker|originSecKey|accnt|clientFirm|spdrSource|groupingCode|coreClientFirm|sponsorClientFirm|routingCode|engineName|gatewayName|execRole|execBrkrCode|execBrkrMPID|altBrkrMPID|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|clearingFirm|clearingAccnt|origExecID|lastExecID|remoteText|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|childShape|childSize|childPrice|childDttm|childExch|childExDest|childExecBroker|childIsDirected|childIsoSweep|childOrderHandling|childAlgoHandler|childCreateReason|childCancelReason|childMakerTaker|childUBid|childUAsk|childBid|childAsk|childMark|childFairWidth|childVol|childProb|childLimitRefUPrc|childLimitPrc|childVolAtm|childPosType|childFirmOptPosition|childSSaleFlag|childFirmStkPosition|childFirmOpenOrders|childLocateQuan|childLocateFirm|childLocatePool|childMktStance|childCxlAttempted|childCxlFillLatency|childMethod|childSource|firmType|priAggGroup|secAggGroup|directedClientFirm|isCommPaying|fillTransactDttm|fillTs|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillReportDetail|fillBid|fillAsk|fillMark|fillFairWidth|fillUMark|fillUBid|fillUAsk|fillUBidSz|fillUAskSz|fillVolAtm|fillMark1M|fillMark10M|fillBid1M|fillAsk1M|fillBid10M|fillAsk10M|fillUMark1M|fillUMark10M|fillVolAtm1M|fillVolAtm10M|fillState1M|fillState10M|fillVol|fillVolS|fillProb|fillLimitRefUPrc|fillLimitRefSDiv|fillLimitPrc|fillVe|fillGa|fillDe|fillTh|fillVeRatio|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU15Dn|riskU15Up|riskU50Dn|riskU50Up|fillBrkrRate|fillRoutingRate|mmPrefCode|mmCredit|riskCode|billingSecType|billingCategory|spdrLiquidityTag|exchLiquidityTag|fillExchDetail|lastCapacity|exchFirmType|extExecBroker|relationshipType|clArriveMark|parentDttm|parentOrderSize|parentUBid|parentUAsk|parentUMark|parentBid|parentAsk|parentMark|parentFairWidth|parentSurfVol|parentLimitVol|parentLimitPrc|parentLimitRefUPrc|parentTheoVol|parentTheoPrc|parentPosType|parentSSaleFlag|noticeNumber|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|exchMaskEnabled|timeInForce|parentOrderHandling|parentBalanceHandling|orderLimitType|orderLimitClass|takeReachRule|overrideCode|alphaType|parentStrategy|userName|autoHedge|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|userData1|userData2|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|responseType|nbboBid|nbboAsk|childUPrc|exchBidSz|exchAskSz|liveUPrc|liveMark|srcTimestamp|sgwTimestamp|engTimestamp|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'reviewClOrdId:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrParentExecution' \\\n--data-urlencode 'view=sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|reviewClOrdId|altFillId|altOrderId|altCrossId|altLegRefId|altAccnt|altUserName|srcRoutingCode|riskGroupId|triggerGroupId|triggerTimestamp|streetClOrdId|streetOrderId|parentShape|secKey|secType|ticker|originTicker|originSecKey|accnt|clientFirm|spdrSource|groupingCode|coreClientFirm|sponsorClientFirm|routingCode|engineName|gatewayName|execRole|execBrkrCode|execBrkrMPID|altBrkrMPID|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|clearingFirm|clearingAccnt|origExecID|lastExecID|remoteText|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|childShape|childSize|childPrice|childDttm|childExch|childExDest|childExecBroker|childIsDirected|childIsoSweep|childOrderHandling|childAlgoHandler|childCreateReason|childCancelReason|childMakerTaker|childUBid|childUAsk|childBid|childAsk|childMark|childFairWidth|childVol|childProb|childLimitRefUPrc|childLimitPrc|childVolAtm|childPosType|childFirmOptPosition|childSSaleFlag|childFirmStkPosition|childFirmOpenOrders|childLocateQuan|childLocateFirm|childLocatePool|childMktStance|childCxlAttempted|childCxlFillLatency|childMethod|childSource|firmType|priAggGroup|secAggGroup|directedClientFirm|isCommPaying|fillTransactDttm|fillTs|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillReportDetail|fillBid|fillAsk|fillMark|fillFairWidth|fillUMark|fillUBid|fillUAsk|fillUBidSz|fillUAskSz|fillVolAtm|fillMark1M|fillMark10M|fillBid1M|fillAsk1M|fillBid10M|fillAsk10M|fillUMark1M|fillUMark10M|fillVolAtm1M|fillVolAtm10M|fillState1M|fillState10M|fillVol|fillVolS|fillProb|fillLimitRefUPrc|fillLimitRefSDiv|fillLimitPrc|fillVe|fillGa|fillDe|fillTh|fillVeRatio|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU15Dn|riskU15Up|riskU50Dn|riskU50Up|fillBrkrRate|fillRoutingRate|mmPrefCode|mmCredit|riskCode|billingSecType|billingCategory|spdrLiquidityTag|exchLiquidityTag|fillExchDetail|lastCapacity|exchFirmType|extExecBroker|relationshipType|clArriveMark|parentDttm|parentOrderSize|parentUBid|parentUAsk|parentUMark|parentBid|parentAsk|parentMark|parentFairWidth|parentSurfVol|parentLimitVol|parentLimitPrc|parentLimitRefUPrc|parentTheoVol|parentTheoPrc|parentPosType|parentSSaleFlag|noticeNumber|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|exchMaskEnabled|timeInForce|parentOrderHandling|parentBalanceHandling|orderLimitType|orderLimitClass|takeReachRule|overrideCode|alphaType|parentStrategy|userName|autoHedge|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|userData1|userData2|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|responseType|nbboBid|nbboAsk|childUPrc|exchBidSz|exchAskSz|liveUPrc|liveMark|srcTimestamp|sgwTimestamp|engTimestamp|timestamp' \\\n--data-urlencode 'where=reviewClOrdId:eq:ExampleString'\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,l.jsxs)(t.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentExecution\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|reviewClOrdId|altFillId|altOrderId|altCrossId|altLegRefId|altAccnt|altUserName|srcRoutingCode|riskGroupId|triggerGroupId|triggerTimestamp|streetClOrdId|streetOrderId|parentShape|secKey|secType|ticker|originTicker|originSecKey|accnt|clientFirm|spdrSource|groupingCode|coreClientFirm|sponsorClientFirm|routingCode|engineName|gatewayName|execRole|execBrkrCode|execBrkrMPID|altBrkrMPID|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|clearingFirm|clearingAccnt|origExecID|lastExecID|remoteText|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|childShape|childSize|childPrice|childDttm|childExch|childExDest|childExecBroker|childIsDirected|childIsoSweep|childOrderHandling|childAlgoHandler|childCreateReason|childCancelReason|childMakerTaker|childUBid|childUAsk|childBid|childAsk|childMark|childFairWidth|childVol|childProb|childLimitRefUPrc|childLimitPrc|childVolAtm|childPosType|childFirmOptPosition|childSSaleFlag|childFirmStkPosition|childFirmOpenOrders|childLocateQuan|childLocateFirm|childLocatePool|childMktStance|childCxlAttempted|childCxlFillLatency|childMethod|childSource|firmType|priAggGroup|secAggGroup|directedClientFirm|isCommPaying|fillTransactDttm|fillTs|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillReportDetail|fillBid|fillAsk|fillMark|fillFairWidth|fillUMark|fillUBid|fillUAsk|fillUBidSz|fillUAskSz|fillVolAtm|fillMark1M|fillMark10M|fillBid1M|fillAsk1M|fillBid10M|fillAsk10M|fillUMark1M|fillUMark10M|fillVolAtm1M|fillVolAtm10M|fillState1M|fillState10M|fillVol|fillVolS|fillProb|fillLimitRefUPrc|fillLimitRefSDiv|fillLimitPrc|fillVe|fillGa|fillDe|fillTh|fillVeRatio|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU15Dn|riskU15Up|riskU50Dn|riskU50Up|fillBrkrRate|fillRoutingRate|mmPrefCode|mmCredit|riskCode|billingSecType|billingCategory|spdrLiquidityTag|exchLiquidityTag|fillExchDetail|lastCapacity|exchFirmType|extExecBroker|relationshipType|clArriveMark|parentDttm|parentOrderSize|parentUBid|parentUAsk|parentUMark|parentBid|parentAsk|parentMark|parentFairWidth|parentSurfVol|parentLimitVol|parentLimitPrc|parentLimitRefUPrc|parentTheoVol|parentTheoPrc|parentPosType|parentSSaleFlag|noticeNumber|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|exchMaskEnabled|timeInForce|parentOrderHandling|parentBalanceHandling|orderLimitType|orderLimitClass|takeReachRule|overrideCode|alphaType|parentStrategy|userName|autoHedge|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|userData1|userData2|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|responseType|nbboBid|nbboAsk|childUPrc|exchBidSz|exchAskSz|liveUPrc|liveMark|srcTimestamp|sgwTimestamp|engTimestamp|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'reviewClOrdId:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'sysRealm:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrParentExecution' \\\n--data-urlencode 'view=sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|reviewClOrdId|altFillId|altOrderId|altCrossId|altLegRefId|altAccnt|altUserName|srcRoutingCode|riskGroupId|triggerGroupId|triggerTimestamp|streetClOrdId|streetOrderId|parentShape|secKey|secType|ticker|originTicker|originSecKey|accnt|clientFirm|spdrSource|groupingCode|coreClientFirm|sponsorClientFirm|routingCode|engineName|gatewayName|execRole|execBrkrCode|execBrkrMPID|altBrkrMPID|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|clearingFirm|clearingAccnt|origExecID|lastExecID|remoteText|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|childShape|childSize|childPrice|childDttm|childExch|childExDest|childExecBroker|childIsDirected|childIsoSweep|childOrderHandling|childAlgoHandler|childCreateReason|childCancelReason|childMakerTaker|childUBid|childUAsk|childBid|childAsk|childMark|childFairWidth|childVol|childProb|childLimitRefUPrc|childLimitPrc|childVolAtm|childPosType|childFirmOptPosition|childSSaleFlag|childFirmStkPosition|childFirmOpenOrders|childLocateQuan|childLocateFirm|childLocatePool|childMktStance|childCxlAttempted|childCxlFillLatency|childMethod|childSource|firmType|priAggGroup|secAggGroup|directedClientFirm|isCommPaying|fillTransactDttm|fillTs|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillReportDetail|fillBid|fillAsk|fillMark|fillFairWidth|fillUMark|fillUBid|fillUAsk|fillUBidSz|fillUAskSz|fillVolAtm|fillMark1M|fillMark10M|fillBid1M|fillAsk1M|fillBid10M|fillAsk10M|fillUMark1M|fillUMark10M|fillVolAtm1M|fillVolAtm10M|fillState1M|fillState10M|fillVol|fillVolS|fillProb|fillLimitRefUPrc|fillLimitRefSDiv|fillLimitPrc|fillVe|fillGa|fillDe|fillTh|fillVeRatio|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU15Dn|riskU15Up|riskU50Dn|riskU50Up|fillBrkrRate|fillRoutingRate|mmPrefCode|mmCredit|riskCode|billingSecType|billingCategory|spdrLiquidityTag|exchLiquidityTag|fillExchDetail|lastCapacity|exchFirmType|extExecBroker|relationshipType|clArriveMark|parentDttm|parentOrderSize|parentUBid|parentUAsk|parentUMark|parentBid|parentAsk|parentMark|parentFairWidth|parentSurfVol|parentLimitVol|parentLimitPrc|parentLimitRefUPrc|parentTheoVol|parentTheoPrc|parentPosType|parentSSaleFlag|noticeNumber|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|exchMaskEnabled|timeInForce|parentOrderHandling|parentBalanceHandling|orderLimitType|orderLimitClass|takeReachRule|overrideCode|alphaType|parentStrategy|userName|autoHedge|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|userData1|userData2|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|responseType|nbboBid|nbboAsk|childUPrc|exchBidSz|exchAskSz|liveUPrc|liveMark|srcTimestamp|sgwTimestamp|engTimestamp|timestamp' \\\n--data-urlencode 'where=reviewClOrdId:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=sysRealm:ASC'\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,l.jsxs)(t.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentExecution\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|reviewClOrdId|altFillId|altOrderId|altCrossId|altLegRefId|altAccnt|altUserName|srcRoutingCode|riskGroupId|triggerGroupId|triggerTimestamp|streetClOrdId|streetOrderId|parentShape|secKey|secType|ticker|originTicker|originSecKey|accnt|clientFirm|spdrSource|groupingCode|coreClientFirm|sponsorClientFirm|routingCode|engineName|gatewayName|execRole|execBrkrCode|execBrkrMPID|altBrkrMPID|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|clearingFirm|clearingAccnt|origExecID|lastExecID|remoteText|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|childShape|childSize|childPrice|childDttm|childExch|childExDest|childExecBroker|childIsDirected|childIsoSweep|childOrderHandling|childAlgoHandler|childCreateReason|childCancelReason|childMakerTaker|childUBid|childUAsk|childBid|childAsk|childMark|childFairWidth|childVol|childProb|childLimitRefUPrc|childLimitPrc|childVolAtm|childPosType|childFirmOptPosition|childSSaleFlag|childFirmStkPosition|childFirmOpenOrders|childLocateQuan|childLocateFirm|childLocatePool|childMktStance|childCxlAttempted|childCxlFillLatency|childMethod|childSource|firmType|priAggGroup|secAggGroup|directedClientFirm|isCommPaying|fillTransactDttm|fillTs|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillReportDetail|fillBid|fillAsk|fillMark|fillFairWidth|fillUMark|fillUBid|fillUAsk|fillUBidSz|fillUAskSz|fillVolAtm|fillMark1M|fillMark10M|fillBid1M|fillAsk1M|fillBid10M|fillAsk10M|fillUMark1M|fillUMark10M|fillVolAtm1M|fillVolAtm10M|fillState1M|fillState10M|fillVol|fillVolS|fillProb|fillLimitRefUPrc|fillLimitRefSDiv|fillLimitPrc|fillVe|fillGa|fillDe|fillTh|fillVeRatio|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU15Dn|riskU15Up|riskU50Dn|riskU50Up|fillBrkrRate|fillRoutingRate|mmPrefCode|mmCredit|riskCode|billingSecType|billingCategory|spdrLiquidityTag|exchLiquidityTag|fillExchDetail|lastCapacity|exchFirmType|extExecBroker|relationshipType|clArriveMark|parentDttm|parentOrderSize|parentUBid|parentUAsk|parentUMark|parentBid|parentAsk|parentMark|parentFairWidth|parentSurfVol|parentLimitVol|parentLimitPrc|parentLimitRefUPrc|parentTheoVol|parentTheoPrc|parentPosType|parentSSaleFlag|noticeNumber|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|exchMaskEnabled|timeInForce|parentOrderHandling|parentBalanceHandling|orderLimitType|orderLimitClass|takeReachRule|overrideCode|alphaType|parentStrategy|userName|autoHedge|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|userData1|userData2|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|responseType|nbboBid|nbboAsk|childUPrc|exchBidSz|exchAskSz|liveUPrc|liveMark|srcTimestamp|sgwTimestamp|engTimestamp|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'sysRealm|sysEnvironment|runStatus|execStatus|execShape|parentShape|secType|spdrSource|execRole|clearingFlipType|orderSide|spdrOrderStatus|spdrCloseReason|priceType|childShape|childIsDirected|childIsoSweep|childAlgoHandler|childCreateReason|childCancelReason|childMakerTaker|childPosType|childSSaleFlag|childMktStance|childCxlAttempted|firmType|isCommPaying|fillState1M|fillState10M|riskCode|billingSecType|billingCategory|lastCapacity|relationshipType|parentPosType|parentSSaleFlag|publicSize|canOverlapCxlRepl|progressRule|exchMaskEnabled|timeInForce|parentOrderHandling|parentBalanceHandling|orderLimitType|orderLimitClass|takeReachRule|overrideCode|alphaType|autoHedge|hedgeSecType|hedgeScope|underlierType|pointCurrency|priceFormat|uPriceFormat\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'reviewClOrdId:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getaggregate\',\n"msgType": MSG_TYPE,\n"measure": MEASURE,\n"group": GROUP,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrParentExecution' \\\n--data-urlencode 'measure=sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|reviewClOrdId|altFillId|altOrderId|altCrossId|altLegRefId|altAccnt|altUserName|srcRoutingCode|riskGroupId|triggerGroupId|triggerTimestamp|streetClOrdId|streetOrderId|parentShape|secKey|secType|ticker|originTicker|originSecKey|accnt|clientFirm|spdrSource|groupingCode|coreClientFirm|sponsorClientFirm|routingCode|engineName|gatewayName|execRole|execBrkrCode|execBrkrMPID|altBrkrMPID|execBrkrAccnt|execBrkrClFirm|execBrkrUserName|clearingFlipType|clearingFlipFirm|clearingFlipAccnt|clearingFirm|clearingAccnt|origExecID|lastExecID|remoteText|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|childShape|childSize|childPrice|childDttm|childExch|childExDest|childExecBroker|childIsDirected|childIsoSweep|childOrderHandling|childAlgoHandler|childCreateReason|childCancelReason|childMakerTaker|childUBid|childUAsk|childBid|childAsk|childMark|childFairWidth|childVol|childProb|childLimitRefUPrc|childLimitPrc|childVolAtm|childPosType|childFirmOptPosition|childSSaleFlag|childFirmStkPosition|childFirmOpenOrders|childLocateQuan|childLocateFirm|childLocatePool|childMktStance|childCxlAttempted|childCxlFillLatency|childMethod|childSource|firmType|priAggGroup|secAggGroup|directedClientFirm|isCommPaying|fillTransactDttm|fillTs|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillReportDetail|fillBid|fillAsk|fillMark|fillFairWidth|fillUMark|fillUBid|fillUAsk|fillUBidSz|fillUAskSz|fillVolAtm|fillMark1M|fillMark10M|fillBid1M|fillAsk1M|fillBid10M|fillAsk10M|fillUMark1M|fillUMark10M|fillVolAtm1M|fillVolAtm10M|fillState1M|fillState10M|fillVol|fillVolS|fillProb|fillLimitRefUPrc|fillLimitRefSDiv|fillLimitPrc|fillVe|fillGa|fillDe|fillTh|fillVeRatio|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU15Dn|riskU15Up|riskU50Dn|riskU50Up|fillBrkrRate|fillRoutingRate|mmPrefCode|mmCredit|riskCode|billingSecType|billingCategory|spdrLiquidityTag|exchLiquidityTag|fillExchDetail|lastCapacity|exchFirmType|extExecBroker|relationshipType|clArriveMark|parentDttm|parentOrderSize|parentUBid|parentUAsk|parentUMark|parentBid|parentAsk|parentMark|parentFairWidth|parentSurfVol|parentLimitVol|parentLimitPrc|parentLimitRefUPrc|parentTheoVol|parentTheoPrc|parentPosType|parentSSaleFlag|noticeNumber|numMakeExchanges|publicSize|canOverlapCxlRepl|progressRule|exchMaskEnabled|timeInForce|parentOrderHandling|parentBalanceHandling|orderLimitType|orderLimitClass|takeReachRule|overrideCode|alphaType|parentStrategy|userName|autoHedge|hedgeSecKey|hedgeSecType|hedgeBetaRatio|hedgeScope|userData1|userData2|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|responseType|nbboBid|nbboAsk|childUPrc|exchBidSz|exchAskSz|liveUPrc|liveMark|srcTimestamp|sgwTimestamp|engTimestamp|timestamp' \\\n--data-urlencode 'group=sysRealm|sysEnvironment|runStatus|execStatus|execShape|parentShape|secType|spdrSource|execRole|clearingFlipType|orderSide|spdrOrderStatus|spdrCloseReason|priceType|childShape|childIsDirected|childIsoSweep|childAlgoHandler|childCreateReason|childCancelReason|childMakerTaker|childPosType|childSSaleFlag|childMktStance|childCxlAttempted|firmType|isCommPaying|fillState1M|fillState10M|riskCode|billingSecType|billingCategory|lastCapacity|relationshipType|parentPosType|parentSSaleFlag|publicSize|canOverlapCxlRepl|progressRule|exchMaskEnabled|timeInForce|parentOrderHandling|parentBalanceHandling|orderLimitType|orderLimitClass|takeReachRule|overrideCode|alphaType|autoHedge|hedgeSecType|hedgeScope|underlierType|pointCurrency|priceFormat|uPriceFormat' \\\n--data-urlencode 'where=reviewClOrdId:eq:ExampleString'\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,l.jsxs)(t.A,{children:[(0,l.jsx)(n.A,{value:"Python",label:"Python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrParentExecution\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'reviewClOrdId:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,l.jsx)(n.A,{value:"cUrl",label:"cUrl",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrParentExecution' \\\n--data-urlencode 'where=reviewClOrdId:eq:ExampleString'\n"})})})]})]})}function j(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(x,{...e})}):x(e)}},19365:(e,r,i)=>{i.d(r,{A:()=>n});i(96540);var l=i(34164);const d={tabItem:"tabItem_Ymn6"};var t=i(74848);function n(e){let{children:r,hidden:i,className:n}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,l.A)(d.tabItem,n),hidden:i,children:r})}},11470:(e,r,i)=>{i.d(r,{A:()=>R});var l=i(96540),d=i(34164),t=i(23104),n=i(56347),s=i(205),c=i(57485),a=i(31682),h=i(70679);function o(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:r,children:i}=e;return(0,l.useMemo)((()=>{const e=r??function(e){return o(e).map((e=>{let{props:{value:r,label:i,attributes:l,default:d}}=e;return{value:r,label:i,attributes:l,default:d}}))}(i);return function(e){const r=(0,a.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,i])}function j(e){let{value:r,tabValues:i}=e;return i.some((e=>e.value===r))}function p(e){let{queryString:r=!1,groupId:i}=e;const d=(0,n.W6)(),t=function(e){let{queryString:r=!1,groupId:i}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:r,groupId:i});return[(0,c.aZ)(t),(0,l.useCallback)((e=>{if(!t)return;const r=new URLSearchParams(d.location.search);r.set(t,e),d.replace({...d.location,search:r.toString()})}),[t,d])]}function m(e){const{defaultValue:r,queryString:i=!1,groupId:d}=e,t=x(e),[n,c]=(0,l.useState)((()=>function(e){let{defaultValue:r,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!j({value:r,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const l=i.find((e=>e.default))??i[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:r,tabValues:t}))),[a,o]=p({queryString:i,groupId:d}),[m,u]=function(e){let{groupId:r}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(r),[d,t]=(0,h.Dv)(i);return[d,(0,l.useCallback)((e=>{i&&t.set(e)}),[i,t])]}({groupId:d}),g=(()=>{const e=a??m;return j({value:e,tabValues:t})?e:null})();(0,s.A)((()=>{g&&c(g)}),[g]);return{selectedValue:n,selectValue:(0,l.useCallback)((e=>{if(!j({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);c(e),o(e),u(e)}),[o,u,t]),tabValues:t}}var u=i(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=i(74848);function k(e){let{className:r,block:i,selectedValue:l,selectValue:n,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:a}=(0,t.a_)(),h=e=>{const r=e.currentTarget,i=c.indexOf(r),d=s[i].value;d!==l&&(a(r),n(d))},o=e=>{let r=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const i=c.indexOf(e.currentTarget)+1;r=c[i]??c[0];break}case"ArrowLeft":{const i=c.indexOf(e.currentTarget)-1;r=c[i]??c[c.length-1];break}}r?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.A)("tabs",{"tabs--block":i},r),children:s.map((e=>{let{value:r,label:i,attributes:t}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:l===r?0:-1,"aria-selected":l===r,ref:e=>c.push(e),onKeyDown:o,onClick:h,...t,className:(0,d.A)("tabs__item",g.tabItem,t?.className,{"tabs__item--active":l===r}),children:i??r},r)}))})}function y(e){let{lazy:r,children:i,selectedValue:d}=e;const t=(Array.isArray(i)?i:[i]).filter(Boolean);if(r){const e=t.find((e=>e.props.value===d));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:t.map(((e,r)=>(0,l.cloneElement)(e,{key:r,hidden:e.props.value!==d})))})}function S(e){const r=m(e);return(0,f.jsxs)("div",{className:(0,d.A)("tabs-container",g.tabList),children:[(0,f.jsx)(k,{...r,...e}),(0,f.jsx)(y,{...r,...e})]})}function R(e){const r=(0,u.A)();return(0,f.jsx)(S,{...e,children:o(e.children)},String(r))}},28453:(e,r,i)=>{i.d(r,{R:()=>n,x:()=>s});var l=i(96540);const d={},t=l.createContext(d);function n(e){const r=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:n(e.components),l.createElement(t.Provider,{value:r},e.children)}}}]);