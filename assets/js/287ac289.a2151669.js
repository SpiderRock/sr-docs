"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[14891],{99039:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>x,frontMatter:()=>d,metadata:()=>c,toc:()=>h});var i=n(74848),l=n(28453),t=n(11470),s=n(19365);const d={title:"SpdrRiskExecution"},a="Schema: SpdrRiskExecution (ID: 2325)",c={id:"MessageSchemas/Schema/Topics/execution-engine/SpdrRiskExecution",title:"SpdrRiskExecution",description:"SpdrRiskExecution records are published every time a SpdrParentExecution record is published",source:"@site/versioned_docs/version-8.4.10.2/MessageSchemas/Schema/Topics/2270-execution-engine/SpdrRiskExecution.md",sourceDirName:"MessageSchemas/Schema/Topics/2270-execution-engine",slug:"/MessageSchemas/Schema/Topics/execution-engine/SpdrRiskExecution",permalink:"/docs/8.4.10.2/MessageSchemas/Schema/Topics/execution-engine/SpdrRiskExecution",draft:!1,unlisted:!1,tags:[],version:"8.4.10.2",frontMatter:{title:"SpdrRiskExecution"},sidebar:"messageSchemasSidebar",previous:{title:"ExternAggGroupReport",permalink:"/docs/8.4.10.2/MessageSchemas/Schema/Topics/execution-engine/ExternAggGroupReport"},next:{title:"SpdrSweepDetail",permalink:"/docs/8.4.10.2/MessageSchemas/Schema/Topics/execution-engine/SpdrSweepDetail"}},o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.h1,{id:"schema-spdrriskexecution-id-2325",children:["Schema: SpdrRiskExecution ",(0,i.jsx)("span",{className:"small-text",children:"(ID: 2325)"})]}),"\n",(0,i.jsx)(r.p,{children:"SpdrRiskExecution records are published every time a SpdrParentExecution record is published"}),"\n",(0,i.jsx)(r.h3,{id:"metadata",children:"METADATA"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Attribute"}),(0,i.jsx)(r.th,{children:"Value"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Topic"}),(0,i.jsx)(r.td,{children:"2270-execution-engine"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"MLink Token"}),(0,i.jsx)(r.td,{children:"ClientTrading"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"SRSE Product"}),(0,i.jsx)(r.td,{children:"SRTrade"})]})]})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Note:"})," The symbol ",(0,i.jsx)(r.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"body",children:"BODY"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"#"}),(0,i.jsx)(r.th,{children:"Field"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Comment"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"10="}),(0,i.jsx)(r.td,{children:"fillNumber"}),(0,i.jsx)(r.td,{children:"long"}),(0,i.jsx)(r.td,{children:"SpiderRock execution number (globally unique over trailing 10 days)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"100"}),(0,i.jsx)(r.td,{children:"sysRealm"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/SysRealm",children:"enum : SysRealm"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"103"}),(0,i.jsx)(r.td,{children:"sysEnvironment"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/SysEnvironment",children:"enum : SysEnvironment"})}),(0,i.jsx)(r.td,{children:"original (source) sys environment [Stable, Current, etc]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"106"}),(0,i.jsx)(r.td,{children:"runStatus"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/RunStatus",children:"enum : RunStatus"})}),(0,i.jsx)(r.td,{children:"original (source) run status [Prod,Beta]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"109"}),(0,i.jsx)(r.td,{children:"version"}),(0,i.jsx)(r.td,{children:"byte"}),(0,i.jsx)(r.td,{children:"record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"112"}),(0,i.jsx)(r.td,{children:"execStatus"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/ExecStatus",children:"enum : ExecStatus"})}),(0,i.jsx)(r.td,{children:"SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"115"}),(0,i.jsx)(r.td,{children:"execShape"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/ExecShape",children:"enum : ExecShape"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"118"}),(0,i.jsx)(r.td,{children:"packageId"}),(0,i.jsx)(r.td,{children:"long"}),(0,i.jsx)(r.td,{children:"SR package Id"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"121"}),(0,i.jsx)(r.td,{children:"parentNumber"}),(0,i.jsx)(r.td,{children:"long"}),(0,i.jsx)(r.td,{children:"SR parent number"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"124"}),(0,i.jsx)(r.td,{children:"parentVersion"}),(0,i.jsx)(r.td,{children:"short"}),(0,i.jsx)(r.td,{children:"SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"127"}),(0,i.jsx)(r.td,{children:"baseParentNumber"}),(0,i.jsx)(r.td,{children:"long"}),(0,i.jsx)(r.td,{children:"SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"130"}),(0,i.jsx)(r.td,{children:"clOrdId"}),(0,i.jsx)(r.td,{children:"long"}),(0,i.jsx)(r.td,{children:"SR child order clOrdID resulting in fill"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"133"}),(0,i.jsx)(r.td,{children:"riskGroupId"}),(0,i.jsx)(r.td,{children:"long"}),(0,i.jsx)(r.td,{children:"riskGroupId (parent order group ID) for this execution report"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"142"}),(0,i.jsx)(r.td,{children:"parentShape"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/SpdrOrderShape",children:"enum : SpdrOrderShape"})}),(0,i.jsx)(r.td,{children:"shape of originating parent order"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"145"}),(0,i.jsx)(r.td,{children:"secKey"}),(0,i.jsx)(r.td,{children:"OptionKey"}),(0,i.jsx)(r.td,{children:"execution security key"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"148"}),(0,i.jsx)(r.td,{children:"secType"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,i.jsx)(r.td,{children:"execution security type [Stock, Future, Option]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"151"}),(0,i.jsx)(r.td,{children:"ticker"}),(0,i.jsx)(r.td,{children:"TickerKey"}),(0,i.jsx)(r.td,{children:"base stock key (used for symbol risk aggregation)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"154"}),(0,i.jsx)(r.td,{children:"accnt"}),(0,i.jsx)(r.td,{children:"string(16)"}),(0,i.jsx)(r.td,{children:"SpiderRock trading accnt [broker pkey]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"157"}),(0,i.jsx)(r.td,{children:"clientFirm"}),(0,i.jsx)(r.td,{children:"string(16)"}),(0,i.jsx)(r.td,{children:"SR client firm"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"160"}),(0,i.jsx)(r.td,{children:"spdrSource"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/SpdrSource",children:"enum : SpdrSource"})}),(0,i.jsx)(r.td,{children:"SpiderRock parent order source code [broker pkey]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"163"}),(0,i.jsx)(r.td,{children:"groupingCode"}),(0,i.jsx)(r.td,{children:"long"}),(0,i.jsx)(r.td,{children:"SpiderRock parent broker number [broker pkey]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"353"}),(0,i.jsx)(r.td,{children:"engineName"}),(0,i.jsx)(r.td,{children:"string(32)"}),(0,i.jsx)(r.td,{children:"SpiderRock execution engine that handled the parent order"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"169"}),(0,i.jsx)(r.td,{children:"execRole"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/ExecRole",children:"enum : ExecRole"})}),(0,i.jsx)(r.td,{children:"SpiderRock relationship to this execution record"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"172"}),(0,i.jsx)(r.td,{children:"childOrderHandling"}),(0,i.jsx)(r.td,{children:"string(24)"}),(0,i.jsx)(r.td,{children:"child order handling string from the algo that generated the child order responsible for this fill"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"175"}),(0,i.jsx)(r.td,{children:"childAlgoHandler"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/ChildHandler",children:"enum : ChildHandler"})}),(0,i.jsx)(r.td,{children:"algo handler for this child order"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"178"}),(0,i.jsx)(r.td,{children:"childSSaleFlag"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,i.jsx)(r.td,{children:"short sale flag"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"181"}),(0,i.jsx)(r.td,{children:"userName"}),(0,i.jsx)(r.td,{children:"string(24)"}),(0,i.jsx)(r.td,{children:"user name associated with the parent order"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"184"}),(0,i.jsx)(r.td,{children:"orderSide"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,i.jsx)(r.td,{children:"order side"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"187"}),(0,i.jsx)(r.td,{children:"spdrOrderStatus"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/SpdrOrderStatus",children:"enum : SpdrOrderStatus"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"190"}),(0,i.jsx)(r.td,{children:"spdrCloseReason"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/SpdrCloseReason",children:"enum : SpdrCloseReason"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"193"}),(0,i.jsx)(r.td,{children:"cumFillQuantity"}),(0,i.jsx)(r.td,{children:"int"}),(0,i.jsx)(r.td,{children:"cumulative fills (this parent number only)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"196"}),(0,i.jsx)(r.td,{children:"avgFillPrice"}),(0,i.jsx)(r.td,{children:"double"}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"199"}),(0,i.jsx)(r.td,{children:"cumLegFillQuantity"}),(0,i.jsx)(r.td,{children:"int"}),(0,i.jsx)(r.td,{children:"cumulative fills (spread only)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"202"}),(0,i.jsx)(r.td,{children:"avgLegFillPrice"}),(0,i.jsx)(r.td,{children:"double"}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"205"}),(0,i.jsx)(r.td,{children:"leavesQty"}),(0,i.jsx)(r.td,{children:"int"}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"208"}),(0,i.jsx)(r.td,{children:"priceType"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/PriceType",children:"enum : PriceType"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"211"}),(0,i.jsx)(r.td,{children:"firmType"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/FirmType",children:"enum : FirmType"})}),(0,i.jsx)(r.td,{children:"child order firm type [Customer, ProCust, Firm, MM, etc]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"214"}),(0,i.jsx)(r.td,{children:"priAggGroup"}),(0,i.jsx)(r.td,{children:"string(16)"}),(0,i.jsx)(r.td,{children:"primary aggregation group"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"217"}),(0,i.jsx)(r.td,{children:"secAggGroup"}),(0,i.jsx)(r.td,{children:"string(16)"}),(0,i.jsx)(r.td,{children:"secondary aggregation group"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"220"}),(0,i.jsx)(r.td,{children:"fillTransactDttm"}),(0,i.jsx)(r.td,{children:"DateTime"}),(0,i.jsx)(r.td,{children:"transaction date/time as reported by exchange or down stream broker"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"223"}),(0,i.jsx)(r.td,{children:"fillDttm"}),(0,i.jsx)(r.td,{children:"DateTime"}),(0,i.jsx)(r.td,{children:"Date/time of fill arrival (SRDateTime)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"226"}),(0,i.jsx)(r.td,{children:"fillExch"}),(0,i.jsx)(r.td,{children:"string(12)"}),(0,i.jsx)(r.td,{children:"ExDest code from child order execution report"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"229"}),(0,i.jsx)(r.td,{children:"fillExecId"}),(0,i.jsx)(r.td,{children:"text1"}),(0,i.jsx)(r.td,{children:"street side execution Id"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"232"}),(0,i.jsx)(r.td,{children:"fillExecRefId"}),(0,i.jsx)(r.td,{children:"text1"}),(0,i.jsx)(r.td,{children:"street side execution ref Id (only used when busting an execution)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"235"}),(0,i.jsx)(r.td,{children:"fillLegRefId"}),(0,i.jsx)(r.td,{children:"long"}),(0,i.jsx)(r.td,{children:"legRefId for multileg fills"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"238"}),(0,i.jsx)(r.td,{children:"fillLegRatio"}),(0,i.jsx)(r.td,{children:"int"}),(0,i.jsx)(r.td,{children:"legRatio (if spread order)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"241"}),(0,i.jsx)(r.td,{children:"fillExchFee"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"SpiderRock estimate of the exchange fee based on liquidity tags (best effort)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"244"}),(0,i.jsx)(r.td,{children:"fillMarket"}),(0,i.jsx)(r.td,{children:"string(8)"}),(0,i.jsx)(r.td,{children:"usually from execReport.lastMkt as reported by child order venue"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"247"}),(0,i.jsx)(r.td,{children:"fillPrice"}),(0,i.jsx)(r.td,{children:"double"}),(0,i.jsx)(r.td,{children:"fill price"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"250"}),(0,i.jsx)(r.td,{children:"fillQuantity"}),(0,i.jsx)(r.td,{children:"int"}),(0,i.jsx)(r.td,{children:"fill quantity"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"253"}),(0,i.jsx)(r.td,{children:"fillBid"}),(0,i.jsx)(r.td,{children:"double"}),(0,i.jsx)(r.td,{children:"market bid @ fill arrival"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"256"}),(0,i.jsx)(r.td,{children:"fillAsk"}),(0,i.jsx)(r.td,{children:"double"}),(0,i.jsx)(r.td,{children:"market ask @ fill arrival"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"259"}),(0,i.jsx)(r.td,{children:"fillMark"}),(0,i.jsx)(r.td,{children:"double"}),(0,i.jsx)(r.td,{children:"mid-market (or SR surface price if option) @ fill arrival"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"262"}),(0,i.jsx)(r.td,{children:"fillUBid"}),(0,i.jsx)(r.td,{children:"double"}),(0,i.jsx)(r.td,{children:"underlier market bid @ fill arrival"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"265"}),(0,i.jsx)(r.td,{children:"fillUAsk"}),(0,i.jsx)(r.td,{children:"double"}),(0,i.jsx)(r.td,{children:"underlier market bid @ fill arrival"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"268"}),(0,i.jsx)(r.td,{children:"fillVol"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"fill volatility @ fillLimitRefUPrc"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"271"}),(0,i.jsx)(r.td,{children:"fillVe"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"fill vega"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"274"}),(0,i.jsx)(r.td,{children:"fillGa"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"fill gamma"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"277"}),(0,i.jsx)(r.td,{children:"fillDe"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"fill delta"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"280"}),(0,i.jsx)(r.td,{children:"fillTh"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"fill theta"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"286"}),(0,i.jsx)(r.td,{children:"fillBeta"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"SpiderRock estimate of beta to SPX"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"354"}),(0,i.jsx)(r.td,{children:"riskVega"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"risk vega"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"355"}),(0,i.jsx)(r.td,{children:"riskWtVega"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"risk gamma"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"356"}),(0,i.jsx)(r.td,{children:"riskNValue"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"risk delta"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"357"}),(0,i.jsx)(r.td,{children:"riskDelta"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"risk delta"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"358"}),(0,i.jsx)(r.td,{children:"riskDDelta"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"risk ddelta"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"359"}),(0,i.jsx)(r.td,{children:"riskRm1"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"360"}),(0,i.jsx)(r.td,{children:"riskRm2"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"361"}),(0,i.jsx)(r.td,{children:"riskRm3"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"362"}),(0,i.jsx)(r.td,{children:"riskRm4"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"363"}),(0,i.jsx)(r.td,{children:"riskRm5"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"364"}),(0,i.jsx)(r.td,{children:"riskRm6"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"365"}),(0,i.jsx)(r.td,{children:"riskRm7"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"user defined (from parent order) [used to manage order groups]"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"366"}),(0,i.jsx)(r.td,{children:"marginUDnVDn"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"underlier down, vol down"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"367"}),(0,i.jsx)(r.td,{children:"marginUDnVUp"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"underlier down, vol up"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"368"}),(0,i.jsx)(r.td,{children:"marginUUpVDn"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"underlier up, vol down"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"369"}),(0,i.jsx)(r.td,{children:"marginUUpVUp"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"underlier up, vol up"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"370"}),(0,i.jsx)(r.td,{children:"riskU50Dn"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"underlier dn 50% shock slide"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"371"}),(0,i.jsx)(r.td,{children:"riskU50Up"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"underlier up 50% shock slide"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"322"}),(0,i.jsx)(r.td,{children:"years"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"years to expiration"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"325"}),(0,i.jsx)(r.td,{children:"underliersPerCn"}),(0,i.jsx)(r.td,{children:"int"}),(0,i.jsx)(r.td,{children:"option delivery underliers per contract"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"328"}),(0,i.jsx)(r.td,{children:"underlierType"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/UnderlierType",children:"enum : UnderlierType"})}),(0,i.jsx)(r.td,{children:"type of underlier (affects $greek calculations)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"331"}),(0,i.jsx)(r.td,{children:"tickValue"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"$NLV value of a single tick change in display premium\t(pointValue = tickValue / tickSize)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"334"}),(0,i.jsx)(r.td,{children:"pointValue"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"$NLV value of a single point change in display premium (pointValue = tickValue / tickSize)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"337"}),(0,i.jsx)(r.td,{children:"pointCurrency"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"340"}),(0,i.jsx)(r.td,{children:"uPrcRatio"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"UPrcRatio (SymbolRatio) from product definition"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"343"}),(0,i.jsx)(r.td,{children:"minTickSize"}),(0,i.jsx)(r.td,{children:"float"}),(0,i.jsx)(r.td,{children:"minimum market price variation (dnTickSize if on a boundary)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"346"}),(0,i.jsx)(r.td,{children:"priceFormat"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,i.jsx)(r.td,{children:"SpiderRock price display format code"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"349"}),(0,i.jsx)(r.td,{children:"uPriceFormat"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,i.jsx)(r.td,{children:"SpiderRock underlier price display format code"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"352"}),(0,i.jsx)(r.td,{children:"timestamp"}),(0,i.jsx)(r.td,{children:"DateTime"}),(0,i.jsx)(r.td,{children:"timestamp of this record [not necessarily the timestamp of the fill itself]"})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrRiskExecution'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n#Required Parameters\n\"apiKey\": API_KEY,\n\"cmd\": 'getschema',\n\"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrRiskExecution'\n\n"})})})]}),"\n",(0,i.jsx)(r.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrRiskExecution\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrRiskExecution' \\\n--data-urlencode 'view=sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,i.jsx)(r.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrRiskExecution\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'sysRealm:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrRiskExecution' \\\n--data-urlencode 'view=sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=sysRealm:ASC'\n"})})})]}),"\n",(0,i.jsx)(r.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrRiskExecution\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'sysRealm|sysEnvironment|runStatus|execStatus|execShape|parentShape|secType|spdrSource|execRole|childAlgoHandler|childSSaleFlag|orderSide|spdrOrderStatus|spdrCloseReason|priceType|firmType|underlierType|pointCurrency|priceFormat|uPriceFormat\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getaggregate\',\n"msgType": MSG_TYPE,\n"measure": MEASURE,\n"group": GROUP,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrRiskExecution' \\\n--data-urlencode 'measure=sysRealm|sysEnvironment|runStatus|version|execStatus|execShape|packageId|parentNumber|parentVersion|baseParentNumber|clOrdId|riskGroupId|parentShape|secKey|secType|ticker|accnt|clientFirm|spdrSource|groupingCode|engineName|execRole|childOrderHandling|childAlgoHandler|childSSaleFlag|userName|orderSide|spdrOrderStatus|spdrCloseReason|cumFillQuantity|avgFillPrice|cumLegFillQuantity|avgLegFillPrice|leavesQty|priceType|firmType|priAggGroup|secAggGroup|fillTransactDttm|fillDttm|fillExch|fillExecId|fillExecRefId|fillLegRefId|fillLegRatio|fillExchFee|fillMarket|fillPrice|fillQuantity|fillBid|fillAsk|fillMark|fillUBid|fillUAsk|fillVol|fillVe|fillGa|fillDe|fillTh|fillBeta|riskVega|riskWtVega|riskNValue|riskDelta|riskDDelta|riskRm1|riskRm2|riskRm3|riskRm4|riskRm5|riskRm6|riskRm7|marginUDnVDn|marginUDnVUp|marginUUpVDn|marginUUpVUp|riskU50Dn|riskU50Up|years|underliersPerCn|underlierType|tickValue|pointValue|pointCurrency|uPrcRatio|minTickSize|priceFormat|uPriceFormat|timestamp' \\\n--data-urlencode 'group=sysRealm|sysEnvironment|runStatus|execStatus|execShape|parentShape|secType|spdrSource|execRole|childAlgoHandler|childSSaleFlag|orderSide|spdrOrderStatus|spdrCloseReason|priceType|firmType|underlierType|pointCurrency|priceFormat|uPriceFormat' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,i.jsx)(r.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(s.A,{value:"Python",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrRiskExecution\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(s.A,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrRiskExecution' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function x(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},19365:(e,r,n)=>{n.d(r,{A:()=>s});n(96540);var i=n(34164);const l={tabItem:"tabItem_Ymn6"};var t=n(74848);function s(e){let{children:r,hidden:n,className:s}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,i.A)(l.tabItem,s),hidden:n,children:r})}},11470:(e,r,n)=>{n.d(r,{A:()=>S});var i=n(96540),l=n(34164),t=n(23104),s=n(56347),d=n(205),a=n(57485),c=n(31682),o=n(70679);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:n}=e;return(0,i.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:n,attributes:i,default:l}}=e;return{value:r,label:n,attributes:i,default:l}}))}(n);return function(e){const r=(0,c.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function x(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function p(e){let{queryString:r=!1,groupId:n}=e;const l=(0,s.W6)(),t=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,a.aZ)(t),(0,i.useCallback)((e=>{if(!t)return;const r=new URLSearchParams(l.location.search);r.set(t,e),l.replace({...l.location,search:r.toString()})}),[t,l])]}function m(e){const{defaultValue:r,queryString:n=!1,groupId:l}=e,t=u(e),[s,a]=(0,i.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!x({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:r,tabValues:t}))),[c,h]=p({queryString:n,groupId:l}),[m,j]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[l,t]=(0,o.Dv)(n);return[l,(0,i.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:l}),g=(()=>{const e=c??m;return x({value:e,tabValues:t})?e:null})();(0,d.A)((()=>{g&&a(g)}),[g]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!x({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),j(e)}),[h,j,t]),tabValues:t}}var j=n(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(74848);function y(e){let{className:r,block:n,selectedValue:i,selectValue:s,tabValues:d}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,t.a_)(),o=e=>{const r=e.currentTarget,n=a.indexOf(r),l=d[n].value;l!==i&&(c(r),s(l))},h=e=>{let r=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const n=a.indexOf(e.currentTarget)+1;r=a[n]??a[0];break}case"ArrowLeft":{const n=a.indexOf(e.currentTarget)-1;r=a[n]??a[a.length-1];break}}r?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},r),children:d.map((e=>{let{value:r,label:n,attributes:t}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:i===r?0:-1,"aria-selected":i===r,ref:e=>a.push(e),onKeyDown:h,onClick:o,...t,className:(0,l.A)("tabs__item",g.tabItem,t?.className,{"tabs__item--active":i===r}),children:n??r},r)}))})}function k(e){let{lazy:r,children:n,selectedValue:l}=e;const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=t.find((e=>e.props.value===l));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:t.map(((e,r)=>(0,i.cloneElement)(e,{key:r,hidden:e.props.value!==l})))})}function R(e){const r=m(e);return(0,f.jsxs)("div",{className:(0,l.A)("tabs-container",g.tabList),children:[(0,f.jsx)(y,{...r,...e}),(0,f.jsx)(k,{...r,...e})]})}function S(e){const r=(0,j.A)();return(0,f.jsx)(R,{...e,children:h(e.children)},String(r))}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>d});var i=n(96540);const l={},t=i.createContext(l);function s(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);