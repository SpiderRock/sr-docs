"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8116],{97533:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var n=t(74848),r=t(28453);const s={title:"CCodeDefinition"},d="Schema: CCodeDefinition (ID: 4335)",c={id:"MessageSchemas/Schema/Topics/product-definition/CCodeDefinition",title:"CCodeDefinition",description:"Commodity code (product code) definitions for all futures.  Also maps future ccodes to SpiderRock tickers. Information is sourced from listing exchange product definitions.This table also contains definitions for exchange and user-defined spreads including spreads used as option underliers. SpiderRock typically uses a compact form of the exchange (spread) product ID as the ccode for these products if there is no natural (human-readable) exchange spread ticker issued for the spread.  Note that the full spread definition can be found in the ProductDefinition and human-readable version in the description field below.Note that SpiderRock tickers below are synthetic and are created for organizational purposes only.  SpiderRock synthetic tickers typically begin with a '@' character.",source:"@site/docs/MessageSchemas/Schema/Topics/4335-product-definition/CCodeDefinition.md",sourceDirName:"MessageSchemas/Schema/Topics/4335-product-definition",slug:"/MessageSchemas/Schema/Topics/product-definition/CCodeDefinition",permalink:"/docs/MessageSchemas/Schema/Topics/product-definition/CCodeDefinition",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"CCodeDefinition"},sidebar:"messageSchemasSidebar",previous:{title:"StockQuoteProbability",permalink:"/docs/MessageSchemas/Schema/Topics/probabilities/StockQuoteProbability"},next:{title:"IndustryDefinition",permalink:"/docs/MessageSchemas/Schema/Topics/product-definition/IndustryDefinition"}},l={},o=[{value:"METADATA",id:"metadata",level:3},{value:"PRIMARY KEY",id:"primary-key",level:3},{value:"BODY",id:"body",level:3}];function a(e){const i={a:"a",h1:"h1",h3:"h3",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.h1,{id:"schema-ccodedefinition-id-4335",children:["Schema: CCodeDefinition ",(0,n.jsx)("span",{className:"small-text",children:"(ID: 4335)"})]}),"\n",(0,n.jsxs)(i.p,{children:["Commodity code (product code) definitions for all futures.  Also maps future ccodes to SpiderRock tickers. Information is sourced from listing exchange product definitions.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"This table also contains definitions for exchange and user-defined spreads including spreads used as option underliers. SpiderRock typically uses a compact form of the exchange (spread) product ID as the ccode for these products if there is no natural (human-readable) exchange spread ticker issued for the spread.  Note that the full spread definition can be found in the ProductDefinition and human-readable version in the description field below.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"Note that SpiderRock tickers below are synthetic and are created for organizational purposes only.  SpiderRock synthetic tickers typically begin with a '@' character."]}),"\n",(0,n.jsxs)("div",{className:"single-message-meta",children:[(0,n.jsx)(i.h3,{id:"metadata",children:"METADATA"}),(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Attribute"}),(0,n.jsx)(i.th,{children:"Value"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"MLink Token"}),(0,n.jsx)(i.td,{children:"FutureDefinition"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Topic"}),(0,n.jsx)(i.td,{children:"product-definition"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SRSE Product"}),(0,n.jsx)(i.td,{children:"SRLive, SRAnalytics"})]})]})]})]}),"\n",(0,n.jsxs)("div",{className:"single-message-primarykey",children:[(0,n.jsx)(i.h3,{id:"primary-key",children:"PRIMARY KEY"}),(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Field"}),(0,n.jsx)(i.th,{children:"Type"}),(0,n.jsx)(i.th,{children:"Comment"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"ccode"}),(0,n.jsx)(i.td,{children:"TickerKey"}),(0,n.jsx)(i.td,{})]})})]})]}),"\n",(0,n.jsxs)("div",{className:"single-message-body",children:[(0,n.jsx)(i.h3,{id:"body",children:"BODY"}),(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Field"}),(0,n.jsx)(i.th,{children:"Type"}),(0,n.jsx)(i.th,{children:"Comment"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"bbgGroup"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"../../../Enums/YellowKey",children:"enum : YellowKey"})}),(0,n.jsx)(i.td,{children:"Bloomberg Yellow Key"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"bbgRoot"}),(0,n.jsx)(i.td,{children:"string(6)"}),(0,n.jsx)(i.td,{children:"Bloomberg root"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"clearingCode"}),(0,n.jsx)(i.td,{children:"string(6)"}),(0,n.jsx)(i.td,{children:"GMI/Clearing code"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"description"}),(0,n.jsx)(i.td,{children:"string(48)"}),(0,n.jsx)(i.td,{children:"product description"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"displayPriceScaling"}),(0,n.jsx)(i.td,{children:"float"}),(0,n.jsx)(i.td,{children:"internal display price scale factor override"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"futexch"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"../../../Enums/FutExch",children:"enum : FutExch"})}),(0,n.jsx)(i.td,{children:"listing exchange"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"gmiExchange"}),(0,n.jsx)(i.td,{children:"string(3)"}),(0,n.jsx)(i.td,{children:"GMI (Sungard) exchange code"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"gmiProduct"}),(0,n.jsx)(i.td,{children:"string(3)"}),(0,n.jsx)(i.td,{children:"GMI (Sungard) product code"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"gmiSubType"}),(0,n.jsx)(i.td,{children:"string(3)"}),(0,n.jsx)(i.td,{children:"GMI (Sungard) subtype code"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"marketCenter"}),(0,n.jsx)(i.td,{children:"string(48)"}),(0,n.jsx)(i.td,{children:'market center, eg "ICE Market Type", "CME MarketGroup"'})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"pointCurrency"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,n.jsx)(i.td,{})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"pointValue"}),(0,n.jsx)(i.td,{children:"float"}),(0,n.jsx)(i.td,{children:"$NLV value of a single point change in display premium (pointValue = tickValue / tickSize)"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"positionLimit"}),(0,n.jsx)(i.td,{children:"int"}),(0,n.jsx)(i.td,{children:"max contract limit"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"priceScaling"}),(0,n.jsx)(i.td,{children:"float"}),(0,n.jsx)(i.td,{children:"underlying price scale factor - products where the underlying quotes in cents will have 0.01"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"ricRoot"}),(0,n.jsx)(i.td,{children:"string(6)"}),(0,n.jsx)(i.td,{children:"RIC Root"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"settleTime"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"../../../Enums/SettleTime",children:"enum : SettleTime"})}),(0,n.jsx)(i.td,{children:"Settlement time: None; PM; AM"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"strikeScaling"}),(0,n.jsx)(i.td,{children:"float"}),(0,n.jsx)(i.td,{children:"internal strike price scale factor override"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"tickValue"}),(0,n.jsx)(i.td,{children:"float"}),(0,n.jsx)(i.td,{children:"$NLV value of a single tick change in display premium\t(pointValue = tickValue / tickSize)"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"ticker"}),(0,n.jsx)(i.td,{children:"TickerKey"}),(0,n.jsx)(i.td,{children:"master underlying"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"timestamp"}),(0,n.jsx)(i.td,{children:"DateTime"}),(0,n.jsx)(i.td,{})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"underlierType"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"../../../Enums/UnderlierType",children:"enum : UnderlierType"})}),(0,n.jsx)(i.td,{children:"Underlying type; None; Equity; Other; FX"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"underliersPerCn"}),(0,n.jsx)(i.td,{children:"int"}),(0,n.jsx)(i.td,{children:"shares, bond, or index units underlying the future (contract size)"})]})]})]})]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>d,x:()=>c});var n=t(96540);const r={},s=n.createContext(r);function d(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);