"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[75740],{93520:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>l,toc:()=>h});var t=s(74848),r=s(28453),a=s(11470),c=s(19365);const d={title:"UserMetaData"},i="Schema: UserMetaData (ID: 3470)",l={id:"MessageSchemas/Schema/Topics/mlink/UserMetaData",title:"UserMetaData",description:"METADATA",source:"@site/versioned_docs/version-8.4.12.1/MessageSchemas/Schema/Topics/3325-mlink/UserMetaData.md",sourceDirName:"MessageSchemas/Schema/Topics/3325-mlink",slug:"/MessageSchemas/Schema/Topics/mlink/UserMetaData",permalink:"/docs/8.4.12.1/MessageSchemas/Schema/Topics/mlink/UserMetaData",draft:!1,unlisted:!1,tags:[],version:"8.4.12.1",frontMatter:{title:"UserMetaData"},sidebar:"messageSchemasSidebar",previous:{title:"QueryResult",permalink:"/docs/8.4.12.1/MessageSchemas/Schema/Topics/mlink/QueryResult"},next:{title:"3480-mlink-custom",permalink:"/docs/8.4.12.1/MessageSchemas/Schema/Topics/mlink-custom/"}},o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"REPEATING FIELDS",id:"repeating-fields",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"schema-usermetadata-id-3470",children:["Schema: UserMetaData ",(0,t.jsx)("span",{className:"small-text",children:"(ID: 3470)"})]}),"\n",(0,t.jsx)(n.h3,{id:"metadata",children:"METADATA"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Attribute"}),(0,t.jsx)(n.th,{children:"Value"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Topic"}),(0,t.jsx)(n.td,{children:"3325-mlink"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"MLink Token"}),(0,t.jsx)(n.td,{children:"MLinkRest"})]})]})]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," The symbol ",(0,t.jsx)(n.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"body",children:"BODY"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"#"}),(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Comment"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"100"}),(0,t.jsx)(n.td,{children:"userName"}),(0,t.jsx)(n.td,{children:"string(24)"}),(0,t.jsx)(n.td,{children:"SR UserName Handle"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"103"}),(0,t.jsx)(n.td,{children:"clientFirm"}),(0,t.jsx)(n.td,{children:"string(16)"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"106"}),(0,t.jsx)(n.td,{children:"userType"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/UserType",children:"enum : UserType"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"109"}),(0,t.jsx)(n.td,{children:"displayTimeZone"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/SRTimeZone",children:"enum : SRTimeZone"})}),(0,t.jsxs)(n.td,{children:["[custom",":UserTimeZone","] User timezone (affects date/time display in Tools)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"139"}),(0,t.jsx)(n.td,{children:"clientConfigAccess"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/ConfigAccess",children:"enum : ConfigAccess"})}),(0,t.jsx)(n.td,{children:"user can create new (pending approval) or edit existing client configuration records (SRAdmin, SponsorAdmin, ClientAdmin, or SRUser (any sysenv))"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"142"}),(0,t.jsx)(n.td,{children:"accountTypeControl"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/AccountTypeControl",children:"enum : AccountTypeControl"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"257"}),(0,t.jsx)(n.td,{children:"prodOrderAccess"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/OrderAccess",children:"enum : OrderAccess"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"258"}),(0,t.jsx)(n.td,{children:"testOrderAccess"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/OrderAccess",children:"enum : OrderAccess"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"259"}),(0,t.jsx)(n.td,{children:"canCancelProdOrders"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,t.jsx)(n.td,{children:"user can cancel prod (live) orders (implied false for SRUsers, implied true for SRAdmin, SponsorAdmin, ClientAdmin, and users that can enter live orders)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"260"}),(0,t.jsx)(n.td,{children:"canCancelTestOrders"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,t.jsx)(n.td,{children:"user can cancel test orders (implied false for SRUsers, implied true for SRAdmin, SponsorAdmin, ClientAdmin, and users that can enter live orders)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"261"}),(0,t.jsx)(n.td,{children:"canBookProdExecutions"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,t.jsx)(n.td,{children:"user can enter prod (live) away tickets (default false for SRUsers SRAdmin, SponsorAdmin, and ClientAdmin, default true for users that can enter live orders)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"262"}),(0,t.jsx)(n.td,{children:"canBookTestExecutions"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,t.jsx)(n.td,{children:"user can enter test away tickets (default false for SRUsers, SRAdmin, SponsorAdmin, and ClientAdmin, default true for users that can enter live orders)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"154"}),(0,t.jsx)(n.td,{children:"canEditMarRisk"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"160"}),(0,t.jsx)(n.td,{children:"canEditSupervisoryRisk"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"163"}),(0,t.jsx)(n.td,{children:"canEditStockLocateList"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"166"}),(0,t.jsx)(n.td,{children:"displayName"}),(0,t.jsx)(n.td,{children:"text1"}),(0,t.jsxs)(n.td,{children:["[custom",":UserDisplayName","] User display name"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"169"}),(0,t.jsx)(n.td,{children:"contactEmail"}),(0,t.jsx)(n.td,{children:"text1"}),(0,t.jsx)(n.td,{children:"Contact Email Address (reset password email)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"172"}),(0,t.jsx)(n.td,{children:"contactPhone"}),(0,t.jsx)(n.td,{children:"text1"}),(0,t.jsx)(n.td,{children:"Contact Phone Number (SMS Text #)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"175"}),(0,t.jsx)(n.td,{children:"contactSlack"}),(0,t.jsx)(n.td,{children:"text1"}),(0,t.jsx)(n.td,{children:"Contact Slack Handle"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"178"}),(0,t.jsx)(n.td,{children:"contactIceChat"}),(0,t.jsx)(n.td,{children:"text1"}),(0,t.jsx)(n.td,{children:"Contact IceChat Handle"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"181"}),(0,t.jsx)(n.td,{children:"contactBBergHandle"}),(0,t.jsx)(n.td,{children:"text1"}),(0,t.jsx)(n.td,{children:"Contact Bloomberg Handle (BBGID)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"184"}),(0,t.jsx)(n.td,{children:"authType"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/AuthType",children:"enum : AuthType"})}),(0,t.jsx)(n.td,{children:"type of user logon allowed"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"187"}),(0,t.jsx)(n.td,{children:"defaultAccnt"}),(0,t.jsx)(n.td,{children:"string(16)"}),(0,t.jsx)(n.td,{children:"default account for this user (used as a tool default/setting); ignored if not viewable; if missing then default is the 1st accnt in the viewable list (alpha order)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"190"}),(0,t.jsx)(n.td,{children:"altUserName"}),(0,t.jsx)(n.td,{children:"string(24)"}),(0,t.jsx)(n.td,{children:"alternate (client supplied) user name (usually for client system integration)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"193"}),(0,t.jsx)(n.td,{children:"cmeTraderId"}),(0,t.jsx)(n.td,{children:"string(24)"}),(0,t.jsx)(n.td,{children:"CME assigned trader ID (if any)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"196"}),(0,t.jsx)(n.td,{children:"cmeLocation"}),(0,t.jsx)(n.td,{children:"string(16)"}),(0,t.jsx)(n.td,{children:"For CME. The traders location is required.  Format example:  US,IL"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"199"}),(0,t.jsx)(n.td,{children:"cfeTraderId"}),(0,t.jsx)(n.td,{children:"string(24)"}),(0,t.jsx)(n.td,{children:"CFE assigned trader ID (if any)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"202"}),(0,t.jsx)(n.td,{children:"cfeFrequentTraderId"}),(0,t.jsx)(n.td,{children:"string(24)"}),(0,t.jsx)(n.td,{children:"CFE frequent trader ID (if any)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"205"}),(0,t.jsx)(n.td,{children:"cfeLocation"}),(0,t.jsx)(n.td,{children:"string(8)"}),(0,t.jsx)(n.td,{children:"CFE trader location (required)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"208"}),(0,t.jsx)(n.td,{children:"iceTraderId"}),(0,t.jsx)(n.td,{children:"string(24)"}),(0,t.jsx)(n.td,{children:"ICE assigned trader ID (if any)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"211"}),(0,t.jsx)(n.td,{children:"icePassword"}),(0,t.jsx)(n.td,{children:"string(24)"}),(0,t.jsx)(n.td,{children:"ICE assigned password (if any)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"214"}),(0,t.jsx)(n.td,{children:"iceCompanyId"}),(0,t.jsx)(n.td,{children:"string(24)"}),(0,t.jsx)(n.td,{children:"ICE Company Id of trader (if any)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"217"}),(0,t.jsx)(n.td,{children:"cboeTraderId"}),(0,t.jsx)(n.td,{children:"string(24)"}),(0,t.jsx)(n.td,{children:"Cboe assigned trader ID (if any)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"220"}),(0,t.jsx)(n.td,{children:"badges"}),(0,t.jsx)(n.td,{children:"text1"}),(0,t.jsxs)(n.td,{children:["exchange memembership and badge ids.  CFEFUT",":BADGE1",",NYSESTK",":BADGE2",",..."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"268"}),(0,t.jsx)(n.td,{children:"hasApiKeyAccess"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,t.jsx)(n.td,{children:"User is allowed to use and manage (insert, update and delete) API keys"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"256"}),(0,t.jsx)(n.td,{children:"timestamp"}),(0,t.jsx)(n.td,{children:"DateTime"}),(0,t.jsx)(n.td,{children:"timestamp of last modification"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"repeating-fields",children:"REPEATING FIELDS"}),"\n",(0,t.jsx)(n.p,{children:"AccountAccessControl"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Comment"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"133"}),(0,t.jsx)(n.td,{children:"accnt"}),(0,t.jsx)(n.td,{children:"string(16)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"136"}),(0,t.jsx)(n.td,{children:"accessType"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/AccountAccessType",children:"enum : AccountAccessType"})})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"WebProductControl"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Comment"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"226"}),(0,t.jsx)(n.td,{children:"token"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/WebProductToken",children:"enum : WebProductToken"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"229"}),(0,t.jsx)(n.td,{children:"expires"}),(0,t.jsx)(n.td,{children:"DateTime"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"232"}),(0,t.jsx)(n.td,{children:"value"}),(0,t.jsx)(n.td,{children:"string(10)"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"MLinkControl"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Comment"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"238"}),(0,t.jsx)(n.td,{children:"token"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/MLinkToken",children:"enum : MLinkToken"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"241"}),(0,t.jsx)(n.td,{children:"expires"}),(0,t.jsx)(n.td,{children:"DateTime"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"MarketDataControl"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Comment"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"247"}),(0,t.jsx)(n.td,{children:"token"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/MarketDataToken",children:"enum : MarketDataToken"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"250"}),(0,t.jsx)(n.td,{children:"scope"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../../../Enums/MarketDataScope",children:"enum : MarketDataScope"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"253"}),(0,t.jsx)(n.td,{children:"expires"}),(0,t.jsx)(n.td,{children:"DateTime"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"ApiKeys"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Comment"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"264"}),(0,t.jsx)(n.td,{children:"id"}),(0,t.jsx)(n.td,{children:"byte"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"265"}),(0,t.jsx)(n.td,{children:"label"}),(0,t.jsx)(n.td,{children:"string(255)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"266"}),(0,t.jsx)(n.td,{children:"expires"}),(0,t.jsx)(n.td,{children:"DateTime"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"267"}),(0,t.jsx)(n.td,{children:"created"}),(0,t.jsx)(n.td,{children:"DateTime"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(c.A,{value:"Python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'UserMetaData'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n#Required Parameters\n\"apiKey\": API_KEY,\n\"cmd\": 'getschema',\n\"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,t.jsx)(c.A,{value:"cUrl",label:"cUrl",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=UserMetaData'\n\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(c.A,{value:"Python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'UserMetaData\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'userName|clientFirm|userType|displayTimeZone|clientConfigAccess|accountTypeControl|prodOrderAccess|testOrderAccess|canCancelProdOrders|canCancelTestOrders|canBookProdExecutions|canBookTestExecutions|canEditMarRisk|canEditSupervisoryRisk|canEditStockLocateList|displayName|contactEmail|contactPhone|contactSlack|contactIceChat|contactBBergHandle|authType|defaultAccnt|altUserName|cmeTraderId|cmeLocation|cfeTraderId|cfeFrequentTraderId|cfeLocation|iceTraderId|icePassword|iceCompanyId|cboeTraderId|badges|hasApiKeyAccess|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'userName:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,t.jsx)(c.A,{value:"cUrl",label:"cUrl",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=UserMetaData' \\\n--data-urlencode 'view=userName|clientFirm|userType|displayTimeZone|clientConfigAccess|accountTypeControl|prodOrderAccess|testOrderAccess|canCancelProdOrders|canCancelTestOrders|canBookProdExecutions|canBookTestExecutions|canEditMarRisk|canEditSupervisoryRisk|canEditStockLocateList|displayName|contactEmail|contactPhone|contactSlack|contactIceChat|contactBBergHandle|authType|defaultAccnt|altUserName|cmeTraderId|cmeLocation|cfeTraderId|cfeFrequentTraderId|cfeLocation|iceTraderId|icePassword|iceCompanyId|cboeTraderId|badges|hasApiKeyAccess|timestamp' \\\n--data-urlencode 'where=userName:eq:ExampleString'\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(c.A,{value:"Python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'UserMetaData\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'userName|clientFirm|userType|displayTimeZone|clientConfigAccess|accountTypeControl|prodOrderAccess|testOrderAccess|canCancelProdOrders|canCancelTestOrders|canBookProdExecutions|canBookTestExecutions|canEditMarRisk|canEditSupervisoryRisk|canEditStockLocateList|displayName|contactEmail|contactPhone|contactSlack|contactIceChat|contactBBergHandle|authType|defaultAccnt|altUserName|cmeTraderId|cmeLocation|cfeTraderId|cfeFrequentTraderId|cfeLocation|iceTraderId|icePassword|iceCompanyId|cboeTraderId|badges|hasApiKeyAccess|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'userName:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'userName:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,t.jsx)(c.A,{value:"cUrl",label:"cUrl",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=UserMetaData' \\\n--data-urlencode 'view=userName|clientFirm|userType|displayTimeZone|clientConfigAccess|accountTypeControl|prodOrderAccess|testOrderAccess|canCancelProdOrders|canCancelTestOrders|canBookProdExecutions|canBookTestExecutions|canEditMarRisk|canEditSupervisoryRisk|canEditStockLocateList|displayName|contactEmail|contactPhone|contactSlack|contactIceChat|contactBBergHandle|authType|defaultAccnt|altUserName|cmeTraderId|cmeLocation|cfeTraderId|cfeFrequentTraderId|cfeLocation|iceTraderId|icePassword|iceCompanyId|cboeTraderId|badges|hasApiKeyAccess|timestamp' \\\n--data-urlencode 'where=userName:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=userName:ASC'\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(c.A,{value:"Python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'UserMetaData\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'userName|clientFirm|userType|displayTimeZone|clientConfigAccess|accountTypeControl|prodOrderAccess|testOrderAccess|canCancelProdOrders|canCancelTestOrders|canBookProdExecutions|canBookTestExecutions|canEditMarRisk|canEditSupervisoryRisk|canEditStockLocateList|displayName|contactEmail|contactPhone|contactSlack|contactIceChat|contactBBergHandle|authType|defaultAccnt|altUserName|cmeTraderId|cmeLocation|cfeTraderId|cfeFrequentTraderId|cfeLocation|iceTraderId|icePassword|iceCompanyId|cboeTraderId|badges|hasApiKeyAccess|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'userType|displayTimeZone|clientConfigAccess|accountTypeControl|prodOrderAccess|testOrderAccess|canCancelProdOrders|canCancelTestOrders|canBookProdExecutions|canBookTestExecutions|canEditMarRisk|canEditSupervisoryRisk|canEditStockLocateList|authType|hasApiKeyAccess\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'userName:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getaggregate\',\n"msgType": MSG_TYPE,\n"measure": MEASURE,\n"group": GROUP,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,t.jsx)(c.A,{value:"cUrl",label:"cUrl",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=UserMetaData' \\\n--data-urlencode 'measure=userName|clientFirm|userType|displayTimeZone|clientConfigAccess|accountTypeControl|prodOrderAccess|testOrderAccess|canCancelProdOrders|canCancelTestOrders|canBookProdExecutions|canBookTestExecutions|canEditMarRisk|canEditSupervisoryRisk|canEditStockLocateList|displayName|contactEmail|contactPhone|contactSlack|contactIceChat|contactBBergHandle|authType|defaultAccnt|altUserName|cmeTraderId|cmeLocation|cfeTraderId|cfeFrequentTraderId|cfeLocation|iceTraderId|icePassword|iceCompanyId|cboeTraderId|badges|hasApiKeyAccess|timestamp' \\\n--data-urlencode 'group=userType|displayTimeZone|clientConfigAccess|accountTypeControl|prodOrderAccess|testOrderAccess|canCancelProdOrders|canCancelTestOrders|canBookProdExecutions|canBookTestExecutions|canEditMarRisk|canEditSupervisoryRisk|canEditStockLocateList|authType|hasApiKeyAccess' \\\n--data-urlencode 'where=userName:eq:ExampleString'\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(c.A,{value:"Python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'UserMetaData\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'userName:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,t.jsx)(c.A,{value:"cUrl",label:"cUrl",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=UserMetaData' \\\n--data-urlencode 'where=userName:eq:ExampleString'\n"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},19365:(e,n,s)=>{s.d(n,{A:()=>c});s(96540);var t=s(34164);const r={tabItem:"tabItem_Ymn6"};var a=s(74848);function c(e){let{children:n,hidden:s,className:c}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,c),hidden:s,children:n})}},11470:(e,n,s)=>{s.d(n,{A:()=>A});var t=s(96540),r=s(34164),a=s(23104),c=s(56347),d=s(205),i=s(57485),l=s(31682),o=s(70679);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:r}}=e;return{value:n,label:s,attributes:t,default:r}}))}(s);return function(e){const n=(0,l.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function m(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:s}=e;const r=(0,c.W6)(),a=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,i.aZ)(a),(0,t.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function j(e){const{defaultValue:n,queryString:s=!1,groupId:r}=e,a=u(e),[c,i]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a}))),[l,h]=x({queryString:s,groupId:r}),[j,p]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,o.Dv)(s);return[r,(0,t.useCallback)((e=>{s&&a.set(e)}),[s,a])]}({groupId:r}),g=(()=>{const e=l??j;return m({value:e,tabValues:a})?e:null})();(0,d.A)((()=>{g&&i(g)}),[g]);return{selectedValue:c,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),h(e),p(e)}),[h,p,a]),tabValues:a}}var p=s(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=s(74848);function f(e){let{className:n,block:s,selectedValue:t,selectValue:c,tabValues:d}=e;const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),o=e=>{const n=e.currentTarget,s=i.indexOf(n),r=d[s].value;r!==t&&(l(n),c(r))},h=e=>{let n=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const s=i.indexOf(e.currentTarget)+1;n=i[s]??i[0];break}case"ArrowLeft":{const s=i.indexOf(e.currentTarget)-1;n=i[s]??i[i.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":s},n),children:d.map((e=>{let{value:n,label:s,attributes:a}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>i.push(e),onKeyDown:h,onClick:o,...a,className:(0,r.A)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":t===n}),children:s??n},n)}))})}function T(e){let{lazy:n,children:s,selectedValue:r}=e;const a=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function E(e){const n=j(e);return(0,y.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,y.jsx)(f,{...n,...e}),(0,y.jsx)(T,{...n,...e})]})}function A(e){const n=(0,p.A)();return(0,y.jsx)(E,{...e,children:h(e.children)},String(n))}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var t=s(96540);const r={},a=t.createContext(r);function c(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);