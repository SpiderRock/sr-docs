"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[63897],{3612:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var r=s(74848),a=s(28453),t=s(11470),l=s(19365);const i={title:"SpanRiskCalculator"},c="Schema: SpanRiskCalculator (ID: 5060)",d={id:"MessageSchemas/Schema/Topics/srse-calculators/SpanRiskCalculator",title:"SpanRiskCalculator",description:"This table allows custom span risk calculations based on either user or SR supplied input values.",source:"@site/versioned_docs/version-8.4.08.4/MessageSchemas/Schema/Topics/5030-srse-calculators/SpanRiskCalculator.md",sourceDirName:"MessageSchemas/Schema/Topics/5030-srse-calculators",slug:"/MessageSchemas/Schema/Topics/srse-calculators/SpanRiskCalculator",permalink:"/docs/8.4.08.4/MessageSchemas/Schema/Topics/srse-calculators/SpanRiskCalculator",draft:!1,unlisted:!1,tags:[],version:"8.4.08.4",frontMatter:{title:"SpanRiskCalculator"},sidebar:"messageSchemasSidebar",previous:{title:"OptionTheoVol",permalink:"/docs/8.4.08.4/MessageSchemas/Schema/Topics/srse-calculators/OptionTheoVol"},next:{title:"VolTimeCalculator",permalink:"/docs/8.4.08.4/MessageSchemas/Schema/Topics/srse-calculators/VolTimeCalculator"}},o={},p=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"schema-spanriskcalculator-id-5060",children:["Schema: SpanRiskCalculator ",(0,r.jsx)("span",{className:"small-text",children:"(ID: 5060)"})]}),"\n",(0,r.jsx)(n.p,{children:"This table allows custom span risk calculations based on either user or SR supplied input values."}),"\n",(0,r.jsx)(n.h3,{id:"metadata",children:"METADATA"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Attribute"}),(0,r.jsx)(n.th,{children:"Value"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Topic"}),(0,r.jsx)(n.td,{children:"5030-srse-calculators"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"MLink Token"}),(0,r.jsx)(n.td,{children:"SystemData"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SRSE Product"}),(0,r.jsx)(n.td,{children:"SRAnalytics"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The symbol ",(0,r.jsx)(n.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"body",children:"BODY"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"#"}),(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Comment"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"10="}),(0,r.jsx)(n.td,{children:"secKey"}),(0,r.jsx)(n.td,{children:"OptionKey"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"11="}),(0,r.jsx)(n.td,{children:"secType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"12="}),(0,r.jsx)(n.td,{children:"userName"}),(0,r.jsx)(n.td,{children:"string(24)"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"100"}),(0,r.jsx)(n.td,{children:"vol"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"volatility"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"103"}),(0,r.jsx)(n.td,{children:"volSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"106"}),(0,r.jsx)(n.td,{children:"uPrc"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"underlying price"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"109"}),(0,r.jsx)(n.td,{children:"uPrcSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"112"}),(0,r.jsx)(n.td,{children:"years"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"years-to-expiration (default uses SR volatility time value)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"115"}),(0,r.jsx)(n.td,{children:"yearsSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"118"}),(0,r.jsx)(n.td,{children:"sdiv"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"continuous stock dividend using for pricing"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"121"}),(0,r.jsx)(n.td,{children:"sdivSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"124"}),(0,r.jsx)(n.td,{children:"rate"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"discount rate used for pricing"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"127"}),(0,r.jsx)(n.td,{children:"rateSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"130"}),(0,r.jsx)(n.td,{children:"exType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/ExerciseType",children:"enum : ExerciseType"})}),(0,r.jsx)(n.td,{children:"exercise type of the option (American or European)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"133"}),(0,r.jsx)(n.td,{children:"exTypeSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"136"}),(0,r.jsx)(n.td,{children:"effStrike"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"effective strike used for pricing (default is okey.Strike)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"139"}),(0,r.jsx)(n.td,{children:"effStrikeSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"142"}),(0,r.jsx)(n.td,{children:"symRatio"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"underlying symbol ratio (for non-standard options); discrete dividend will be scaled by this factor"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"145"}),(0,r.jsx)(n.td,{children:"symRatioSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"148"}),(0,r.jsx)(n.td,{children:"divString"}),(0,r.jsx)(n.td,{children:"text1"}),(0,r.jsxs)(n.td,{children:["discrete dividend string  [ yearsToExpiry, years1",":amt1",", years2",":amt2",", ...] or [ -1, date1",":amt1",", date2",":amt2",", ... ]"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"151"}),(0,r.jsx)(n.td,{children:"divSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"154"}),(0,r.jsx)(n.td,{children:"modelType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/CalcModelType",children:"enum : CalcModelType"})}),(0,r.jsx)(n.td,{children:"LogNormalExact, LogNormalApprox, NormalExact, NormalApprox"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"157"}),(0,r.jsx)(n.td,{children:"modelTypeSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"160"}),(0,r.jsx)(n.td,{children:"calcPrecision"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/CalcPrecision",children:"enum : CalcPrecision"})}),(0,r.jsx)(n.td,{children:"numerical precision (# of steps) if a numerical method is used;  [more steps will be slower to calculate]"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"163"}),(0,r.jsx)(n.td,{children:"pointValue"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"$ value of a point in the underlying product"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"166"}),(0,r.jsx)(n.td,{children:"pointValueSrc"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/FieldSrc",children:"enum : FieldSrc"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"169"}),(0,r.jsx)(n.td,{children:"prcSpanUp"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"172"}),(0,r.jsx)(n.td,{children:"prcSpanDn"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"175"}),(0,r.jsx)(n.td,{children:"prcSpanType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/PrcSpanType",children:"enum : PrcSpanType"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"178"}),(0,r.jsx)(n.td,{children:"volSpan"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"181"}),(0,r.jsx)(n.td,{children:"volSpanType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/VolSpanType",children:"enum : VolSpanType"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"184"}),(0,r.jsx)(n.td,{children:"spanCalcType"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/SpanCalcType",children:"enum : SpanCalcType"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"187"}),(0,r.jsx)(n.td,{children:"hedgeDeltaNeutral"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,r.jsx)(n.td,{children:"all option will be assumed hedged delta neutral, stock and futures will not have slide values"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"190"}),(0,r.jsx)(n.td,{children:"adjYears"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"year adjustment: effYears = years + adjYears (-1 = no limit)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"193"}),(0,r.jsx)(n.td,{children:"maxYears"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"upper bound for years: effYears = MIN(maxYears, effYears) (-1 = no limit)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"196"}),(0,r.jsx)(n.td,{children:"span01"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span1: uPrc=unch, vol=up"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"199"}),(0,r.jsx)(n.td,{children:"span02"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span2: uPrc=unch, vol=down"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"202"}),(0,r.jsx)(n.td,{children:"span03"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span3: uPrc=+33%, vol=up"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"205"}),(0,r.jsx)(n.td,{children:"span04"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span4: uPrc=+33%, vol=dn"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"208"}),(0,r.jsx)(n.td,{children:"span05"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span5: uPrc=-33%, vol=up"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"211"}),(0,r.jsx)(n.td,{children:"span06"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span6: uPrc=-33%, vol=down"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"214"}),(0,r.jsx)(n.td,{children:"span07"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span7: uPrc=+67%, vol=up"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"217"}),(0,r.jsx)(n.td,{children:"span08"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span8: uPrc=+67%, vol=down"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"220"}),(0,r.jsx)(n.td,{children:"span09"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span9: uPrc=-67%, vol=up"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"223"}),(0,r.jsx)(n.td,{children:"span10"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span10: uPrc=-67%, vol=down"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"226"}),(0,r.jsx)(n.td,{children:"span11"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span11: uPrc=+100%, vol=up"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"229"}),(0,r.jsx)(n.td,{children:"span12"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span12: uPrc=+100%, vol=down"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"232"}),(0,r.jsx)(n.td,{children:"span13"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span13: uPrc=-100%, vol=up"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"235"}),(0,r.jsx)(n.td,{children:"span14"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span14: uPrc=-100%, vol=down"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"238"}),(0,r.jsx)(n.td,{children:"span15"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span15: uPrc=+300%; price slide * 0.33"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"241"}),(0,r.jsx)(n.td,{children:"span16"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"span16: uPrc=-300%, price slide * 0.33"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"244"}),(0,r.jsx)(n.td,{children:"error"}),(0,r.jsx)(n.td,{children:"string(32)"}),(0,r.jsx)(n.td,{children:"calculation error"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"247"}),(0,r.jsx)(n.td,{children:"timestamp"}),(0,r.jsx)(n.td,{children:"DateTime"}),(0,r.jsx)(n.td,{})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,r.jsxs)(t.A,{children:[(0,r.jsx)(l.A,{value:"Python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpanRiskCalculator'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n#Required Parameters\n\"apiKey\": API_KEY,\n\"cmd\": 'getschema',\n\"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,r.jsx)(l.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpanRiskCalculator'\n\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,r.jsxs)(t.A,{children:[(0,r.jsx)(l.A,{value:"Python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpanRiskCalculator\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'vol|volSrc|uPrc|uPrcSrc|years|yearsSrc|sdiv|sdivSrc|rate|rateSrc|exType|exTypeSrc|effStrike|effStrikeSrc|symRatio|symRatioSrc|divString|divSrc|modelType|modelTypeSrc|calcPrecision|pointValue|pointValueSrc|prcSpanUp|prcSpanDn|prcSpanType|volSpan|volSpanType|spanCalcType|hedgeDeltaNeutral|adjYears|maxYears|span01|span02|span03|span04|span05|span06|span07|span08|span09|span10|span11|span12|span13|span14|span15|span16|error|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'userName:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(l.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpanRiskCalculator' \\\n--data-urlencode 'view=vol|volSrc|uPrc|uPrcSrc|years|yearsSrc|sdiv|sdivSrc|rate|rateSrc|exType|exTypeSrc|effStrike|effStrikeSrc|symRatio|symRatioSrc|divString|divSrc|modelType|modelTypeSrc|calcPrecision|pointValue|pointValueSrc|prcSpanUp|prcSpanDn|prcSpanType|volSpan|volSpanType|spanCalcType|hedgeDeltaNeutral|adjYears|maxYears|span01|span02|span03|span04|span05|span06|span07|span08|span09|span10|span11|span12|span13|span14|span15|span16|error|timestamp' \\\n--data-urlencode 'where=userName:eq:ExampleString'\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,r.jsxs)(t.A,{children:[(0,r.jsx)(l.A,{value:"Python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpanRiskCalculator\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'vol|volSrc|uPrc|uPrcSrc|years|yearsSrc|sdiv|sdivSrc|rate|rateSrc|exType|exTypeSrc|effStrike|effStrikeSrc|symRatio|symRatioSrc|divString|divSrc|modelType|modelTypeSrc|calcPrecision|pointValue|pointValueSrc|prcSpanUp|prcSpanDn|prcSpanType|volSpan|volSpanType|spanCalcType|hedgeDeltaNeutral|adjYears|maxYears|span01|span02|span03|span04|span05|span06|span07|span08|span09|span10|span11|span12|span13|span14|span15|span16|error|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'userName:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'vol:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(l.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpanRiskCalculator' \\\n--data-urlencode 'view=vol|volSrc|uPrc|uPrcSrc|years|yearsSrc|sdiv|sdivSrc|rate|rateSrc|exType|exTypeSrc|effStrike|effStrikeSrc|symRatio|symRatioSrc|divString|divSrc|modelType|modelTypeSrc|calcPrecision|pointValue|pointValueSrc|prcSpanUp|prcSpanDn|prcSpanType|volSpan|volSpanType|spanCalcType|hedgeDeltaNeutral|adjYears|maxYears|span01|span02|span03|span04|span05|span06|span07|span08|span09|span10|span11|span12|span13|span14|span15|span16|error|timestamp' \\\n--data-urlencode 'where=userName:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=vol:ASC'\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,r.jsxs)(t.A,{children:[(0,r.jsx)(l.A,{value:"Python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpanRiskCalculator\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'vol|volSrc|uPrc|uPrcSrc|years|yearsSrc|sdiv|sdivSrc|rate|rateSrc|exType|exTypeSrc|effStrike|effStrikeSrc|symRatio|symRatioSrc|divString|divSrc|modelType|modelTypeSrc|calcPrecision|pointValue|pointValueSrc|prcSpanUp|prcSpanDn|prcSpanType|volSpan|volSpanType|spanCalcType|hedgeDeltaNeutral|adjYears|maxYears|span01|span02|span03|span04|span05|span06|span07|span08|span09|span10|span11|span12|span13|span14|span15|span16|error|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'volSrc|uPrcSrc|yearsSrc|sdivSrc|rateSrc|exType|exTypeSrc|effStrikeSrc|symRatioSrc|divSrc|modelType|modelTypeSrc|calcPrecision|pointValueSrc|prcSpanType|volSpanType|spanCalcType|hedgeDeltaNeutral\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'userName:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getaggregate\',\n"msgType": MSG_TYPE,\n"measure": MEASURE,\n"group": GROUP,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(l.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpanRiskCalculator' \\\n--data-urlencode 'measure=vol|volSrc|uPrc|uPrcSrc|years|yearsSrc|sdiv|sdivSrc|rate|rateSrc|exType|exTypeSrc|effStrike|effStrikeSrc|symRatio|symRatioSrc|divString|divSrc|modelType|modelTypeSrc|calcPrecision|pointValue|pointValueSrc|prcSpanUp|prcSpanDn|prcSpanType|volSpan|volSpanType|spanCalcType|hedgeDeltaNeutral|adjYears|maxYears|span01|span02|span03|span04|span05|span06|span07|span08|span09|span10|span11|span12|span13|span14|span15|span16|error|timestamp' \\\n--data-urlencode 'group=volSrc|uPrcSrc|yearsSrc|sdivSrc|rateSrc|exType|exTypeSrc|effStrikeSrc|symRatioSrc|divSrc|modelType|modelTypeSrc|calcPrecision|pointValueSrc|prcSpanType|volSpanType|spanCalcType|hedgeDeltaNeutral' \\\n--data-urlencode 'where=userName:eq:ExampleString'\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,r.jsxs)(t.A,{children:[(0,r.jsx)(l.A,{value:"Python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpanRiskCalculator\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'userName:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(l.A,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpanRiskCalculator' \\\n--data-urlencode 'where=userName:eq:ExampleString'\n"})})})]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},19365:(e,n,s)=>{s.d(n,{A:()=>l});s(96540);var r=s(34164);const a={tabItem:"tabItem_Ymn6"};var t=s(74848);function l(e){let{children:n,hidden:s,className:l}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,l),hidden:s,children:n})}},11470:(e,n,s)=>{s.d(n,{A:()=>X});var r=s(96540),a=s(34164),t=s(23104),l=s(56347),i=s(205),c=s(57485),d=s(31682),o=s(70679);function p(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:s}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:s,attributes:r,default:a}}=e;return{value:n,label:s,attributes:r,default:a}}))}(s);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function u(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:s}=e;const a=(0,l.W6)(),t=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,c.aZ)(t),(0,r.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(a.location.search);n.set(t,e),a.replace({...a.location,search:n.toString()})}),[t,a])]}function j(e){const{defaultValue:n,queryString:s=!1,groupId:a}=e,t=h(e),[l,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=s.find((e=>e.default))??s[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:t}))),[d,p]=x({queryString:s,groupId:a}),[j,m]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,t]=(0,o.Dv)(s);return[a,(0,r.useCallback)((e=>{s&&t.set(e)}),[s,t])]}({groupId:a}),S=(()=>{const e=d??j;return u({value:e,tabValues:t})?e:null})();(0,i.A)((()=>{S&&c(S)}),[S]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);c(e),p(e),m(e)}),[p,m,t]),tabValues:t}}var m=s(92303);const S={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=s(74848);function v(e){let{className:n,block:s,selectedValue:r,selectValue:l,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,t.a_)(),o=e=>{const n=e.currentTarget,s=c.indexOf(n),a=i[s].value;a!==r&&(d(n),l(a))},p=e=>{let n=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;n=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;n=c[s]??c[c.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":s},n),children:i.map((e=>{let{value:n,label:s,attributes:t}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>c.push(e),onKeyDown:p,onClick:o,...t,className:(0,a.A)("tabs__item",S.tabItem,t?.className,{"tabs__item--active":r===n}),children:s??n},n)}))})}function g(e){let{lazy:n,children:s,selectedValue:a}=e;const t=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function f(e){const n=j(e);return(0,y.jsxs)("div",{className:(0,a.A)("tabs-container",S.tabList),children:[(0,y.jsx)(v,{...n,...e}),(0,y.jsx)(g,{...n,...e})]})}function X(e){const n=(0,m.A)();return(0,y.jsx)(f,{...e,children:p(e.children)},String(n))}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>i});var r=s(96540);const a={},t=r.createContext(a);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);