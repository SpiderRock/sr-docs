"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["2110"],{58224:function(e,t,s){s.r(t),s.d(t,{default:()=>m,frontMatter:()=>c,metadata:()=>n,assets:()=>o,toc:()=>h,contentTitle:()=>d});var n=JSON.parse('{"id":"MessageSchemas/Schema/Topics/market-data-stock/StockBookQuote","title":"StockBookQuote","description":"This table contains live equity quote records for all CQS/UQDF securities as well as US OTC equity securities, SpiderRock synthetic markets, and a number of major indexes.  Each record contains up to two price levels and represents a live snapshot of the book for a specific market.","source":"@site/docs/MessageSchemas/Schema/Topics/2990-market-data-stock/StockBookQuote.md","sourceDirName":"MessageSchemas/Schema/Topics/2990-market-data-stock","slug":"/MessageSchemas/Schema/Topics/market-data-stock/StockBookQuote","permalink":"/docs/next/MessageSchemas/Schema/Topics/market-data-stock/StockBookQuote","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"StockBookQuote"},"sidebar":"messageSchemasSidebar","previous":{"title":"StockAuctionSummary","permalink":"/docs/next/MessageSchemas/Schema/Topics/market-data-stock/StockAuctionSummary"},"next":{"title":"StockExchImbalance","permalink":"/docs/next/MessageSchemas/Schema/Topics/market-data-stock/StockExchImbalance"}}'),a=s("52676"),r=s("91503"),i=s("71386"),l=s("9641");let c={title:"StockBookQuote"},d="Schema: StockBookQuote (ID: 3000)",o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){let t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsxs)(t.h1,{id:"schema-stockbookquote-id-3000",children:["Schema: StockBookQuote ",(0,a.jsx)("span",{className:"small-text",children:"(ID: 3000)"})]})}),"\n",(0,a.jsx)(t.p,{children:"This table contains live equity quote records for all CQS/UQDF securities as well as US OTC equity securities, SpiderRock synthetic markets, and a number of major indexes.  Each record contains up to two price levels and represents a live snapshot of the book for a specific market."}),"\n",(0,a.jsx)(t.h3,{id:"metadata",children:"METADATA"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Attribute"}),(0,a.jsx)(t.th,{children:"Value"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Topic"}),(0,a.jsx)(t.td,{children:"2990-market-data-stock"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"MLink Token"}),(0,a.jsx)(t.td,{children:"EqtMktData"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"SRSE Product"}),(0,a.jsx)(t.td,{children:"SRLive"})]})]})]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Note:"})," The symbol ",(0,a.jsx)(t.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"body",children:"BODY"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"#"}),(0,a.jsx)(t.th,{children:"Field"}),(0,a.jsx)(t.th,{children:"Type"}),(0,a.jsx)(t.th,{children:"Comment"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"10="}),(0,a.jsx)(t.td,{children:"ticker"}),(0,a.jsx)(t.td,{children:"TickerKey"}),(0,a.jsx)(t.td,{})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"100"}),(0,a.jsx)(t.td,{children:"updateType"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"../../../Enums/UpdateType",children:"enum : UpdateType"})}),(0,a.jsx)(t.td,{})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"103"}),(0,a.jsx)(t.td,{children:"marketStatus"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"../../../Enums/MarketStatus",children:"enum : MarketStatus"})}),(0,a.jsx)(t.td,{children:"market status (open, halted, etc)"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"106"}),(0,a.jsx)(t.td,{children:"bidPrice1"}),(0,a.jsx)(t.td,{children:"float"}),(0,a.jsx)(t.td,{children:"bid price for best price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"109"}),(0,a.jsx)(t.td,{children:"bidSize1"}),(0,a.jsx)(t.td,{children:"int"}),(0,a.jsx)(t.td,{children:"bid size for best price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"112"}),(0,a.jsx)(t.td,{children:"bidExch1"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"../../../Enums/StkExch",children:"enum : StkExch"})}),(0,a.jsx)(t.td,{})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"115"}),(0,a.jsx)(t.td,{children:"bidMask1"}),(0,a.jsx)(t.td,{children:"uint"}),(0,a.jsx)(t.td,{children:"bid exchange bit mask for best bid price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"118"}),(0,a.jsx)(t.td,{children:"askPrice1"}),(0,a.jsx)(t.td,{children:"float"}),(0,a.jsx)(t.td,{children:"ask price for best price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"121"}),(0,a.jsx)(t.td,{children:"askSize1"}),(0,a.jsx)(t.td,{children:"int"}),(0,a.jsx)(t.td,{children:"ask size for best price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"124"}),(0,a.jsx)(t.td,{children:"askExch1"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"../../../Enums/StkExch",children:"enum : StkExch"})}),(0,a.jsx)(t.td,{children:"exchange"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"127"}),(0,a.jsx)(t.td,{children:"askMask1"}),(0,a.jsx)(t.td,{children:"uint"}),(0,a.jsx)(t.td,{children:"ask exchange bit mask for best ask price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"130"}),(0,a.jsx)(t.td,{children:"bidPrice2"}),(0,a.jsx)(t.td,{children:"float"}),(0,a.jsx)(t.td,{children:"bid price for next best price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"133"}),(0,a.jsx)(t.td,{children:"bidSize2"}),(0,a.jsx)(t.td,{children:"int"}),(0,a.jsx)(t.td,{children:"bid size for next best price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"136"}),(0,a.jsx)(t.td,{children:"bidExch2"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"../../../Enums/StkExch",children:"enum : StkExch"})}),(0,a.jsx)(t.td,{children:"exchange"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"139"}),(0,a.jsx)(t.td,{children:"bidMask2"}),(0,a.jsx)(t.td,{children:"uint"}),(0,a.jsx)(t.td,{children:"bid exchange bit mask for next best bid price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"142"}),(0,a.jsx)(t.td,{children:"askPrice2"}),(0,a.jsx)(t.td,{children:"float"}),(0,a.jsx)(t.td,{children:"ask price for next best price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"145"}),(0,a.jsx)(t.td,{children:"askSize2"}),(0,a.jsx)(t.td,{children:"int"}),(0,a.jsx)(t.td,{children:"ask size for next best price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"148"}),(0,a.jsx)(t.td,{children:"askExch2"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"../../../Enums/StkExch",children:"enum : StkExch"})}),(0,a.jsx)(t.td,{children:"exchange"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"151"}),(0,a.jsx)(t.td,{children:"askMask2"}),(0,a.jsx)(t.td,{children:"uint"}),(0,a.jsx)(t.td,{children:"ask exchange bit mask for next best ask price level"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"154"}),(0,a.jsx)(t.td,{children:"haltMask"}),(0,a.jsx)(t.td,{children:"uint"}),(0,a.jsx)(t.td,{children:"bit mask of halted exchanges"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"157"}),(0,a.jsx)(t.td,{children:"srcTimestamp"}),(0,a.jsx)(t.td,{children:"long"}),(0,a.jsx)(t.td,{children:"source high precision timestamp (if available)"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"160"}),(0,a.jsx)(t.td,{children:"netTimestamp"}),(0,a.jsx)(t.td,{children:"long"}),(0,a.jsx)(t.td,{children:"inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock"})]})]})]}),"\n",(0,a.jsx)(t.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'StockBookQuote'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=StockBookQuote'\n\n"})})})]}),"\n",(0,a.jsx)(t.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'StockBookQuote\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'updateType|marketStatus|bidPrice1|bidSize1|bidExch1|bidMask1|askPrice1|askSize1|askExch1|askMask1|bidPrice2|bidSize2|bidExch2|bidMask2|askPrice2|askSize2|askExch2|askMask2|haltMask|srcTimestamp|netTimestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=StockBookQuote' \\\n--data-urlencode 'view=updateType|marketStatus|bidPrice1|bidSize1|bidExch1|bidMask1|askPrice1|askSize1|askExch1|askMask1|bidPrice2|bidSize2|bidExch2|bidMask2|askPrice2|askSize2|askExch2|askMask2|haltMask|srcTimestamp|netTimestamp' \\\n--data-urlencode 'where='\n"})})})]}),"\n",(0,a.jsx)(t.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'StockBookQuote\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'updateType|marketStatus|bidPrice1|bidSize1|bidExch1|bidMask1|askPrice1|askSize1|askExch1|askMask1|bidPrice2|bidSize2|bidExch2|bidMask2|askPrice2|askSize2|askExch2|askMask2|haltMask|srcTimestamp|netTimestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'updateType:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=StockBookQuote' \\\n--data-urlencode 'view=updateType|marketStatus|bidPrice1|bidSize1|bidExch1|bidMask1|askPrice1|askSize1|askExch1|askMask1|bidPrice2|bidSize2|bidExch2|bidMask2|askPrice2|askSize2|askExch2|askMask2|haltMask|srcTimestamp|netTimestamp' \\\n--data-urlencode 'where=' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=updateType:ASC'\n"})})})]}),"\n",(0,a.jsx)(t.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'StockBookQuote\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'updateType|marketStatus|bidPrice1|bidSize1|bidExch1|bidMask1|askPrice1|askSize1|askExch1|askMask1|bidPrice2|bidSize2|bidExch2|bidMask2|askPrice2|askSize2|askExch2|askMask2|haltMask|srcTimestamp|netTimestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'updateType|marketStatus|bidExch1|askExch1|bidExch2|askExch2\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=StockBookQuote' \\\n--data-urlencode 'measure=updateType|marketStatus|bidPrice1|bidSize1|bidExch1|bidMask1|askPrice1|askSize1|askExch1|askMask1|bidPrice2|bidSize2|bidExch2|bidMask2|askPrice2|askSize2|askExch2|askMask2|haltMask|srcTimestamp|netTimestamp' \\\n--data-urlencode 'group=updateType|marketStatus|bidExch1|askExch1|bidExch2|askExch2' \\\n--data-urlencode 'where='\n"})})})]}),"\n",(0,a.jsx)(t.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(l.Z,{value:"Python",label:"Python",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'StockBookQuote\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,a.jsx)(l.Z,{value:"cUrl",label:"cUrl",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=StockBookQuote' \\\n--data-urlencode 'where='\n"})})})]})]})}function m(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},9641:function(e,t,s){s.d(t,{Z:()=>r});var n=s("52676");s("75271");var a=s("54461");function r(e){let{children:t,hidden:s,className:r}=e;return(0,n.jsx)("div",{role:"tabpanel",className:(0,a.Z)("tabItem_SSzl",r),hidden:s,children:t})}},71386:function(e,t,s){s.d(t,{Z:()=>b});var n=s("52676"),a=s("75271"),r=s("54461"),i=s("52289"),l=s("3225"),c=s("42834"),d=s("40578"),o=s("35834"),h=s("79616");function u(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||a.isValidElement(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function m(e){let{value:t,tabValues:s}=e;return s.some(e=>e.value===t)}var p=s("44537");function x(e){let{className:t,block:s,selectedValue:a,selectValue:l,tabValues:c}=e,d=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.o5)(),h=e=>{let t=e.currentTarget,s=c[d.indexOf(t)].value;s!==a&&(o(t),l(s))},u=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let s=d.indexOf(e.currentTarget)+1;t=d[s]??d[0];break}case"ArrowLeft":{let s=d.indexOf(e.currentTarget)-1;t=d[s]??d[d.length-1]}}t?.focus()};return(0,n.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":s},t),children:c.map(e=>{let{value:t,label:s,attributes:i}=e;return(0,n.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>d.push(e),onKeyDown:u,onClick:h,...i,className:(0,r.Z)("tabs__item","tabItem_aitt",i?.className,{"tabs__item--active":a===t}),children:s??t},t)})})}function k(e){let{lazy:t,children:s,selectedValue:i}=e,l=(Array.isArray(s)?s:[s]).filter(Boolean);if(t){let e=l.find(e=>e.props.value===i);return e?(0,a.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,n.jsx)("div",{className:"margin-top--md",children:l.map((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==i}))})}function j(e){let t=function(e){let{defaultValue:t,queryString:s=!1,groupId:n}=e,r=function(e){let{values:t,children:s}=e;return(0,a.useMemo)(()=>{let e=t??u(s).map(e=>{let{props:{value:t,label:s,attributes:n,default:a}}=e;return{value:t,label:s,attributes:n,default:a}});return!function(e){let t=(0,o.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,s])}(e),[i,p]=(0,a.useState)(()=>(function(e){let{defaultValue:t,tabValues:s}=e;if(0===s.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:s}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${s.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}let n=s.find(e=>e.default)??s[0];if(!n)throw Error("Unexpected error: 0 tabValues");return n.value})({defaultValue:t,tabValues:r})),[x,k]=function(e){let{queryString:t=!1,groupId:s}=e,n=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:s}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!s)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:t,groupId:s});return[(0,d._X)(r),(0,a.useCallback)(e=>{if(!r)return;let t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})},[r,n])]}({queryString:s,groupId:n}),[j,b]=function(e){let{groupId:t}=e,s=t?`docusaurus.tab.${t}`:null,[n,r]=(0,h.Nk)(s);return[n,(0,a.useCallback)(e=>{s&&r.set(e)},[s,r])]}({groupId:n}),g=(()=>{let e=x??j;return m({value:e,tabValues:r})?e:null})();return(0,c.Z)(()=>{g&&p(g)},[g]),{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!m({value:e,tabValues:r}))throw Error(`Can't select invalid tab value=${e}`);p(e),k(e),b(e)},[k,b,r]),tabValues:r}}(e);return(0,n.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList_ArS0"),children:[(0,n.jsx)(x,{...t,...e}),(0,n.jsx)(k,{...t,...e})]})}function b(e){let t=(0,p.Z)();return(0,n.jsx)(j,{...e,children:u(e.children)},String(t))}},91503:function(e,t,s){s.d(t,{Z:function(){return l},a:function(){return i}});var n=s(75271);let a={},r=n.createContext(a);function i(e){let t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);