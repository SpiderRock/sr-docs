"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["14880"],{73431:function(e,r,n){n.r(r),n.d(r,{default:()=>l,frontMatter:()=>a,metadata:()=>i,assets:()=>o,toc:()=>c,contentTitle:()=>d});var i=JSON.parse('{"id":"Documentation/PlatformFeatures/OrderManagement/COB","title":"Complex Order Book (COB)","description":"SpiderRock\'s Complex Order Book (COB) framework allows for consistent handling, normalization, and aggregation of exchange-defined spreads across multiple options exchanges. It provides the foundation for building our internal spread book adn delivering real-time normalized market data.","source":"@site/docs/Documentation/PlatformFeatures/OrderManagement/COB.md","sourceDirName":"Documentation/PlatformFeatures/OrderManagement","slug":"/Documentation/PlatformFeatures/OrderManagement/COB","permalink":"/docs/next/Documentation/PlatformFeatures/OrderManagement/COB","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Complex Order Book (COB)","sidebar_position":6},"sidebar":"documentationSidebar","previous":{"title":"TCA Metrics","permalink":"/docs/next/Documentation/PlatformFeatures/OrderManagement/TCAMetrics"},"next":{"title":"Risk Management System","permalink":"/docs/next/Documentation/PlatformFeatures/RiskManagement/"}}'),s=n("52676"),t=n("91503");let a={title:"Complex Order Book (COB)",sidebar_position:6},d=void 0,o={},c=[{value:"Leg Normalization",id:"leg-normalization",level:2},{value:"<em>SpreadExchDefinition</em>",id:"spreadexchdefinition",level:2},{value:"<em>SpreadExchOrder</em> and <em>SpreadPrint</em>",id:"spreadexchorder-and-spreadprint",level:2},{value:"<em>SpreadDefinition</em>",id:"spreaddefinition",level:2},{value:"<em>SpreadBookQuote</em>",id:"spreadbookquote",level:2}];function h(e){let r={a:"a",em:"em",h2:"h2",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:"SpiderRock's Complex Order Book (COB) framework allows for consistent handling, normalization, and aggregation of exchange-defined spreads across multiple options exchanges. It provides the foundation for building our internal spread book adn delivering real-time normalized market data."}),"\n",(0,s.jsx)(r.p,{children:"At the core of this framework, there are four primary message types:"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Message"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/product-definition/SpreadExchDefinition",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadExchDefinition"})})})}),(0,s.jsx)(r.td,{children:"The exchange-specific definition of a spread."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/market-data-spreads/SpreadExchOrder",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadExchOrder"})})})," / ",(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/market-data-spreads/SpreadPrint",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadPrint"})})})]}),(0,s.jsx)(r.td,{children:"The real-time market data for exchange-specific spreads."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/product-definition/SpreadDefinition",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadDefinition"})})})}),(0,s.jsx)(r.td,{children:"The aggregated, normalized representation of a spread across exchanges."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/market-data-spreads/SpreadBookQuote",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadBookQuote"})})})}),(0,s.jsx)(r.td,{children:"The SpiderRock spread book, derived from exchange orders and updated continuously."})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"leg-normalization",children:"Leg Normalization"}),"\n",(0,s.jsxs)(r.p,{children:["A critical step in handling spreads is normalization. Exchanges often provide legs in different orders or with reversed buy-sell orientations, which would make comparisons inconsistent. After sorting the legs, our system enforces a standard: The first leg of every spread is always a buy. If the exchange's definition does not conform, we will flip the legs and the ",(0,s.jsx)(r.em,{children:"flipSide"})," attribute records the inversion. This guarantees that spreads, regardless of their source, can be meaningfully compared."]}),"\n",(0,s.jsxs)(r.p,{children:["For further explanation, refer to ",(0,s.jsx)(r.a,{href:"https://docs.spiderrockconnect.com/docs/next/Documentation/PlatformFeatures/OrderManagement/#spread-leg-normalization",children:(0,s.jsx)(r.strong,{children:"Spread Leg Normalization"})}),"."]}),"\n",(0,s.jsx)(r.h2,{id:"spreadexchdefinition",children:(0,s.jsx)(r.em,{children:"SpreadExchDefinition"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/product-definition/SpreadExchDefinition",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadExchDefinition"})})})," message provides the base layer of information. Each spread is uniquely identified through a composite key:"]}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsxs)("b",{children:["Exchange (",(0,s.jsx)("i",{children:"exch"}),")"]})," - The originating options exchange."]}),(0,s.jsxs)("li",{children:[(0,s.jsxs)("b",{children:["Exchange Spread ID (",(0,s.jsx)("i",{children:"exchSprID"}),")"]})," - The unique identifier assigned to that exchange."]})]}),"\n",(0,s.jsxs)(r.p,{children:["Alongside this key, ",(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/product-definition/SpreadExchDefinition",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadExchDefinition"})})})," contains the normalized leg structure, which acts as the anchor for all exchange-specific spread activity."]}),"\n",(0,s.jsxs)(r.h2,{id:"spreadexchorder-and-spreadprint",children:[(0,s.jsx)(r.em,{children:"SpreadExchOrder"})," and ",(0,s.jsx)(r.em,{children:"SpreadPrint"})]}),"\n",(0,s.jsx)(r.p,{children:"Once a spread is defined, real-time trading activity references it:"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("a",{href:"https://docs.spiderrockconnect.com/docs/next/MessageSchemas/Schema/Topics/market-data-spreads/SpreadExchOrder/",children:(0,s.jsx)("b",{children:(0,s.jsx)("i",{children:"SpreadExchOrder"})})})," represents live, public spread orders from an exchange, containing details such as price, size, and order type. While they do not include the full legs list directly, they do carry the ",(0,s.jsx)("i",{children:"exch"}),", ",(0,s.jsx)("i",{children:"exchSprID"}),", and ",(0,s.jsx)("i",{children:"flipSide"})," which allows a corresponding ",(0,s.jsx)("a",{href:"https://docs.spiderrockconnect.com/docs/next/MessageSchemas/Schema/Topics/product-definition/SpreadExchDefinition/",children:(0,s.jsx)("b",{children:(0,s.jsx)("i",{children:"SpreadExchDefinition"})})})," to be referenced for complete leg details."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("a",{href:"https://docs.spiderrockconnect.com/docs/next/MessageSchemas/Schema/Topics/market-data-spreads/SpreadExchPrint/",children:(0,s.jsx)("b",{children:(0,s.jsx)("i",{children:"SpreadExchPrint"})})})," records executed trades for those spreads and contains the legs in the message."]})]}),"\n",(0,s.jsx)(r.h2,{id:"spreaddefinition",children:(0,s.jsx)(r.em,{children:"SpreadDefinition"})}),"\n",(0,s.jsxs)(r.p,{children:["While ",(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/product-definition/SpreadExchDefinition",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadExchDefinition"})})})," captures exchange-specific spreads, ",(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/product-definition/SpreadDefinition",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadDefinition"})})})," consolidates equivalent spreads across venues. Spreads with identical and normalized leg structures are grouped together under a single SpiderRock identifier, the ",(0,s.jsx)(r.em,{children:"SRspreadID"}),". This allows the system to:"]}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Track where a spread is being traded across multiple exchanges."}),(0,s.jsx)("li",{children:"Provide a unified reference point in SpiderRock's internal spread book."})]}),"\n",(0,s.jsx)(r.h2,{id:"spreadbookquote",children:(0,s.jsx)(r.em,{children:"SpreadBookQuote"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.a,{href:"/docs/next/MessageSchemas/Schema/Topics/market-data-spreads/SpreadBookQuote",children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SpreadBookQuote"})})})," message delivers a market view as a live spread book. It is built from SpreadExchOrders and continuously updated to reflect the most current book state. Each record:"]}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Contains up to two price levels."}),(0,s.jsxs)("li",{children:["References its ",(0,s.jsx)("i",{children:"SRspreadID"}),", linking back to SpreadDefinition and the underlying legs of the spread."]})]}),"\n",(0,s.jsx)(r.p,{children:"To maintain accuracy, new orders are incorporated into the book in real time while every ten seconds, the system scans for and removes orders older than five minutes. This process keeps the spread book both timely and reliable."})]})}function l(e={}){let{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},91503:function(e,r,n){n.d(r,{Z:function(){return d},a:function(){return a}});var i=n(75271);let s={},t=i.createContext(s);function a(e){let r=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);