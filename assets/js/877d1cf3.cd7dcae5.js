"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["37315"],{44886:function(e,t,n){n.r(t),n.d(t,{default:()=>u,frontMatter:()=>a,metadata:()=>s,assets:()=>o,toc:()=>h,contentTitle:()=>c});var s=JSON.parse('{"id":"MessageSchemas/Schema/Topics/order-allocation/SpdrAllocationNotice","title":"SpdrAllocationNotice","description":"METADATA","source":"@site/versioned_docs/version-8.5.9.4/MessageSchemas/Schema/Topics/3695-order-allocation/SpdrAllocationNotice.md","sourceDirName":"MessageSchemas/Schema/Topics/3695-order-allocation","slug":"/MessageSchemas/Schema/Topics/order-allocation/SpdrAllocationNotice","permalink":"/docs/8.5.9.4/MessageSchemas/Schema/Topics/order-allocation/SpdrAllocationNotice","draft":false,"unlisted":false,"tags":[],"version":"8.5.9.4","frontMatter":{"title":"SpdrAllocationNotice"},"sidebar":"messageSchemasSidebar","previous":{"title":"3695-order-allocation","permalink":"/docs/8.5.9.4/MessageSchemas/Schema/Topics/order-allocation/"},"next":{"title":"SpdrAllocationNoticeStatus","permalink":"/docs/8.5.9.4/MessageSchemas/Schema/Topics/order-allocation/SpdrAllocationNoticeStatus"}}'),r=n("52676"),l=n("91503"),i=n("71386"),d=n("9641");let a={title:"SpdrAllocationNotice"},c="Schema: SpdrAllocationNotice (ID: 3695)",o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"REPEATING FIELDS",id:"repeating-fields",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function x(e){let t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsxs)(t.h1,{id:"schema-spdrallocationnotice-id-3695",children:["Schema: SpdrAllocationNotice ",(0,r.jsx)("span",{className:"small-text",children:"(ID: 3695)"})]})}),"\n",(0,r.jsx)(t.h3,{id:"metadata",children:"METADATA"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Attribute"}),(0,r.jsx)(t.th,{children:"Value"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Topic"}),(0,r.jsx)(t.td,{children:"3695-order-allocation"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"MLink Token"}),(0,r.jsx)(t.td,{children:"ClientTrading"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"SRSE Product"}),(0,r.jsx)(t.td,{children:"SRTrade"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note:"})," The symbol ",(0,r.jsx)(t.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"body",children:"BODY"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"#"}),(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Default Value"}),(0,r.jsx)(t.th,{children:"Comment"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"10="}),(0,r.jsx)(t.td,{children:"allocNumber"}),(0,r.jsx)(t.td,{children:"long"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"unique number assigned to this allocation notice"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"100"}),(0,r.jsx)(t.td,{children:"tradeDate"}),(0,r.jsx)(t.td,{children:"DateKey"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"103"}),(0,r.jsx)(t.td,{children:"clientFirm"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"106"}),(0,r.jsx)(t.td,{children:"omniAccnt"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"omnibus accnt (SR accnt)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"109"}),(0,r.jsx)(t.td,{children:"secKey"}),(0,r.jsx)(t.td,{children:"OptionKey"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"security key (stock, future, or option)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"112"}),(0,r.jsx)(t.td,{children:"secType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"security type"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"115"}),(0,r.jsx)(t.td,{children:"mlegLegKey"}),(0,r.jsx)(t.td,{children:"text1"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"[secKey.StringKey;legRatio;side;positionEffect, secKey.StringKey;legRatio;side;positionEffect, ...]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"118"}),(0,r.jsx)(t.td,{children:"orderSide"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"order side (always buy for MLEG orders)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"121"}),(0,r.jsx)(t.td,{children:"ssaleFlag"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"ssale flag (None if not stock)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"124"}),(0,r.jsx)(t.td,{children:"positionType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"positionType (None if not equity option)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"127"}),(0,r.jsx)(t.td,{children:"noticeState"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/NoticeState",children:"enum : NoticeState"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"indicates that this noticed is ready to forward to a custodian"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"130"}),(0,r.jsx)(t.td,{children:"noticeText"}),(0,r.jsx)(t.td,{children:"text1"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"133"}),(0,r.jsx)(t.td,{children:"allocMethod"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/AllocMethod",children:"enum : AllocMethod"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"method for delivery of the allocation instruction to the broker"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"402"}),(0,r.jsx)(t.td,{children:"execBrkrCode"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"used for FIX routing (can be null)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"403"}),(0,r.jsx)(t.td,{children:"allocExDest"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"used for FIX routing"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"136"}),(0,r.jsx)(t.td,{children:"orderShape"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SpdrOrderShape",children:"enum : SpdrOrderShape"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Single or MLeg"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"139"}),(0,r.jsx)(t.td,{children:"cumFillQuantity"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"total fill size of all ChildOrders"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"142"}),(0,r.jsx)(t.td,{children:"avgFillPrice"}),(0,r.jsx)(t.td,{children:"double"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"parent order average fill price"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"145"}),(0,r.jsx)(t.td,{children:"netMoney"}),(0,r.jsx)(t.td,{children:"double"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"net allocation money"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"376"}),(0,r.jsx)(t.td,{children:"modifiedBy"}),(0,r.jsx)(t.td,{children:"string(24)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"user who last modified this record"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"379"}),(0,r.jsx)(t.td,{children:"modifiedIn"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SysEnvironment",children:"enum : SysEnvironment"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"382"}),(0,r.jsx)(t.td,{children:"timestamp"}),(0,r.jsx)(t.td,{children:"DateTime"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"timestamp of last modification"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"repeating-fields",children:"REPEATING FIELDS"}),"\n",(0,r.jsx)(t.p,{children:"ChildOrders"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"#"}),(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Default Value"}),(0,r.jsx)(t.th,{children:"Comment"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"151"}),(0,r.jsx)(t.td,{children:"clOrdId"}),(0,r.jsx)(t.td,{children:"long"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"154"}),(0,r.jsx)(t.td,{children:"orderSize"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"157"}),(0,r.jsx)(t.td,{children:"cumFillQuantity"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"160"}),(0,r.jsx)(t.td,{children:"avgFillPrice"}),(0,r.jsx)(t.td,{children:"double"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"163"}),(0,r.jsx)(t.td,{children:"streetClOrdId"}),(0,r.jsx)(t.td,{children:"string(24)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"usually clOrdID.X16 but can be different if street gateway was translating clOrdId"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"166"}),(0,r.jsx)(t.td,{children:"streetOrderId"}),(0,r.jsx)(t.td,{children:"string(24)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"street side order ID (for canceling order)"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"Fragments"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"#"}),(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Default Value"}),(0,r.jsx)(t.th,{children:"Comment"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"172"}),(0,r.jsx)(t.td,{children:"accnt"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"SR alloc accnt"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"385"}),(0,r.jsx)(t.td,{children:"clientFirm"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"SR client firm"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"175"}),(0,r.jsx)(t.td,{children:"allocAccnt"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"clearing firm alloc accnt (maps to Fix.AllocAccount)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"178"}),(0,r.jsx)(t.td,{children:"allocFragId"}),(0,r.jsx)(t.td,{children:"long"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"unique ID of this alloc/fragment (maps to Fix.IndividualAllocID)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"181"}),(0,r.jsx)(t.td,{children:"allocSize"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"accnt alloc size"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"OrderLegs"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"#"}),(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Default Value"}),(0,r.jsx)(t.th,{children:"Comment"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"386"}),(0,r.jsx)(t.td,{children:"secKey"}),(0,r.jsx)(t.td,{children:"OptionKey"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"387"}),(0,r.jsx)(t.td,{children:"secType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"388"}),(0,r.jsx)(t.td,{children:"mult"}),(0,r.jsx)(t.td,{children:"ushort"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"389"}),(0,r.jsx)(t.td,{children:"side"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"390"}),(0,r.jsx)(t.td,{children:"legId"}),(0,r.jsx)(t.td,{children:"long"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"SR leg Id"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"391"}),(0,r.jsx)(t.td,{children:"altLegId"}),(0,r.jsx)(t.td,{children:"string(24)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"client leg Id (usually from a FIX order)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"392"}),(0,r.jsx)(t.td,{children:"sumLegQty"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"393"}),(0,r.jsx)(t.td,{children:"sumLegMny"}),(0,r.jsx)(t.td,{children:"double"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"LegPosType"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"#"}),(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Default Value"}),(0,r.jsx)(t.th,{children:"Comment"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"395"}),(0,r.jsx)(t.td,{children:"secKey"}),(0,r.jsx)(t.td,{children:"OptionKey"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"396"}),(0,r.jsx)(t.td,{children:"secType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"397"}),(0,r.jsx)(t.td,{children:"accnt"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"SR alloc accnt (matches fragment)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"398"}),(0,r.jsx)(t.td,{children:"clientFirm"}),(0,r.jsx)(t.td,{children:"string(16)"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"SR client firm"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"399"}),(0,r.jsx)(t.td,{children:"ssaleFlag"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"ssale flag (if secType = Stock)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"400"}),(0,r.jsx)(t.td,{children:"positionType"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"positionType (if secType != Stock)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"401"}),(0,r.jsx)(t.td,{children:"firmPosition"}),(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrAllocationNotice'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrAllocationNotice'\n\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAllocationNotice\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'tradeDate|clientFirm|omniAccnt|secKey|secType|mlegLegKey|orderSide|ssaleFlag|positionType|noticeState|noticeText|allocMethod|execBrkrCode|allocExDest|orderShape|cumFillQuantity|avgFillPrice|netMoney|modifiedBy|modifiedIn|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'clientFirm:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrAllocationNotice' \\\n--data-urlencode 'view=tradeDate|clientFirm|omniAccnt|secKey|secType|mlegLegKey|orderSide|ssaleFlag|positionType|noticeState|noticeText|allocMethod|execBrkrCode|allocExDest|orderShape|cumFillQuantity|avgFillPrice|netMoney|modifiedBy|modifiedIn|timestamp' \\\n--data-urlencode 'where=clientFirm:eq:ExampleString'\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAllocationNotice\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'tradeDate|clientFirm|omniAccnt|secKey|secType|mlegLegKey|orderSide|ssaleFlag|positionType|noticeState|noticeText|allocMethod|execBrkrCode|allocExDest|orderShape|cumFillQuantity|avgFillPrice|netMoney|modifiedBy|modifiedIn|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'clientFirm:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'tradeDate:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrAllocationNotice' \\\n--data-urlencode 'view=tradeDate|clientFirm|omniAccnt|secKey|secType|mlegLegKey|orderSide|ssaleFlag|positionType|noticeState|noticeText|allocMethod|execBrkrCode|allocExDest|orderShape|cumFillQuantity|avgFillPrice|netMoney|modifiedBy|modifiedIn|timestamp' \\\n--data-urlencode 'where=clientFirm:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=tradeDate:ASC'\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAllocationNotice\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'tradeDate|clientFirm|omniAccnt|secKey|secType|mlegLegKey|orderSide|ssaleFlag|positionType|noticeState|noticeText|allocMethod|execBrkrCode|allocExDest|orderShape|cumFillQuantity|avgFillPrice|netMoney|modifiedBy|modifiedIn|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'secType|orderSide|ssaleFlag|positionType|noticeState|allocMethod|orderShape|modifiedIn\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'clientFirm:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrAllocationNotice' \\\n--data-urlencode 'measure=tradeDate|clientFirm|omniAccnt|secKey|secType|mlegLegKey|orderSide|ssaleFlag|positionType|noticeState|noticeText|allocMethod|execBrkrCode|allocExDest|orderShape|cumFillQuantity|avgFillPrice|netMoney|modifiedBy|modifiedIn|timestamp' \\\n--data-urlencode 'group=secType|orderSide|ssaleFlag|positionType|noticeState|allocMethod|orderShape|modifiedIn' \\\n--data-urlencode 'where=clientFirm:eq:ExampleString'\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(d.Z,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAllocationNotice\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'clientFirm:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,r.jsx)(d.Z,{value:"cUrl",label:"cUrl",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrAllocationNotice' \\\n--data-urlencode 'where=clientFirm:eq:ExampleString'\n"})})})]})]})}function u(e={}){let{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},9641:function(e,t,n){n.d(t,{Z:()=>l});var s=n("52676");n("75271");var r=n("54461");function l(e){let{children:t,hidden:n,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.Z)("tabItem_SSzl",l),hidden:n,children:t})}},71386:function(e,t,n){n.d(t,{Z:()=>y});var s=n("52676"),r=n("75271"),l=n("54461"),i=n("52289"),d=n("3225"),a=n("42834"),c=n("40578"),o=n("35834"),h=n("79616");function x(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||r.isValidElement(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){let{value:t,tabValues:n}=e;return n.some(e=>e.value===t)}var j=n("44537");function m(e){let{className:t,block:n,selectedValue:r,selectValue:d,tabValues:a}=e,c=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.o5)(),h=e=>{let t=e.currentTarget,n=a[c.indexOf(t)].value;n!==r&&(o(t),d(n))},x=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{let n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1]}}t?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t),children:a.map(e=>{let{value:t,label:n,attributes:i}=e;return(0,s.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>c.push(e),onKeyDown:x,onClick:h,...i,className:(0,l.Z)("tabs__item","tabItem_aitt",i?.className,{"tabs__item--active":r===t}),children:n??t},t)})})}function p(e){let{lazy:t,children:n,selectedValue:i}=e,d=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){let e=d.find(e=>e.props.value===i);return e?(0,r.cloneElement)(e,{className:(0,l.Z)("margin-top--md",e.props.className)}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:d.map((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i}))})}function g(e){let t=function(e){let{defaultValue:t,queryString:n=!1,groupId:s}=e,l=function(e){let{values:t,children:n}=e;return(0,r.useMemo)(()=>{let e=t??x(n).map(e=>{let{props:{value:t,label:n,attributes:s,default:r}}=e;return{value:t,label:n,attributes:s,default:r}});return!function(e){let t=(0,o.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}(e),[i,j]=(0,r.useState)(()=>(function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}let s=n.find(e=>e.default)??n[0];if(!s)throw Error("Unexpected error: 0 tabValues");return s.value})({defaultValue:t,tabValues:l})),[m,p]=function(e){let{queryString:t=!1,groupId:n}=e,s=(0,d.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(l),(0,r.useCallback)(e=>{if(!l)return;let t=new URLSearchParams(s.location.search);t.set(l,e),s.replace({...s.location,search:t.toString()})},[l,s])]}({queryString:n,groupId:s}),[g,y]=function(e){let{groupId:t}=e,n=t?`docusaurus.tab.${t}`:null,[s,l]=(0,h.Nk)(n);return[s,(0,r.useCallback)(e=>{n&&l.set(e)},[n,l])]}({groupId:s}),f=(()=>{let e=m??g;return u({value:e,tabValues:l})?e:null})();return(0,a.Z)(()=>{f&&j(f)},[f]),{selectedValue:i,selectValue:(0,r.useCallback)(e=>{if(!u({value:e,tabValues:l}))throw Error(`Can't select invalid tab value=${e}`);j(e),p(e),y(e)},[p,y,l]),tabValues:l}}(e);return(0,s.jsxs)("div",{className:(0,l.Z)("tabs-container","tabList_ArS0"),children:[(0,s.jsx)(m,{...t,...e}),(0,s.jsx)(p,{...t,...e})]})}function y(e){let t=(0,j.Z)();return(0,s.jsx)(g,{...e,children:x(e.children)},String(t))}},91503:function(e,t,n){n.d(t,{Z:function(){return d},a:function(){return i}});var s=n(75271);let r={},l=s.createContext(r);function i(e){let t=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);