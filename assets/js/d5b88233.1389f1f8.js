"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[16380],{32022:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>x,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var n=t(74848),s=t(28453),i=t(11470),d=t(19365);const a={title:"LiveSurfacePerf"},l="Schema: LiveSurfacePerf (ID: 1055)",c={id:"MessageSchemas/Schema/Topics/analytics/LiveSurfacePerf",title:"LiveSurfacePerf",description:"LiveSurfacePerf records contain current and prior period implied ATM volatilities and greeks and as well as fixed-strike PnL values.  The strike used for the fix-strike calculation is equal to the forward underlier price that prevailed on the open.  Note that this strike price 'resets' each day.LiveSurfacePerf records are published to the SpiderRock elastic cluster at the end of the day for each option expiration.  These records are designed to allow fixed strike EOD to EOD attributed PnL to be easily calculated.  These records can also be used to measure atm volatility dynamics.",source:"@site/versioned_docs/version-8.4.10.4/MessageSchemas/Schema/Topics/1000-analytics/LiveSurfacePerf.md",sourceDirName:"MessageSchemas/Schema/Topics/1000-analytics",slug:"/MessageSchemas/Schema/Topics/analytics/LiveSurfacePerf",permalink:"/docs/8.4.10.4/MessageSchemas/Schema/Topics/analytics/LiveSurfacePerf",draft:!1,unlisted:!1,tags:[],version:"8.4.10.4",frontMatter:{title:"LiveSurfacePerf"},sidebar:"messageSchemasSidebar",previous:{title:"LiveSurfaceFixedTerm",permalink:"/docs/8.4.10.4/MessageSchemas/Schema/Topics/analytics/LiveSurfaceFixedTerm"},next:{title:"OptionLookback",permalink:"/docs/8.4.10.4/MessageSchemas/Schema/Topics/analytics/OptionLookback"}},o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function p(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.h1,{id:"schema-livesurfaceperf-id-1055",children:["Schema: LiveSurfacePerf ",(0,n.jsx)("span",{className:"small-text",children:"(ID: 1055)"})]}),"\n",(0,n.jsxs)(r.p,{children:["LiveSurfacePerf records contain current and prior period implied ATM volatilities and greeks and as well as fixed-strike PnL values.  The strike used for the fix-strike calculation is equal to the forward underlier price that prevailed on the open.  Note that this strike price 'resets' each day.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"LiveSurfacePerf records are published to the SpiderRock elastic cluster at the end of the day for each option expiration.  These records are designed to allow fixed strike EOD to EOD attributed PnL to be easily calculated.  These records can also be used to measure atm volatility dynamics."]}),"\n",(0,n.jsx)(r.h3,{id:"metadata",children:"METADATA"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Attribute"}),(0,n.jsx)(r.th,{children:"Value"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Topic"}),(0,n.jsx)(r.td,{children:"1000-analytics"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"MLink Token"}),(0,n.jsx)(r.td,{children:"SRMLinkAnalytics"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"SRSE Product"}),(0,n.jsx)(r.td,{children:"SRAnalytics"})]})]})]}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Note:"})," The symbol ",(0,n.jsx)(r.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"body",children:"BODY"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"#"}),(0,n.jsx)(r.th,{children:"Field"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Comment"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"10="}),(0,n.jsx)(r.td,{children:"ekey"}),(0,n.jsx)(r.td,{children:"ExpiryKey"}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"11="}),(0,n.jsx)(r.td,{children:"perfSurfType"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"../../../Enums/PerfSurfaceType",children:"enum : PerfSurfaceType"})}),(0,n.jsx)(r.td,{children:"Preferred surface type: None; Live; PriorDay"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"100"}),(0,n.jsx)(r.td,{children:"date"}),(0,n.jsx)(r.td,{children:"string(10)"}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"103"}),(0,n.jsx)(r.td,{children:"time"}),(0,n.jsx)(r.td,{children:"string(8)"}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"106"}),(0,n.jsx)(r.td,{children:"ticker"}),(0,n.jsx)(r.td,{children:"TickerKey"}),(0,n.jsx)(r.td,{children:"SpiderRock underlier stock key"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"109"}),(0,n.jsx)(r.td,{children:"exType"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"../../../Enums/ExerciseType",children:"enum : ExerciseType"})}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"112"}),(0,n.jsx)(r.td,{children:"modelType"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"../../../Enums/CalcModelType",children:"enum : CalcModelType"})}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"115"}),(0,n.jsx)(r.td,{children:"uMark"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"current underlier mark (usually mid market)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"118"}),(0,n.jsx)(r.td,{children:"years"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"time to expiration (in years)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"121"}),(0,n.jsx)(r.td,{children:"rate"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"interest rate"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"124"}),(0,n.jsx)(r.td,{children:"sdiv"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"stock dividend (borrow rate)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"127"}),(0,n.jsx)(r.td,{children:"ddiv"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"present value of discrete dividend stream"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"130"}),(0,n.jsx)(r.td,{children:"eventCnt"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"number of qualifying earnings (or earnings like) events (between now and expiration) [can be fractional]"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"133"}),(0,n.jsx)(r.td,{children:"iEMove"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"implied event move (if any)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"136"}),(0,n.jsx)(r.td,{children:"hEMove"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"average of the trailing 12 historical (quarterly) earnings moves (if any)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"139"}),(0,n.jsx)(r.td,{children:"strike"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"atm strike = uMark * Math.Exp(years * rate) - ddiv;"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"142"}),(0,n.jsx)(r.td,{children:"cIVol"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"call surface atm vol @ strike = uMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"145"}),(0,n.jsx)(r.td,{children:"pIVol"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"put surface atm vol @ strike = uMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"148"}),(0,n.jsx)(r.td,{children:"cSOpx"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"call option price @ (cAtm, uMark, years, sdiv, rate, ddiv);strike = uMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"151"}),(0,n.jsx)(r.td,{children:"pSOpx"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"put option price @ (pAtm, uMark, years, sdiv, rate, ddiv);strike = uMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"154"}),(0,n.jsx)(r.td,{children:"cDe"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface call delta @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"157"}),(0,n.jsx)(r.td,{children:"cGa"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface call gamma @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"160"}),(0,n.jsx)(r.td,{children:"cTh"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface call theta @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"163"}),(0,n.jsx)(r.td,{children:"cVe"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface call vega @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"166"}),(0,n.jsx)(r.td,{children:"cRo"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface call rho @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"169"}),(0,n.jsx)(r.td,{children:"pDe"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface put delta @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"172"}),(0,n.jsx)(r.td,{children:"pGa"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface put gamma @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"175"}),(0,n.jsx)(r.td,{children:"pTh"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface put theta @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"178"}),(0,n.jsx)(r.td,{children:"pVe"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface put vega @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"181"}),(0,n.jsx)(r.td,{children:"pRo"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"surface put rho @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"184"}),(0,n.jsx)(r.td,{children:"xxCnt"}),(0,n.jsx)(r.td,{children:"byte"}),(0,n.jsx)(r.td,{children:"number of valid surface strikes"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"187"}),(0,n.jsx)(r.td,{children:"pwidth"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"minimum mkt premium width"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"190"}),(0,n.jsx)(r.td,{children:"vwidth"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"minimum mkt volatility width"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"193"}),(0,n.jsx)(r.td,{children:"fixCIVol"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"fixed strike call surface atm vol @ strike = prvUMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"196"}),(0,n.jsx)(r.td,{children:"fixPIVol"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"fixed strike put surface atm vol @ strike = prvUMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"199"}),(0,n.jsx)(r.td,{children:"fixCSOpx"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"fixed strike call option price @ (fixCAtm, uMark, years, sdiv, rate, ddiv);strike = prvUMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"202"}),(0,n.jsx)(r.td,{children:"fixPSOpx"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"fixed strike put option price @ (fixPAtm, uMark, years, sdiv, rate, ddiv);strike = prvUMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"205"}),(0,n.jsx)(r.td,{children:"prvUMark"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period underlier mark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"208"}),(0,n.jsx)(r.td,{children:"prvYears"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period years to expiration"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"211"}),(0,n.jsx)(r.td,{children:"prvSDiv"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period sdiv"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"214"}),(0,n.jsx)(r.td,{children:"prvRate"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period rate"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"217"}),(0,n.jsx)(r.td,{children:"prvDDiv"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period ddiv"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"220"}),(0,n.jsx)(r.td,{children:"prvStrike"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period atm strike = prvUMark * Math.Exp(years * rate) - ddiv;"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"223"}),(0,n.jsx)(r.td,{children:"prvEventCnt"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"number of qualifying earnings (or earnings like) events (between now and expiration) [can be fractional]"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"226"}),(0,n.jsx)(r.td,{children:"prvIEMove"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period implied event move (if any)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"229"}),(0,n.jsx)(r.td,{children:"prvCIVol"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface cAtm @ strike = prvMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"232"}),(0,n.jsx)(r.td,{children:"prvPIVol"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface pAtm @ strike = prvMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"235"}),(0,n.jsx)(r.td,{children:"prvCSOpx"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period call surface price @ strike = prvUMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"238"}),(0,n.jsx)(r.td,{children:"prvPSOpx"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period put surface price @ strike = prvUMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"241"}),(0,n.jsx)(r.td,{children:"prvCDe"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface call delta @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"244"}),(0,n.jsx)(r.td,{children:"prvCGa"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface call gamma @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"247"}),(0,n.jsx)(r.td,{children:"prvCTh"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface call theta @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"250"}),(0,n.jsx)(r.td,{children:"prvCVe"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface call vega @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"253"}),(0,n.jsx)(r.td,{children:"prvCRo"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface call rho @ (cAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"256"}),(0,n.jsx)(r.td,{children:"prvPDe"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface put delta @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"259"}),(0,n.jsx)(r.td,{children:"prvPGa"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface put gamma @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"262"}),(0,n.jsx)(r.td,{children:"prvPTh"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface put theta @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"265"}),(0,n.jsx)(r.td,{children:"prvPVe"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface put vega @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"268"}),(0,n.jsx)(r.td,{children:"prvPRo"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period surface put rho @ (pAtm, uMark, years, sdiv, rate, ddiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"271"}),(0,n.jsx)(r.td,{children:"prvXXCnt"}),(0,n.jsx)(r.td,{children:"byte"}),(0,n.jsx)(r.td,{children:"prior period number of valid surface strikes"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"274"}),(0,n.jsx)(r.td,{children:"prvPWidth"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period minimum mkt premium width"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"277"}),(0,n.jsx)(r.td,{children:"prvVWidth"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prior period minimum mkt volatility width"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"280"}),(0,n.jsx)(r.td,{children:"cOptPnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"call option pnl (fixCOpx - prvCOpx)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"283"}),(0,n.jsx)(r.td,{children:"pOptPnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"put option pnl (fixPOpx - prvPOpx)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"286"}),(0,n.jsx)(r.td,{children:"dUPrc"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"uMark - prvUMark"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"289"}),(0,n.jsx)(r.td,{children:"cDePnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prvCDe * dUPrc"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"292"}),(0,n.jsx)(r.td,{children:"cGaPnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"0.5 * prvCGa * dUPrc * dUPrc"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"295"}),(0,n.jsx)(r.td,{children:"cThPnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prvCTh * (years - prvYears)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"298"}),(0,n.jsx)(r.td,{children:"cVePnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prvCVe * (sVol - prvSVol)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"301"}),(0,n.jsx)(r.td,{children:"cRoPnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prvCRo * (sdiv - prvSDiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"304"}),(0,n.jsx)(r.td,{children:"pDePnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prvPDe * dUPrc"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"307"}),(0,n.jsx)(r.td,{children:"pGaPnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"0.5 * prvPGa * dUPrc * dUPrc"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"310"}),(0,n.jsx)(r.td,{children:"pThPnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prvPTh * (years - prvYears)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"313"}),(0,n.jsx)(r.td,{children:"pVePnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prvPVe * (sVol - prvSVol)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"316"}),(0,n.jsx)(r.td,{children:"pRoPnL"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"prvPRo * (sdiv - prvSDiv)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"319"}),(0,n.jsx)(r.td,{children:"timestamp"}),(0,n.jsx)(r.td,{children:"DateTime"}),(0,n.jsx)(r.td,{})]})]})]}),"\n",(0,n.jsx)(r.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'LiveSurfacePerf'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n#Required Parameters\n\"apiKey\": API_KEY,\n\"cmd\": 'getschema',\n\"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=LiveSurfacePerf'\n\n"})})})]}),"\n",(0,n.jsx)(r.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'LiveSurfacePerf\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'date|time|ticker|exType|modelType|uMark|years|rate|sdiv|ddiv|eventCnt|iEMove|hEMove|strike|cIVol|pIVol|cSOpx|pSOpx|cDe|cGa|cTh|cVe|cRo|pDe|pGa|pTh|pVe|pRo|xxCnt|pwidth|vwidth|fixCIVol|fixPIVol|fixCSOpx|fixPSOpx|prvUMark|prvYears|prvSDiv|prvRate|prvDDiv|prvStrike|prvEventCnt|prvIEMove|prvCIVol|prvPIVol|prvCSOpx|prvPSOpx|prvCDe|prvCGa|prvCTh|prvCVe|prvCRo|prvPDe|prvPGa|prvPTh|prvPVe|prvPRo|prvXXCnt|prvPWidth|prvVWidth|cOptPnL|pOptPnL|dUPrc|cDePnL|cGaPnL|cThPnL|cVePnL|cRoPnL|pDePnL|pGaPnL|pThPnL|pVePnL|pRoPnL|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'time:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=LiveSurfacePerf' \\\n--data-urlencode 'view=date|time|ticker|exType|modelType|uMark|years|rate|sdiv|ddiv|eventCnt|iEMove|hEMove|strike|cIVol|pIVol|cSOpx|pSOpx|cDe|cGa|cTh|cVe|cRo|pDe|pGa|pTh|pVe|pRo|xxCnt|pwidth|vwidth|fixCIVol|fixPIVol|fixCSOpx|fixPSOpx|prvUMark|prvYears|prvSDiv|prvRate|prvDDiv|prvStrike|prvEventCnt|prvIEMove|prvCIVol|prvPIVol|prvCSOpx|prvPSOpx|prvCDe|prvCGa|prvCTh|prvCVe|prvCRo|prvPDe|prvPGa|prvPTh|prvPVe|prvPRo|prvXXCnt|prvPWidth|prvVWidth|cOptPnL|pOptPnL|dUPrc|cDePnL|cGaPnL|cThPnL|cVePnL|cRoPnL|pDePnL|pGaPnL|pThPnL|pVePnL|pRoPnL|timestamp' \\\n--data-urlencode 'where=time:eq:ExampleString'\n"})})})]}),"\n",(0,n.jsx)(r.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'LiveSurfacePerf\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'date|time|ticker|exType|modelType|uMark|years|rate|sdiv|ddiv|eventCnt|iEMove|hEMove|strike|cIVol|pIVol|cSOpx|pSOpx|cDe|cGa|cTh|cVe|cRo|pDe|pGa|pTh|pVe|pRo|xxCnt|pwidth|vwidth|fixCIVol|fixPIVol|fixCSOpx|fixPSOpx|prvUMark|prvYears|prvSDiv|prvRate|prvDDiv|prvStrike|prvEventCnt|prvIEMove|prvCIVol|prvPIVol|prvCSOpx|prvPSOpx|prvCDe|prvCGa|prvCTh|prvCVe|prvCRo|prvPDe|prvPGa|prvPTh|prvPVe|prvPRo|prvXXCnt|prvPWidth|prvVWidth|cOptPnL|pOptPnL|dUPrc|cDePnL|cGaPnL|cThPnL|cVePnL|cRoPnL|pDePnL|pGaPnL|pThPnL|pVePnL|pRoPnL|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'time:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'date:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=LiveSurfacePerf' \\\n--data-urlencode 'view=date|time|ticker|exType|modelType|uMark|years|rate|sdiv|ddiv|eventCnt|iEMove|hEMove|strike|cIVol|pIVol|cSOpx|pSOpx|cDe|cGa|cTh|cVe|cRo|pDe|pGa|pTh|pVe|pRo|xxCnt|pwidth|vwidth|fixCIVol|fixPIVol|fixCSOpx|fixPSOpx|prvUMark|prvYears|prvSDiv|prvRate|prvDDiv|prvStrike|prvEventCnt|prvIEMove|prvCIVol|prvPIVol|prvCSOpx|prvPSOpx|prvCDe|prvCGa|prvCTh|prvCVe|prvCRo|prvPDe|prvPGa|prvPTh|prvPVe|prvPRo|prvXXCnt|prvPWidth|prvVWidth|cOptPnL|pOptPnL|dUPrc|cDePnL|cGaPnL|cThPnL|cVePnL|cRoPnL|pDePnL|pGaPnL|pThPnL|pVePnL|pRoPnL|timestamp' \\\n--data-urlencode 'where=time:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=date:ASC'\n"})})})]}),"\n",(0,n.jsx)(r.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'LiveSurfacePerf\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'date|time|ticker|exType|modelType|uMark|years|rate|sdiv|ddiv|eventCnt|iEMove|hEMove|strike|cIVol|pIVol|cSOpx|pSOpx|cDe|cGa|cTh|cVe|cRo|pDe|pGa|pTh|pVe|pRo|xxCnt|pwidth|vwidth|fixCIVol|fixPIVol|fixCSOpx|fixPSOpx|prvUMark|prvYears|prvSDiv|prvRate|prvDDiv|prvStrike|prvEventCnt|prvIEMove|prvCIVol|prvPIVol|prvCSOpx|prvPSOpx|prvCDe|prvCGa|prvCTh|prvCVe|prvCRo|prvPDe|prvPGa|prvPTh|prvPVe|prvPRo|prvXXCnt|prvPWidth|prvVWidth|cOptPnL|pOptPnL|dUPrc|cDePnL|cGaPnL|cThPnL|cVePnL|cRoPnL|pDePnL|pGaPnL|pThPnL|pVePnL|pRoPnL|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'exType|modelType\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'time:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getaggregate\',\n"msgType": MSG_TYPE,\n"measure": MEASURE,\n"group": GROUP,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=LiveSurfacePerf' \\\n--data-urlencode 'measure=date|time|ticker|exType|modelType|uMark|years|rate|sdiv|ddiv|eventCnt|iEMove|hEMove|strike|cIVol|pIVol|cSOpx|pSOpx|cDe|cGa|cTh|cVe|cRo|pDe|pGa|pTh|pVe|pRo|xxCnt|pwidth|vwidth|fixCIVol|fixPIVol|fixCSOpx|fixPSOpx|prvUMark|prvYears|prvSDiv|prvRate|prvDDiv|prvStrike|prvEventCnt|prvIEMove|prvCIVol|prvPIVol|prvCSOpx|prvPSOpx|prvCDe|prvCGa|prvCTh|prvCVe|prvCRo|prvPDe|prvPGa|prvPTh|prvPVe|prvPRo|prvXXCnt|prvPWidth|prvVWidth|cOptPnL|pOptPnL|dUPrc|cDePnL|cGaPnL|cThPnL|cVePnL|cRoPnL|pDePnL|pGaPnL|pThPnL|pVePnL|pRoPnL|timestamp' \\\n--data-urlencode 'group=exType|modelType' \\\n--data-urlencode 'where=time:eq:ExampleString'\n"})})})]}),"\n",(0,n.jsx)(r.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'LiveSurfacePerf\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'time:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=LiveSurfacePerf' \\\n--data-urlencode 'where=time:eq:ExampleString'\n"})})})]})]})}function x(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},19365:(e,r,t)=>{t.d(r,{A:()=>d});t(96540);var n=t(34164);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function d(e){let{children:r,hidden:t,className:d}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(s.tabItem,d),hidden:t,children:r})}},11470:(e,r,t)=>{t.d(r,{A:()=>k});var n=t(96540),s=t(34164),i=t(23104),d=t(56347),a=t(205),l=t(57485),c=t(31682),o=t(70679);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:t}=e;return(0,n.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:t,attributes:n,default:s}}=e;return{value:r,label:t,attributes:n,default:s}}))}(t);return function(e){const r=(0,c.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function x(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function u(e){let{queryString:r=!1,groupId:t}=e;const s=(0,d.W6)(),i=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,l.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(s.location.search);r.set(i,e),s.replace({...s.location,search:r.toString()})}),[i,s])]}function v(e){const{defaultValue:r,queryString:t=!1,groupId:s}=e,i=p(e),[d,l]=(0,n.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!x({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:i}))),[c,h]=u({queryString:t,groupId:s}),[v,j]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[s,i]=(0,o.Dv)(t);return[s,(0,n.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),m=(()=>{const e=c??v;return x({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{m&&l(m)}),[m]);return{selectedValue:d,selectValue:(0,n.useCallback)((e=>{if(!x({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),j(e)}),[h,j,i]),tabValues:i}}var j=t(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function P(e){let{className:r,block:t,selectedValue:n,selectValue:d,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),o=e=>{const r=e.currentTarget,t=l.indexOf(r),s=a[t].value;s!==n&&(c(r),d(s))},h=e=>{let r=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;r=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;r=l[t]??l[l.length-1];break}}r?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},r),children:a.map((e=>{let{value:r,label:t,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:n===r?0:-1,"aria-selected":n===r,ref:e=>l.push(e),onKeyDown:h,onClick:o,...i,className:(0,s.A)("tabs__item",m.tabItem,i?.className,{"tabs__item--active":n===r}),children:t??r},r)}))})}function y(e){let{lazy:r,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=i.find((e=>e.props.value===s));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==s})))})}function g(e){const r=v(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",m.tabList),children:[(0,f.jsx)(P,{...r,...e}),(0,f.jsx)(y,{...r,...e})]})}function k(e){const r=(0,j.A)();return(0,f.jsx)(g,{...e,children:h(e.children)},String(r))}},28453:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>a});var n=t(96540);const s={},i=n.createContext(s);function d(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);