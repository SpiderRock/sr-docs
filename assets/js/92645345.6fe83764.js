"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["94860"],{93333:function(e,s,r){r.r(s),r.d(s,{default:()=>x,frontMatter:()=>l,metadata:()=>t,assets:()=>c,toc:()=>h,contentTitle:()=>o});var t=JSON.parse('{"id":"MessageSchemas/Schema/Topics/risk-v5/StockPositionRecordV5","title":"StockPositionRecordV5","description":"StockPositionRecords are live risk records that contain start-of-day positions and all subsequent executions, including executions reported as done away.These records are published by a CoreRiskServer and represent the position and risk markup detail for a single equity or ETF security.New records are published immediately when a position changes and about once per minute if no position has changed.Note that all stock, future and option records for a single ticker are published simultaneously and records for the same chain should have consistent marks.","source":"@site/versioned_docs/version-8.5.5.1/MessageSchemas/Schema/Topics/4740-risk-v5/StockPositionRecordV5.md","sourceDirName":"MessageSchemas/Schema/Topics/4740-risk-v5","slug":"/MessageSchemas/Schema/Topics/risk-v5/StockPositionRecordV5","permalink":"/docs/8.5.5.1/MessageSchemas/Schema/Topics/risk-v5/StockPositionRecordV5","draft":false,"unlisted":false,"tags":[],"version":"8.5.5.1","frontMatter":{"title":"StockPositionRecordV5"},"sidebar":"messageSchemasSidebar","previous":{"title":"SodClearingRecordV5","permalink":"/docs/8.5.5.1/MessageSchemas/Schema/Topics/risk-v5/SodClearingRecordV5"},"next":{"title":"SymbolMarginSummaryV5","permalink":"/docs/8.5.5.1/MessageSchemas/Schema/Topics/risk-v5/SymbolMarginSummaryV5"}}'),n=r("52676"),d=r("91503"),i=r("71386"),a=r("9641");let l={title:"StockPositionRecordV5"},o="Schema: StockPositionRecordV5 (ID: 4850)",c={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){let s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsxs)(s.h1,{id:"schema-stockpositionrecordv5-id-4850",children:["Schema: StockPositionRecordV5 ",(0,n.jsx)("span",{className:"small-text",children:"(ID: 4850)"})]})}),"\n",(0,n.jsxs)(s.p,{children:["StockPositionRecords are live risk records that contain start-of-day positions and all subsequent executions, including executions reported as done away.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"These records are published by a CoreRiskServer and represent the position and risk markup detail for a single equity or ETF security.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"New records are published immediately when a position changes and about once per minute if no position has changed.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"Note that all stock, future and option records for a single ticker are published simultaneously and records for the same chain should have consistent marks."]}),"\n",(0,n.jsx)(s.h3,{id:"metadata",children:"METADATA"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Attribute"}),(0,n.jsx)(s.th,{children:"Value"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Topic"}),(0,n.jsx)(s.td,{children:"4740-risk-v5"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"MLink Token"}),(0,n.jsx)(s.td,{children:"ClientRisk"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"SRSE Product"}),(0,n.jsx)(s.td,{children:"SRRisk"})]})]})]}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note:"})," The symbol ",(0,n.jsx)(s.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"body",children:"BODY"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"#"}),(0,n.jsx)(s.th,{children:"Field"}),(0,n.jsx)(s.th,{children:"Type"}),(0,n.jsx)(s.th,{children:"Default Value"}),(0,n.jsx)(s.th,{children:"Comment"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"10="}),(0,n.jsx)(s.td,{children:"ticker"}),(0,n.jsx)(s.td,{children:"TickerKey"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"11="}),(0,n.jsx)(s.td,{children:"accnt"}),(0,n.jsx)(s.td,{children:"string(16)"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"12="}),(0,n.jsx)(s.td,{children:"tradeDate"}),(0,n.jsx)(s.td,{children:"DateKey"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"13="}),(0,n.jsx)(s.td,{children:"riskSession"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"../../../Enums/RiskSession",children:"enum : RiskSession"})}),(0,n.jsx)(s.td,{children:"Regular"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"14="}),(0,n.jsx)(s.td,{children:"clientFirm"}),(0,n.jsx)(s.td,{children:"string(16)"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"SR assigned client firm"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"103"}),(0,n.jsx)(s.td,{children:"riskServerCode"}),(0,n.jsx)(s.td,{children:"string(6)"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"106"}),(0,n.jsx)(s.td,{children:"priAggGroup"}),(0,n.jsx)(s.td,{children:"string(16)"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"primary aggregation group"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"109"}),(0,n.jsx)(s.td,{children:"secAggGroup"}),(0,n.jsx)(s.td,{children:"string(16)"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"secondary aggregation group"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"112"}),(0,n.jsx)(s.td,{children:"symbolType"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"../../../Enums/SymbolType",children:"enum : SymbolType"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"115"}),(0,n.jsx)(s.td,{children:"tickValue"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"$NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"118"}),(0,n.jsx)(s.td,{children:"pointValue"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"$NLV value of a single point change in display premium (pointValue = tickValue / tickSize)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"121"}),(0,n.jsx)(s.td,{children:"pointCurrency"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"124"}),(0,n.jsx)(s.td,{children:"priceFormat"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"price display format code"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"127"}),(0,n.jsx)(s.td,{children:"stkPrc"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"current stock price (any market session) (persists if market closed/halted)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"130"}),(0,n.jsx)(s.td,{children:"stkBid"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"current stock bid (any market session) (zero if market closed/halted)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"133"}),(0,n.jsx)(s.td,{children:"stkAsk"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"current stock ask (any market session) (zero if market closed/halted)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"136"}),(0,n.jsx)(s.td,{children:"stkMark"}),(0,n.jsx)(s.td,{children:"double"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"current stock mark (freezes at SR CloseMarkTime)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"139"}),(0,n.jsx)(s.td,{children:"stkMarkErrCodes"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"../../../Enums/MarkErrorCode",children:"flag : MarkErrorCode"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"142"}),(0,n.jsx)(s.td,{children:"stkMarkSource"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"../../../Enums/UMarkSource",children:"enum : UMarkSource"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"145"}),(0,n.jsx)(s.td,{children:"stkOpnMidMark"}),(0,n.jsx)(s.td,{children:"double"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"start-of-day SR stock mark (rotated from prior day record) [corp action adjusted]"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"148"}),(0,n.jsx)(s.td,{children:"stkOpnClrMark"}),(0,n.jsx)(s.td,{children:"double"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"start-of-day CLR stock mark (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"151"}),(0,n.jsx)(s.td,{children:"stkOpnPosPrv"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"start-of-day SR share position (rotated from prior day record) [corp action adjusted]"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"154"}),(0,n.jsx)(s.td,{children:"stkOpnPosClr"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"start-of-day CLR share position (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"157"}),(0,n.jsx)(s.td,{children:"stkOpnPos"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"start of period share position (effective; can be from either CLR or SR)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"160"}),(0,n.jsx)(s.td,{children:"stkOpnPosSrc"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"../../../Enums/PositionSource",children:"enum : PositionSource"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"start of period position source"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"163"}),(0,n.jsx)(s.td,{children:"shBot"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares bot today"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"166"}),(0,n.jsx)(s.td,{children:"shSld"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares sld today"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"169"}),(0,n.jsx)(s.td,{children:"shSldShrt"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares sld short today"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"172"}),(0,n.jsx)(s.td,{children:"shBotHdg"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares bot today from hedging (spdrSource=HedgeTool)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"175"}),(0,n.jsx)(s.td,{children:"shSldHdg"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares sld today from hedging (spdrSource=HedgeTool)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"178"}),(0,n.jsx)(s.td,{children:"shBotTrh"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares bot today from hedging (spdrSource=TradeHedge)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"181"}),(0,n.jsx)(s.td,{children:"shSldTrh"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares sld today from hedging (spdrSource=TradeHedge)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"184"}),(0,n.jsx)(s.td,{children:"shBotOpn"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares bot today from hedging (spdrSource=OpenHedge)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"187"}),(0,n.jsx)(s.td,{children:"shSldOpn"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares sld today from hedging (spdrSource=OpenHedge)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"190"}),(0,n.jsx)(s.td,{children:"shBotTrd"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares bot today from any trade hedging source (AutoHedge or Trades loop)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"193"}),(0,n.jsx)(s.td,{children:"shSldTrd"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of shares sld today from any trade hedging source (AutoHedge or Trades loop)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"196"}),(0,n.jsx)(s.td,{children:"stkMnyBot"}),(0,n.jsx)(s.td,{children:"double"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"sum of settle cash for all buy executions"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"199"}),(0,n.jsx)(s.td,{children:"stkMnySld"}),(0,n.jsx)(s.td,{children:"double"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"sum of settle cash for all sell executions"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"202"}),(0,n.jsx)(s.td,{children:"dayPnl"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"205"}),(0,n.jsx)(s.td,{children:"opnPnlMidMark"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"208"}),(0,n.jsx)(s.td,{children:"opnPnlClrMark"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"211"}),(0,n.jsx)(s.td,{children:"exDivAmt"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"amount of any dividend going ex today"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"214"}),(0,n.jsx)(s.td,{children:"borrowRate"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"overnight rate required to borrow stock (if known)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"217"}),(0,n.jsx)(s.td,{children:"beta"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"beta (usually beta to SPX; see AccountConfig.betaSource)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"220"}),(0,n.jsx)(s.td,{children:"betaSource"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"../../../Enums/BetaSource",children:"enum : BetaSource"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"230"}),(0,n.jsx)(s.td,{children:"marginUDn"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"Aggregate RiskSlide: uPrc dn"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"231"}),(0,n.jsx)(s.td,{children:"marginUUp"}),(0,n.jsx)(s.td,{children:"float"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"Aggregate RiskSlide: uPrc up"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"223"}),(0,n.jsx)(s.td,{children:"numExecutions"}),(0,n.jsx)(s.td,{children:"int"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"number of included SpdrParentExecution records"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"226"}),(0,n.jsx)(s.td,{children:"maxExecDttm"}),(0,n.jsx)(s.td,{children:"DateTime"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"max (timestamp) of included SpdrParentExecution records"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"229"}),(0,n.jsx)(s.td,{children:"timestamp"}),(0,n.jsx)(s.td,{children:"DateTime"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]})]})]}),"\n",(0,n.jsx)(s.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,n.jsxs)(i.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'StockPositionRecordV5'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=StockPositionRecordV5'\n\n"})})})]}),"\n",(0,n.jsx)(s.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,n.jsxs)(i.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'StockPositionRecordV5\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'riskServerCode|priAggGroup|secAggGroup|symbolType|tickValue|pointValue|pointCurrency|priceFormat|stkPrc|stkBid|stkAsk|stkMark|stkMarkErrCodes|stkMarkSource|stkOpnMidMark|stkOpnClrMark|stkOpnPosPrv|stkOpnPosClr|stkOpnPos|stkOpnPosSrc|shBot|shSld|shSldShrt|shBotHdg|shSldHdg|shBotTrh|shSldTrh|shBotOpn|shSldOpn|shBotTrd|shSldTrd|stkMnyBot|stkMnySld|dayPnl|opnPnlMidMark|opnPnlClrMark|exDivAmt|borrowRate|beta|betaSource|marginUDn|marginUUp|numExecutions|maxExecDttm|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=StockPositionRecordV5' \\\n--data-urlencode 'view=riskServerCode|priAggGroup|secAggGroup|symbolType|tickValue|pointValue|pointCurrency|priceFormat|stkPrc|stkBid|stkAsk|stkMark|stkMarkErrCodes|stkMarkSource|stkOpnMidMark|stkOpnClrMark|stkOpnPosPrv|stkOpnPosClr|stkOpnPos|stkOpnPosSrc|shBot|shSld|shSldShrt|shBotHdg|shSldHdg|shBotTrh|shSldTrh|shBotOpn|shSldOpn|shBotTrd|shSldTrd|stkMnyBot|stkMnySld|dayPnl|opnPnlMidMark|opnPnlClrMark|exDivAmt|borrowRate|beta|betaSource|marginUDn|marginUUp|numExecutions|maxExecDttm|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,n.jsx)(s.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,n.jsxs)(i.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'StockPositionRecordV5\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'riskServerCode|priAggGroup|secAggGroup|symbolType|tickValue|pointValue|pointCurrency|priceFormat|stkPrc|stkBid|stkAsk|stkMark|stkMarkErrCodes|stkMarkSource|stkOpnMidMark|stkOpnClrMark|stkOpnPosPrv|stkOpnPosClr|stkOpnPos|stkOpnPosSrc|shBot|shSld|shSldShrt|shBotHdg|shSldHdg|shBotTrh|shSldTrh|shBotOpn|shSldOpn|shBotTrd|shSldTrd|stkMnyBot|stkMnySld|dayPnl|opnPnlMidMark|opnPnlClrMark|exDivAmt|borrowRate|beta|betaSource|marginUDn|marginUUp|numExecutions|maxExecDttm|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'riskServerCode:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=StockPositionRecordV5' \\\n--data-urlencode 'view=riskServerCode|priAggGroup|secAggGroup|symbolType|tickValue|pointValue|pointCurrency|priceFormat|stkPrc|stkBid|stkAsk|stkMark|stkMarkErrCodes|stkMarkSource|stkOpnMidMark|stkOpnClrMark|stkOpnPosPrv|stkOpnPosClr|stkOpnPos|stkOpnPosSrc|shBot|shSld|shSldShrt|shBotHdg|shSldHdg|shBotTrh|shSldTrh|shBotOpn|shSldOpn|shBotTrd|shSldTrd|stkMnyBot|stkMnySld|dayPnl|opnPnlMidMark|opnPnlClrMark|exDivAmt|borrowRate|beta|betaSource|marginUDn|marginUUp|numExecutions|maxExecDttm|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=riskServerCode:ASC'\n"})})})]}),"\n",(0,n.jsx)(s.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,n.jsxs)(i.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'StockPositionRecordV5\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'riskServerCode|priAggGroup|secAggGroup|symbolType|tickValue|pointValue|pointCurrency|priceFormat|stkPrc|stkBid|stkAsk|stkMark|stkMarkErrCodes|stkMarkSource|stkOpnMidMark|stkOpnClrMark|stkOpnPosPrv|stkOpnPosClr|stkOpnPos|stkOpnPosSrc|shBot|shSld|shSldShrt|shBotHdg|shSldHdg|shBotTrh|shSldTrh|shBotOpn|shSldOpn|shBotTrd|shSldTrd|stkMnyBot|stkMnySld|dayPnl|opnPnlMidMark|opnPnlClrMark|exDivAmt|borrowRate|beta|betaSource|marginUDn|marginUUp|numExecutions|maxExecDttm|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'symbolType|pointCurrency|priceFormat|stkMarkSource|stkOpnPosSrc|betaSource\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=StockPositionRecordV5' \\\n--data-urlencode 'measure=riskServerCode|priAggGroup|secAggGroup|symbolType|tickValue|pointValue|pointCurrency|priceFormat|stkPrc|stkBid|stkAsk|stkMark|stkMarkErrCodes|stkMarkSource|stkOpnMidMark|stkOpnClrMark|stkOpnPosPrv|stkOpnPosClr|stkOpnPos|stkOpnPosSrc|shBot|shSld|shSldShrt|shBotHdg|shSldHdg|shBotTrh|shSldTrh|shBotOpn|shSldOpn|shBotTrd|shSldTrd|stkMnyBot|stkMnySld|dayPnl|opnPnlMidMark|opnPnlClrMark|exDivAmt|borrowRate|beta|betaSource|marginUDn|marginUUp|numExecutions|maxExecDttm|timestamp' \\\n--data-urlencode 'group=symbolType|pointCurrency|priceFormat|stkMarkSource|stkOpnPosSrc|betaSource' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,n.jsx)(s.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,n.jsxs)(i.Z,{children:[(0,n.jsx)(a.Z,{value:"Python",label:"Python",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'StockPositionRecordV5\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(a.Z,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=StockPositionRecordV5' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function x(e={}){let{wrapper:s}={...(0,d.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},9641:function(e,s,r){r.d(s,{Z:()=>d});var t=r("52676");r("75271");var n=r("54461");function d(e){let{children:s,hidden:r,className:d}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,n.Z)("tabItem_SSzl",d),hidden:r,children:s})}},71386:function(e,s,r){r.d(s,{Z:()=>k});var t=r("52676"),n=r("75271"),d=r("54461"),i=r("52289"),a=r("3225"),l=r("42834"),o=r("40578"),c=r("35834"),h=r("79616");function u(e){return n.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||n.isValidElement(e)&&function(e){let{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function x(e){let{value:s,tabValues:r}=e;return r.some(e=>e.value===s)}var p=r("44537");function j(e){let{className:s,block:r,selectedValue:n,selectValue:a,tabValues:l}=e,o=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),h=e=>{let s=e.currentTarget,r=l[o.indexOf(s)].value;r!==n&&(c(s),a(r))},u=e=>{let s=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let r=o.indexOf(e.currentTarget)+1;s=o[r]??o[0];break}case"ArrowLeft":{let r=o.indexOf(e.currentTarget)-1;s=o[r]??o[o.length-1]}}s?.focus()};return(0,t.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":r},s),children:l.map(e=>{let{value:s,label:r,attributes:i}=e;return(0,t.jsx)("li",{role:"tab",tabIndex:n===s?0:-1,"aria-selected":n===s,ref:e=>o.push(e),onKeyDown:u,onClick:h,...i,className:(0,d.Z)("tabs__item","tabItem_aitt",i?.className,{"tabs__item--active":n===s}),children:r??s},s)})})}function m(e){let{lazy:s,children:r,selectedValue:i}=e,a=(Array.isArray(r)?r:[r]).filter(Boolean);if(s){let e=a.find(e=>e.props.value===i);return e?(0,n.cloneElement)(e,{className:(0,d.Z)("margin-top--md",e.props.className)}):null}return(0,t.jsx)("div",{className:"margin-top--md",children:a.map((e,s)=>(0,n.cloneElement)(e,{key:s,hidden:e.props.value!==i}))})}function g(e){let s=function(e){let{defaultValue:s,queryString:r=!1,groupId:t}=e,d=function(e){let{values:s,children:r}=e;return(0,n.useMemo)(()=>{let e=s??u(r).map(e=>{let{props:{value:s,label:r,attributes:t,default:n}}=e;return{value:s,label:r,attributes:t,default:n}});return!function(e){let s=(0,c.lx)(e,(e,s)=>e.value===s.value);if(s.length>0)throw Error(`Docusaurus error: Duplicate values "${s.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[s,r])}(e),[i,p]=(0,n.useState)(()=>(function(e){let{defaultValue:s,tabValues:r}=e;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!x({value:s,tabValues:r}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${r.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}let t=r.find(e=>e.default)??r[0];if(!t)throw Error("Unexpected error: 0 tabValues");return t.value})({defaultValue:s,tabValues:d})),[j,m]=function(e){let{queryString:s=!1,groupId:r}=e,t=(0,a.k6)(),d=function(e){let{queryString:s=!1,groupId:r}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!r)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:s,groupId:r});return[(0,o._X)(d),(0,n.useCallback)(e=>{if(!d)return;let s=new URLSearchParams(t.location.search);s.set(d,e),t.replace({...t.location,search:s.toString()})},[d,t])]}({queryString:r,groupId:t}),[g,k]=function(e){let{groupId:s}=e,r=s?`docusaurus.tab.${s}`:null,[t,d]=(0,h.Nk)(r);return[t,(0,n.useCallback)(e=>{r&&d.set(e)},[r,d])]}({groupId:t}),y=(()=>{let e=j??g;return x({value:e,tabValues:d})?e:null})();return(0,l.Z)(()=>{y&&p(y)},[y]),{selectedValue:i,selectValue:(0,n.useCallback)(e=>{if(!x({value:e,tabValues:d}))throw Error(`Can't select invalid tab value=${e}`);p(e),m(e),k(e)},[m,k,d]),tabValues:d}}(e);return(0,t.jsxs)("div",{className:(0,d.Z)("tabs-container","tabList_ArS0"),children:[(0,t.jsx)(j,{...s,...e}),(0,t.jsx)(m,{...s,...e})]})}function k(e){let s=(0,p.Z)();return(0,t.jsx)(g,{...e,children:u(e.children)},String(s))}},91503:function(e,s,r){r.d(s,{Z:function(){return a},a:function(){return i}});var t=r(75271);let n={},d=t.createContext(n);function i(e){let s=t.useContext(d);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(d.Provider,{value:s},e.children)}}}]);