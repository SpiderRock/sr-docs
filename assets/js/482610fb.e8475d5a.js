"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[76012],{98291:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var n=r(74848),l=r(28453),s=r(11470),d=r(19365);const a={title:"SpdrAutoHedgeState"},i="Schema: SpdrAutoHedgeState (ID: 5300)",c={id:"MessageSchemas/Schema/Topics/strategy-autohedge/SpdrAutoHedgeState",title:"SpdrAutoHedgeState",description:"SpdrAutoHedgeState records are published by autohedge servers and describe the current state of an autohedge controller that is managing RiskGroup autohedge orders.",source:"@site/versioned_docs/version-8.5.1.3/MessageSchemas/Schema/Topics/5290-strategy-autohedge/SpdrAutoHedgeState.md",sourceDirName:"MessageSchemas/Schema/Topics/5290-strategy-autohedge",slug:"/MessageSchemas/Schema/Topics/strategy-autohedge/SpdrAutoHedgeState",permalink:"/docs/8.5.1.3/MessageSchemas/Schema/Topics/strategy-autohedge/SpdrAutoHedgeState",draft:!1,unlisted:!1,tags:[],version:"8.5.1.3",frontMatter:{title:"SpdrAutoHedgeState"},sidebar:"messageSchemasSidebar",previous:{title:"SpdrAutoHedgeControl",permalink:"/docs/8.5.1.3/MessageSchemas/Schema/Topics/strategy-autohedge/SpdrAutoHedgeControl"},next:{title:"5355-strategy-legger",permalink:"/docs/8.5.1.3/MessageSchemas/Schema/Topics/strategy-legger/"}},o={},h=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function u(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.h1,{id:"schema-spdrautohedgestate-id-5300",children:["Schema: SpdrAutoHedgeState ",(0,n.jsx)("span",{className:"small-text",children:"(ID: 5300)"})]}),"\n",(0,n.jsx)(t.p,{children:"SpdrAutoHedgeState records are published by autohedge servers and describe the current state of an autohedge controller that is managing RiskGroup autohedge orders."}),"\n",(0,n.jsx)(t.h3,{id:"metadata",children:"METADATA"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Attribute"}),(0,n.jsx)(t.th,{children:"Value"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Topic"}),(0,n.jsx)(t.td,{children:"5290-strategy-autohedge"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"MLink Token"}),(0,n.jsx)(t.td,{children:"ClientTrading"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"SRSE Product"}),(0,n.jsx)(t.td,{children:"SRTrade"})]})]})]}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Note:"})," The symbol ",(0,n.jsx)(t.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"body",children:"BODY"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"#"}),(0,n.jsx)(t.th,{children:"Field"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Comment"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"10="}),(0,n.jsx)(t.td,{children:"accnt"}),(0,n.jsx)(t.td,{children:"string(16)"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"11="}),(0,n.jsx)(t.td,{children:"riskGroupId"}),(0,n.jsx)(t.td,{children:"long"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"12="}),(0,n.jsx)(t.td,{children:"hedgeSecKey"}),(0,n.jsx)(t.td,{children:"ExpiryKey"}),(0,n.jsx)(t.td,{children:"Execution Hedge SecKey (from SpdrAutoHedgeControl.targetSecKey)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13="}),(0,n.jsx)(t.td,{children:"hedgeSecType"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,n.jsx)(t.td,{children:"Execution Hedge SecType (from SpdrAutoHedgeControl.targetSecType) [can be None]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"14="}),(0,n.jsx)(t.td,{children:"clientFirm"}),(0,n.jsx)(t.td,{children:"string(16)"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"100"}),(0,n.jsx)(t.td,{children:"groupingCode"}),(0,n.jsx)(t.td,{children:"long"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"106"}),(0,n.jsx)(t.td,{children:"ticker"}),(0,n.jsx)(t.td,{children:"TickerKey"}),(0,n.jsx)(t.td,{children:"ticker group (eg. @ES, @ZN)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"109"}),(0,n.jsx)(t.td,{children:"securityDesc"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"112"}),(0,n.jsx)(t.td,{children:"ssaleFlag"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/ShortSaleFlag",children:"enum : ShortSaleFlag"})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"263"}),(0,n.jsx)(t.td,{children:"positionType"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/PositionType",children:"enum : PositionType"})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"115"}),(0,n.jsx)(t.td,{children:"hedgeState"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/HedgeGroupState",children:"enum : HedgeGroupState"})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"118"}),(0,n.jsx)(t.td,{children:"hedgeText"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"121"}),(0,n.jsx)(t.td,{children:"uPrc"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"hedge target underlier price"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"124"}),(0,n.jsx)(t.td,{children:"isDeltaMixed"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"127"}),(0,n.jsx)(t.td,{children:"accumulatorError"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"130"}),(0,n.jsx)(t.td,{children:"grpDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"option delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"133"}),(0,n.jsx)(t.td,{children:"grpDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"136"}),(0,n.jsx)(t.td,{children:"grpDDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"option $delta bot (using uMid at time of option fill)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"139"}),(0,n.jsx)(t.td,{children:"grpDDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"142"}),(0,n.jsx)(t.td,{children:"lastGrpFillDttm"}),(0,n.jsx)(t.td,{children:"DateTime"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"145"}),(0,n.jsx)(t.td,{children:"ctrlDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"hedge target delta (units) bot"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"148"}),(0,n.jsx)(t.td,{children:"ctrlDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"151"}),(0,n.jsx)(t.td,{children:"ctrlDDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"hedge target $delta bot (using actual fill price)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"154"}),(0,n.jsx)(t.td,{children:"ctrlDDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"157"}),(0,n.jsx)(t.td,{children:"lastCtrlFillDttm"}),(0,n.jsx)(t.td,{children:"DateTime"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"160"}),(0,n.jsx)(t.td,{children:"absOptCn"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:"total number of option contracts executed in this hedge group"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"163"}),(0,n.jsx)(t.td,{children:"netDelta"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"grpDeltaBot - grpDeltaSld + ctrlDeltaBot - ctrlDeltaSld"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"166"}),(0,n.jsx)(t.td,{children:"netDDelta"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"grpDDeltaBot - grpDDeltaSld + ctrlDDeltaBot - ctrlDDeltaSld"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"169"}),(0,n.jsx)(t.td,{children:"openHedgeTime"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{children:"size weighted average time (in seconds) hedge risk has been open (executions to fills)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"172"}),(0,n.jsx)(t.td,{children:"hedgeTargetVol"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{children:"implied / expected today (annualized) volatility for hedge target"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"175"}),(0,n.jsx)(t.td,{children:"expectedPrcRange"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{children:"SQRT(avgHedgeTime x hedgeTargetVol) cone"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"178"}),(0,n.jsx)(t.td,{children:"opnDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"open risk delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"181"}),(0,n.jsx)(t.td,{children:"opnDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"184"}),(0,n.jsx)(t.td,{children:"opnDDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"open risk $delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"187"}),(0,n.jsx)(t.td,{children:"opnDDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"190"}),(0,n.jsx)(t.td,{children:"clsDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"close risk delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"193"}),(0,n.jsx)(t.td,{children:"clsDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"196"}),(0,n.jsx)(t.td,{children:"clsDDeltaBot"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"close risk $delta bot (in ctrlDe units)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"199"}),(0,n.jsx)(t.td,{children:"clsDDeltaSld"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"202"}),(0,n.jsx)(t.td,{children:"slippagePnL"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{children:"opnDeltaBot * (clsDeltaPrcSld - opnDeltaPrcBot) + opnDeltaSld * (opnDeltaPrcSld - clsDeltaPrcBot)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"205"}),(0,n.jsx)(t.td,{children:"slippageUnitPnL"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{children:"slippagePnL / (grpDeltaBot + grpDeltaSld) [pnl / unit (share or fc)]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"208"}),(0,n.jsx)(t.td,{children:"slippageNormPnL"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{children:"slippageUnitPnL / expectedPrcRange"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"211"}),(0,n.jsx)(t.td,{children:"minDDeltaBand"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"214"}),(0,n.jsx)(t.td,{children:"maxDDeltaBand"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"217"}),(0,n.jsx)(t.td,{children:"bParentNumber"}),(0,n.jsx)(t.td,{children:"long"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"220"}),(0,n.jsx)(t.td,{children:"bActiveSize"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"223"}),(0,n.jsx)(t.td,{children:"bBrkrStatus"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"226"}),(0,n.jsx)(t.td,{children:"bBrkrError"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"229"}),(0,n.jsx)(t.td,{children:"sParentNumber"}),(0,n.jsx)(t.td,{children:"long"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"232"}),(0,n.jsx)(t.td,{children:"sActiveSize"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"235"}),(0,n.jsx)(t.td,{children:"sBrkrStatus"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"238"}),(0,n.jsx)(t.td,{children:"sBrkrError"}),(0,n.jsx)(t.td,{children:"text1"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"241"}),(0,n.jsx)(t.td,{children:"ddMult"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"244"}),(0,n.jsx)(t.td,{children:"underliersPerCn"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:"future underliers per contract"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"247"}),(0,n.jsx)(t.td,{children:"underlierType"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/UnderlierType",children:"enum : UnderlierType"})}),(0,n.jsx)(t.td,{children:"type of underlier (affects $greek calculations)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"250"}),(0,n.jsx)(t.td,{children:"pointValue"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"$NLV value of a single point change in display premium (hedge target)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"253"}),(0,n.jsx)(t.td,{children:"pointCurrency"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"256"}),(0,n.jsx)(t.td,{children:"liveHedgeMark"}),(0,n.jsx)(t.td,{children:"double"}),(0,n.jsx)(t.td,{children:"hedgeSecKey live mark (mid-market) [zero in SRSE]"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"259"}),(0,n.jsx)(t.td,{children:"updtReason"}),(0,n.jsx)(t.td,{children:"string(20)"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"262"}),(0,n.jsx)(t.td,{children:"timestamp"}),(0,n.jsx)(t.td,{children:"DateTime"}),(0,n.jsx)(t.td,{children:"SR system timestamp"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,n.jsxs)(s.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'SpdrAutoHedgeState'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=SpdrAutoHedgeState'\n\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,n.jsxs)(s.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAutoHedgeState\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'groupingCode|ticker|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=SpdrAutoHedgeState' \\\n--data-urlencode 'view=groupingCode|ticker|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,n.jsxs)(s.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAutoHedgeState\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'groupingCode|ticker|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'groupingCode:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=SpdrAutoHedgeState' \\\n--data-urlencode 'view=groupingCode|ticker|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp' \\\n--data-urlencode 'where=accnt:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=groupingCode:ASC'\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,n.jsxs)(s.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAutoHedgeState\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'groupingCode|ticker|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'ssaleFlag|positionType|hedgeState|isDeltaMixed|underlierType|pointCurrency\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=SpdrAutoHedgeState' \\\n--data-urlencode 'measure=groupingCode|ticker|securityDesc|ssaleFlag|positionType|hedgeState|hedgeText|uPrc|isDeltaMixed|accumulatorError|grpDeltaBot|grpDeltaSld|grpDDeltaBot|grpDDeltaSld|lastGrpFillDttm|ctrlDeltaBot|ctrlDeltaSld|ctrlDDeltaBot|ctrlDDeltaSld|lastCtrlFillDttm|absOptCn|netDelta|netDDelta|openHedgeTime|hedgeTargetVol|expectedPrcRange|opnDeltaBot|opnDeltaSld|opnDDeltaBot|opnDDeltaSld|clsDeltaBot|clsDeltaSld|clsDDeltaBot|clsDDeltaSld|slippagePnL|slippageUnitPnL|slippageNormPnL|minDDeltaBand|maxDDeltaBand|bParentNumber|bActiveSize|bBrkrStatus|bBrkrError|sParentNumber|sActiveSize|sBrkrStatus|sBrkrError|ddMult|underliersPerCn|underlierType|pointValue|pointCurrency|liveHedgeMark|updtReason|timestamp' \\\n--data-urlencode 'group=ssaleFlag|positionType|hedgeState|isDeltaMixed|underlierType|pointCurrency' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,n.jsxs)(s.A,{children:[(0,n.jsx)(d.A,{value:"Python",label:"Python",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'SpdrAutoHedgeState\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'accnt:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,n.jsx)(d.A,{value:"cUrl",label:"cUrl",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=SpdrAutoHedgeState' \\\n--data-urlencode 'where=accnt:eq:ExampleString'\n"})})})]})]})}function p(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},19365:(e,t,r)=>{r.d(t,{A:()=>d});r(96540);var n=r(34164);const l={tabItem:"tabItem_Ymn6"};var s=r(74848);function d(e){let{children:t,hidden:r,className:d}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,n.A)(l.tabItem,d),hidden:r,children:t})}},11470:(e,t,r)=>{r.d(t,{A:()=>v});var n=r(96540),l=r(34164),s=r(23104),d=r(56347),a=r(205),i=r(57485),c=r(31682),o=r(70679);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:l}}=e;return{value:t,label:r,attributes:n,default:l}}))}(r);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function p(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function x(e){let{queryString:t=!1,groupId:r}=e;const l=(0,d.W6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,i.aZ)(s),(0,n.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(l.location.search);t.set(s,e),l.replace({...l.location,search:t.toString()})}),[s,l])]}function g(e){const{defaultValue:t,queryString:r=!1,groupId:l}=e,s=u(e),[d,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[c,h]=x({queryString:r,groupId:l}),[g,j]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[l,s]=(0,o.Dv)(r);return[l,(0,n.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:l}),m=(()=>{const e=c??g;return p({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{m&&i(m)}),[m]);return{selectedValue:d,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),h(e),j(e)}),[h,j,s]),tabValues:s}}var j=r(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var D=r(74848);function S(e){let{className:t,block:r,selectedValue:n,selectValue:d,tabValues:a}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),o=e=>{const t=e.currentTarget,r=i.indexOf(t),l=a[r].value;l!==n&&(c(t),d(l))},h=e=>{let t=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;t=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;t=i[r]??i[i.length-1];break}}t?.focus()};return(0,D.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":r},t),children:a.map((e=>{let{value:t,label:r,attributes:s}=e;return(0,D.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>i.push(e),onKeyDown:h,onClick:o,...s,className:(0,l.A)("tabs__item",m.tabItem,s?.className,{"tabs__item--active":n===t}),children:r??t},t)}))})}function b(e){let{lazy:t,children:r,selectedValue:l}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===l));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,D.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==l})))})}function y(e){const t=g(e);return(0,D.jsxs)("div",{className:(0,l.A)("tabs-container",m.tabList),children:[(0,D.jsx)(S,{...t,...e}),(0,D.jsx)(b,{...t,...e})]})}function v(e){const t=(0,j.A)();return(0,D.jsx)(y,{...e,children:h(e.children)},String(t))}},28453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>a});var n=r(96540);const l={},s=n.createContext(l);function d(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);