"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8116],{97533:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>a,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var d=t(74848),n=t(28453);const r={title:"CCodeDefinition"},s="Schema: CCodeDefinition (ID: 4335)",c={id:"MessageSchemas/Schema/Topics/product-definition/CCodeDefinition",title:"CCodeDefinition",description:"Commodity code (product code) definitions for all futures.  Also maps future ccodes to SpiderRock tickers. Information is sourced from listing exchange product definitions.This table also contains definitions for exchange and user-defined spreads including spreads used as option underliers. SpiderRock typically uses a compact form of the exchange (spread) product ID as the ccode for these products if there is no natural (human-readable) exchange spread ticker issued for the spread.  Note that the full spread definition can be found in the ProductDefinition and human-readable version in the description field below.Note that SpiderRock tickers below are synthetic and are created for organizational purposes only.  SpiderRock synthetic tickers typically begin with a '@' character.",source:"@site/docs/MessageSchemas/Schema/Topics/4335-product-definition/CCodeDefinition.md",sourceDirName:"MessageSchemas/Schema/Topics/4335-product-definition",slug:"/MessageSchemas/Schema/Topics/product-definition/CCodeDefinition",permalink:"/docs/MessageSchemas/Schema/Topics/product-definition/CCodeDefinition",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"CCodeDefinition"},sidebar:"messageSchemasSidebar",previous:{title:"4335-product-definition",permalink:"/docs/MessageSchemas/Schema/Topics/product-definition/"},next:{title:"IndustryDefinition",permalink:"/docs/MessageSchemas/Schema/Topics/product-definition/IndustryDefinition"}},l={},h=[{value:"METADATA",id:"metadata",level:3},{value:"PRIMARY KEY",id:"primary-key",level:3},{value:"BODY",id:"body",level:3}];function o(e){const i={a:"a",h1:"h1",h3:"h3",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(i.h1,{id:"schema-ccodedefinition-id-4335",children:["Schema: CCodeDefinition ",(0,d.jsx)("span",{className:"small-text",children:"(ID: 4335)"})]}),"\n",(0,d.jsxs)(i.p,{children:["Commodity code (product code) definitions for all futures.  Also maps future ccodes to SpiderRock tickers. Information is sourced from listing exchange product definitions.",(0,d.jsx)("br",{}),(0,d.jsx)("br",{}),"This table also contains definitions for exchange and user-defined spreads including spreads used as option underliers. SpiderRock typically uses a compact form of the exchange (spread) product ID as the ccode for these products if there is no natural (human-readable) exchange spread ticker issued for the spread.  Note that the full spread definition can be found in the ProductDefinition and human-readable version in the description field below.",(0,d.jsx)("br",{}),(0,d.jsx)("br",{}),"Note that SpiderRock tickers below are synthetic and are created for organizational purposes only.  SpiderRock synthetic tickers typically begin with a '@' character."]}),"\n",(0,d.jsxs)("div",{className:"single-message-meta",children:[(0,d.jsx)(i.h3,{id:"metadata",children:"METADATA"}),(0,d.jsxs)(i.table,{children:[(0,d.jsx)(i.thead,{children:(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.th,{children:"Attribute"}),(0,d.jsx)(i.th,{children:"Value"})]})}),(0,d.jsxs)(i.tbody,{children:[(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"Topic"}),(0,d.jsx)(i.td,{children:"4335-product-definition"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"MLink Token"}),(0,d.jsx)(i.td,{children:"FutureDefinition"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"SRSE Product"}),(0,d.jsx)(i.td,{children:"SRLive, SRAnalytics"})]})]})]})]}),"\n",(0,d.jsxs)("div",{className:"single-message-primarykey",children:[(0,d.jsx)(i.h3,{id:"primary-key",children:"PRIMARY KEY"}),(0,d.jsxs)(i.table,{children:[(0,d.jsx)(i.thead,{children:(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.th,{children:"#"}),(0,d.jsx)(i.th,{children:"Field"}),(0,d.jsx)(i.th,{children:"Type"}),(0,d.jsx)(i.th,{children:"Comment"})]})}),(0,d.jsx)(i.tbody,{children:(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"10"}),(0,d.jsx)(i.td,{children:"ccode"}),(0,d.jsx)(i.td,{children:"TickerKey"}),(0,d.jsx)(i.td,{})]})})]})]}),"\n",(0,d.jsxs)("div",{className:"single-message-body",children:[(0,d.jsx)(i.h3,{id:"body",children:"BODY"}),(0,d.jsxs)(i.table,{children:[(0,d.jsx)(i.thead,{children:(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.th,{children:"#"}),(0,d.jsx)(i.th,{children:"Field"}),(0,d.jsx)(i.th,{children:"Type"}),(0,d.jsx)(i.th,{children:"Comment"})]})}),(0,d.jsxs)(i.tbody,{children:[(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"100"}),(0,d.jsx)(i.td,{children:"futexch"}),(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"../../../Enums/FutExch",children:"enum : FutExch"})}),(0,d.jsx)(i.td,{children:"listing exchange"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"103"}),(0,d.jsx)(i.td,{children:"ticker"}),(0,d.jsx)(i.td,{children:"TickerKey"}),(0,d.jsx)(i.td,{children:"master underlying"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"106"}),(0,d.jsx)(i.td,{children:"settleTime"}),(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"../../../Enums/SettleTime",children:"enum : SettleTime"})}),(0,d.jsx)(i.td,{children:"Settlement time: None; PM; AM"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"109"}),(0,d.jsx)(i.td,{children:"positionLimit"}),(0,d.jsx)(i.td,{children:"int"}),(0,d.jsx)(i.td,{children:"max contract limit"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"112"}),(0,d.jsx)(i.td,{children:"tickValue"}),(0,d.jsx)(i.td,{children:"float"}),(0,d.jsx)(i.td,{children:"$NLV value of a single tick change in display premium\t(pointValue = tickValue / tickSize)"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"115"}),(0,d.jsx)(i.td,{children:"pointValue"}),(0,d.jsx)(i.td,{children:"float"}),(0,d.jsx)(i.td,{children:"$NLV value of a single point change in display premium (pointValue = tickValue / tickSize)"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"118"}),(0,d.jsx)(i.td,{children:"pointCurrency"}),(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,d.jsx)(i.td,{})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"121"}),(0,d.jsx)(i.td,{children:"priceScaling"}),(0,d.jsx)(i.td,{children:"float"}),(0,d.jsx)(i.td,{children:"underlying price scale factor - products where the underlying quotes in cents will have 0.01"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"124"}),(0,d.jsx)(i.td,{children:"underliersPerCn"}),(0,d.jsx)(i.td,{children:"int"}),(0,d.jsx)(i.td,{children:"shares, bond, or index units underlying the future (contract size)"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"127"}),(0,d.jsx)(i.td,{children:"underlierType"}),(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"../../../Enums/UnderlierType",children:"enum : UnderlierType"})}),(0,d.jsx)(i.td,{children:"Underlying type; None; Equity; Other; FX"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"130"}),(0,d.jsx)(i.td,{children:"clearingCode"}),(0,d.jsx)(i.td,{children:"string(6)"}),(0,d.jsx)(i.td,{children:"GMI/Clearing code"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"164"}),(0,d.jsx)(i.td,{children:"ricRoot"}),(0,d.jsx)(i.td,{children:"string(6)"}),(0,d.jsx)(i.td,{children:"RIC Root"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"136"}),(0,d.jsx)(i.td,{children:"bbgRoot"}),(0,d.jsx)(i.td,{children:"string(6)"}),(0,d.jsx)(i.td,{children:"Bloomberg root"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"139"}),(0,d.jsx)(i.td,{children:"bbgGroup"}),(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"../../../Enums/YellowKey",children:"enum : YellowKey"})}),(0,d.jsx)(i.td,{children:"Bloomberg Yellow Key"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"142"}),(0,d.jsx)(i.td,{children:"gmiExchange"}),(0,d.jsx)(i.td,{children:"string(3)"}),(0,d.jsx)(i.td,{children:"GMI (Sungard) exchange code"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"145"}),(0,d.jsx)(i.td,{children:"gmiProduct"}),(0,d.jsx)(i.td,{children:"string(3)"}),(0,d.jsx)(i.td,{children:"GMI (Sungard) product code"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"148"}),(0,d.jsx)(i.td,{children:"gmiSubType"}),(0,d.jsx)(i.td,{children:"string(3)"}),(0,d.jsx)(i.td,{children:"GMI (Sungard) subtype code"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"151"}),(0,d.jsx)(i.td,{children:"displayPriceScaling"}),(0,d.jsx)(i.td,{children:"float"}),(0,d.jsx)(i.td,{children:"internal display price scale factor override"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"154"}),(0,d.jsx)(i.td,{children:"strikeScaling"}),(0,d.jsx)(i.td,{children:"float"}),(0,d.jsx)(i.td,{children:"internal strike price scale factor override"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"157"}),(0,d.jsx)(i.td,{children:"description"}),(0,d.jsx)(i.td,{children:"string(48)"}),(0,d.jsx)(i.td,{children:"product description"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"160"}),(0,d.jsx)(i.td,{children:"marketCenter"}),(0,d.jsx)(i.td,{children:"string(48)"}),(0,d.jsx)(i.td,{children:'market center, eg "ICE Market Type", "CME MarketGroup"'})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"163"}),(0,d.jsx)(i.td,{children:"timestamp"}),(0,d.jsx)(i.td,{children:"DateTime"}),(0,d.jsx)(i.td,{})]})]})]})]})]})}function a(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>s,x:()=>c});var d=t(96540);const n={},r=d.createContext(n);function s(e){const i=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),d.createElement(r.Provider,{value:i},e.children)}}}]);