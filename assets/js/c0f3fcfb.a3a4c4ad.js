"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([["28132"],{60484:function(e,t,r){r.r(t),r.d(t,{default:()=>p,frontMatter:()=>a,metadata:()=>n,assets:()=>o,toc:()=>u,contentTitle:()=>l});var n=JSON.parse('{"id":"MessageSchemas/Schema/Topics/product-definition/ProductDefinitionV2","title":"ProductDefinitionV2","description":"SpiderRock normalized exchange product definitions.  Includes future, option, and spread definitions from a number of exchanges.  TickerDefinitions, RootDefinitions and CCodeDefinitions are consistent with these records.","source":"@site/versioned_docs/version-8.5.5.1/MessageSchemas/Schema/Topics/4335-product-definition/ProductDefinitionV2.md","sourceDirName":"MessageSchemas/Schema/Topics/4335-product-definition","slug":"/MessageSchemas/Schema/Topics/product-definition/ProductDefinitionV2","permalink":"/docs/8.5.5.1/MessageSchemas/Schema/Topics/product-definition/ProductDefinitionV2","draft":false,"unlisted":false,"tags":[],"version":"8.5.5.1","frontMatter":{"title":"ProductDefinitionV2"},"sidebar":"messageSchemasSidebar","previous":{"title":"OptExpiryDefinition","permalink":"/docs/8.5.5.1/MessageSchemas/Schema/Topics/product-definition/OptExpiryDefinition"},"next":{"title":"RegionalInstrumentId","permalink":"/docs/8.5.5.1/MessageSchemas/Schema/Topics/product-definition/RegionalInstrumentId"}}'),i=r("52676"),s=r("91503"),d=r("71386"),c=r("9641");let a={title:"ProductDefinitionV2"},l="Schema: ProductDefinitionV2 (ID: 4360)",o={},u=[{value:"METADATA",id:"metadata",level:3},{value:"BODY",id:"body",level:3},{value:"REPEATING FIELDS",id:"repeating-fields",level:3},{value:"Get Schema API Call",id:"get-schema-api-call",level:3},{value:"Get Msg API Call",id:"get-msg-api-call",level:3},{value:"Get Msgs API Call",id:"get-msgs-api-call",level:3},{value:"Get Aggregate API Call",id:"get-aggregate-api-call",level:3},{value:"Get Count API Call",id:"get-count-api-call",level:3}];function h(e){let t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"schema-productdefinitionv2-id-4360",children:["Schema: ProductDefinitionV2 ",(0,i.jsx)("span",{className:"small-text",children:"(ID: 4360)"})]})}),"\n",(0,i.jsx)(t.p,{children:"SpiderRock normalized exchange product definitions.  Includes future, option, and spread definitions from a number of exchanges.  TickerDefinitions, RootDefinitions and CCodeDefinitions are consistent with these records."}),"\n",(0,i.jsx)(t.h3,{id:"metadata",children:"METADATA"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Attribute"}),(0,i.jsx)(t.th,{children:"Value"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Topic"}),(0,i.jsx)(t.td,{children:"4335-product-definition"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"MLink Token"}),(0,i.jsx)(t.td,{children:"FutureDefinition"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SRSE Product"}),(0,i.jsx)(t.td,{children:"SRLive, SRAnalytics"})]})]})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Note:"})," The symbol ",(0,i.jsx)(t.code,{children:"="})," next to a field number indicates that it is a primary key."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"body",children:"BODY"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"#"}),(0,i.jsx)(t.th,{children:"Field"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default Value"}),(0,i.jsx)(t.th,{children:"Comment"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"10="}),(0,i.jsx)(t.td,{children:"secKey"}),(0,i.jsx)(t.td,{children:"OptionKey"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"SR Security Key [can be partially filled in (look at secType)]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"11="}),(0,i.jsx)(t.td,{children:"secType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Security Type [Stock, Future, Option]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"248"}),(0,i.jsx)(t.td,{children:"securityID"}),(0,i.jsx)(t.td,{children:"text1"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"unique exchange id (exch assigned)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"103"}),(0,i.jsx)(t.td,{children:"ticker"}),(0,i.jsx)(t.td,{children:"TickerKey"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"master underlier"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"251"}),(0,i.jsx)(t.td,{children:"SRspreadID"}),(0,i.jsx)(t.td,{children:"long"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"106"}),(0,i.jsx)(t.td,{children:"productClass"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ProductClass",children:"enum : ProductClass"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"109"}),(0,i.jsx)(t.td,{children:"underlierID"}),(0,i.jsx)(t.td,{children:"long"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"underlier product id (option only) [securityID of undKey/undType product]"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"112"}),(0,i.jsx)(t.td,{children:"undKey"}),(0,i.jsx)(t.td,{children:"ExpiryKey"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"SR Underlier Security Key [can be partially filled in (look at undType)] (option only)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"115"}),(0,i.jsx)(t.td,{children:"undType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Underlier Security Type [Stock, Future] (option only)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"118"}),(0,i.jsx)(t.td,{children:"productGroup"}),(0,i.jsx)(t.td,{children:"string(6)"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Underlying product code.  I.E. All GE (Eurodollar) spreads, options, futures will be in the same productGroup - This is the Asset field from the SecurityDefinition message"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"121"}),(0,i.jsx)(t.td,{children:"securityGroup"}),(0,i.jsx)(t.td,{children:"string(6)"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Exchange specific code for a group of related securities that are all affected by market events.  I.E. All E-mini weekly options (EW) - This is SecurityGroup field from the SecurityDefinition messages"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"124"}),(0,i.jsx)(t.td,{children:"marketSegmentID"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Exchange specific market segment identifier"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"249"}),(0,i.jsx)(t.td,{children:"ricCode"}),(0,i.jsx)(t.td,{children:"string(32)"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Full RIC Code - only provided for non-user defined instruments"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"250"}),(0,i.jsx)(t.td,{children:"securityDesc"}),(0,i.jsx)(t.td,{children:"text1"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"full exchange symbol"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"130"}),(0,i.jsx)(t.td,{children:"exchange"}),(0,i.jsx)(t.td,{children:"string(8)"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"listing exchange"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"133"}),(0,i.jsx)(t.td,{children:"productType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ProductType",children:"enum : ProductType"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"136"}),(0,i.jsx)(t.td,{children:"productTerm"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ProductTerm",children:"enum : ProductTerm"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"139"}),(0,i.jsx)(t.td,{children:"productIndexType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ProductIndexType",children:"enum : ProductIndexType"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"142"}),(0,i.jsx)(t.td,{children:"productRate"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"145"}),(0,i.jsx)(t.td,{children:"contractSize"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"148"}),(0,i.jsx)(t.td,{children:"contractUnit"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ContractUnit",children:"enum : ContractUnit"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"151"}),(0,i.jsx)(t.td,{children:"priceFormat"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/PriceFormat",children:"enum : PriceFormat"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"154"}),(0,i.jsx)(t.td,{children:"minTickSize"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"157"}),(0,i.jsx)(t.td,{children:"displayFactor"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"160"}),(0,i.jsx)(t.td,{children:"strikeScale"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"manual strike price adjustment multiplier (used for some CME products if set, otherwise displayFactor is used) (okey_xx = strikePrice * manualStrikeScale)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"163"}),(0,i.jsx)(t.td,{children:"minLotSize"}),(0,i.jsx)(t.td,{children:"short"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"minimum lot size"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"166"}),(0,i.jsx)(t.td,{children:"bookDepth"}),(0,i.jsx)(t.td,{children:"short"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"levels in the Globex quote book"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"169"}),(0,i.jsx)(t.td,{children:"impliedBookDepth"}),(0,i.jsx)(t.td,{children:"short"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"levels in the globex implied quote book (0 if no implied depth)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"172"}),(0,i.jsx)(t.td,{children:"impMarketInd"}),(0,i.jsx)(t.td,{children:"short"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"implied market type (0 = no implied, 1 = implied in, 2 = implied out, 3 = implied in & out)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"175"}),(0,i.jsx)(t.td,{children:"minPriceIncrementAmount"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"(depricate) minimum price amount (points per handle)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"178"}),(0,i.jsx)(t.td,{children:"parValue"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"per contract par value"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"181"}),(0,i.jsx)(t.td,{children:"contMultiplier"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"contract deliverable multipler"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"184"}),(0,i.jsx)(t.td,{children:"cabPrice"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"(depricate) cabinet price (minimum closing price for OOM options)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"187"}),(0,i.jsx)(t.td,{children:"tradeCurr"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"190"}),(0,i.jsx)(t.td,{children:"settleCurr"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"193"}),(0,i.jsx)(t.td,{children:"strikeCurr"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/Currency",children:"enum : Currency"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"196"}),(0,i.jsx)(t.td,{children:"expiration"}),(0,i.jsx)(t.td,{children:"DateTime"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"future expiration or option expiration (if product is an option). we use the last TRADING day as the expiration date."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"199"}),(0,i.jsx)(t.td,{children:"maturity"}),(0,i.jsx)(t.td,{children:"DateKey"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"future maturity date or option maturity date.  this is the delivery month."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"202"}),(0,i.jsx)(t.td,{children:"exerciseType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/ExerciseType",children:"enum : ExerciseType"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"(depricate; in RootDefinition) Exercise style"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"205"}),(0,i.jsx)(t.td,{children:"userDefined"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/YesNo",children:"enum : YesNo"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"208"}),(0,i.jsx)(t.td,{children:"decayStartYear"}),(0,i.jsx)(t.td,{children:"short"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"211"}),(0,i.jsx)(t.td,{children:"decayStartMonth"}),(0,i.jsx)(t.td,{children:"byte"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"214"}),(0,i.jsx)(t.td,{children:"decayStartDay"}),(0,i.jsx)(t.td,{children:"byte"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"217"}),(0,i.jsx)(t.td,{children:"decayQty"}),(0,i.jsx)(t.td,{children:"int"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"daily decay quantity"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"220"}),(0,i.jsx)(t.td,{children:"priceRatio"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"price ratio for interest rate intercommodity spreads"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"247"}),(0,i.jsx)(t.td,{children:"timestamp"}),(0,i.jsx)(t.td,{children:"DateTime"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"repeating-fields",children:"REPEATING FIELDS"}),"\n",(0,i.jsx)(t.p,{children:"Legs"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"#"}),(0,i.jsx)(t.th,{children:"Field"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default Value"}),(0,i.jsx)(t.th,{children:"Comment"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"226"}),(0,i.jsx)(t.td,{children:"legID"}),(0,i.jsx)(t.td,{children:"string(24)"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"leg SecurityId (exch assigned)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"229"}),(0,i.jsx)(t.td,{children:"secKey"}),(0,i.jsx)(t.td,{children:"OptionKey"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"232"}),(0,i.jsx)(t.td,{children:"secType"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/SpdrKeyType",children:"enum : SpdrKeyType"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"235"}),(0,i.jsx)(t.td,{children:"side"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"../../../Enums/BuySell",children:"enum : BuySell"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"238"}),(0,i.jsx)(t.td,{children:"ratio"}),(0,i.jsx)(t.td,{children:"ushort"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"241"}),(0,i.jsx)(t.td,{children:"refDelta"}),(0,i.jsx)(t.td,{children:"float"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"244"}),(0,i.jsx)(t.td,{children:"refPrc"}),(0,i.jsx)(t.td,{children:"double"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"get-schema-api-call",children:"Get Schema API Call"}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json'\n\n# Replace with your MLINK API Key\nAPI_KEY = 'XXXX-XXXX-XXXX-XXXX'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = 'ProductDefinitionV2'\n\n# Request Parameters for Get Schema Of The MsgType\nparams = {\n    # Required Parameters\n    \"apiKey\": API_KEY,\n    \"cmd\": 'getschema',\n    \"msgType\": MSG_TYPE, \n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n"})})}),(0,i.jsx)(c.Z,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"\ncurl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getschema' \\\n--data-urlencode 'msgType=ProductDefinitionV2'\n\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"get-msg-api-call",children:"Get Msg API Call"}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'ProductDefinitionV2\'\n\n# Replace with your pkey value for getting the specific message desired\nPKEY = \'ReplaceThisValueForTheQueryToWork\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned. \nVIEW = \'securityID|ticker|SRspreadID|productClass|underlierID|undKey|undType|productGroup|securityGroup|marketSegmentID|ricCode|securityDesc|exchange|productType|productTerm|productIndexType|productRate|contractSize|contractUnit|priceFormat|minTickSize|displayFactor|strikeScale|minLotSize|bookDepth|impliedBookDepth|impMarketInd|minPriceIncrementAmount|parValue|contMultiplier|cabPrice|tradeCurr|settleCurr|strikeCurr|expiration|maturity|exerciseType|userDefined|decayStartYear|decayStartMonth|decayStartDay|decayQty|priceRatio|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:valuse" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'productGroup:eq:ExampleString\'\n\n# Request Parameters for getmsg Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsg\',\n    "pkey": PKEY,\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(c.Z,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsg' \\\n--data-urlencode 'pkey=ReplaceThisValueForTheQueryToWork' \\\n--data-urlencode 'msgType=ProductDefinitionV2' \\\n--data-urlencode 'view=securityID|ticker|SRspreadID|productClass|underlierID|undKey|undType|productGroup|securityGroup|marketSegmentID|ricCode|securityDesc|exchange|productType|productTerm|productIndexType|productRate|contractSize|contractUnit|priceFormat|minTickSize|displayFactor|strikeScale|minLotSize|bookDepth|impliedBookDepth|impMarketInd|minPriceIncrementAmount|parValue|contMultiplier|cabPrice|tradeCurr|settleCurr|strikeCurr|expiration|maturity|exerciseType|userDefined|decayStartYear|decayStartMonth|decayStartDay|decayQty|priceRatio|timestamp' \\\n--data-urlencode 'where=productGroup:eq:ExampleString'\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"get-msgs-api-call",children:"Get Msgs API Call"}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'ProductDefinitionV2\'\n\n# Replace with your desired view. A "|" separated list of views can be provided\n# If no view is provided, all views will be returned\nVIEW = \'securityID|ticker|SRspreadID|productClass|underlierID|undKey|undType|productGroup|securityGroup|marketSegmentID|ricCode|securityDesc|exchange|productType|productTerm|productIndexType|productRate|contractSize|contractUnit|priceFormat|minTickSize|displayFactor|strikeScale|minLotSize|bookDepth|impliedBookDepth|impMarketInd|minPriceIncrementAmount|parValue|contMultiplier|cabPrice|tradeCurr|settleCurr|strikeCurr|expiration|maturity|exerciseType|userDefined|decayStartYear|decayStartMonth|decayStartDay|decayQty|priceRatio|timestamp\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'productGroup:eq:ExampleString\'\n\n# Replace with your desired limit of how many messages you receive. The default limit is 500\nLIMIT = 500\n\n# Order clause eg. "(field1:DESC | field1:ASC | field2:DESC:ABS | field2:ASC:ABS" (default is unordered; default is faster)\nORDER = \'securityID:ASC\'\n\n# Request Parameters for getmsgs Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getmsgs\',\n    "msgType": MSG_TYPE,\n    # Optional Parameters\n    "view": VIEW, \n    "where": WHERE,\n    "limit": LIMIT,\n    "order": ORDER\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(c.Z,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getmsgs' \\\n--data-urlencode 'msgType=ProductDefinitionV2' \\\n--data-urlencode 'view=securityID|ticker|SRspreadID|productClass|underlierID|undKey|undType|productGroup|securityGroup|marketSegmentID|ricCode|securityDesc|exchange|productType|productTerm|productIndexType|productRate|contractSize|contractUnit|priceFormat|minTickSize|displayFactor|strikeScale|minLotSize|bookDepth|impliedBookDepth|impMarketInd|minPriceIncrementAmount|parValue|contMultiplier|cabPrice|tradeCurr|settleCurr|strikeCurr|expiration|maturity|exerciseType|userDefined|decayStartYear|decayStartMonth|decayStartDay|decayQty|priceRatio|timestamp' \\\n--data-urlencode 'where=productGroup:eq:ExampleString' \\\n--data-urlencode 'limit=500' \\\n--data-urlencode 'order=securityID:ASC'\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"get-aggregate-api-call",children:"Get Aggregate API Call"}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'ProductDefinitionV2\'\n\n# Replace with fields you want to see aggregate values for. A "|" separated list of measures should be provided\nMEASURE = \'securityID|ticker|SRspreadID|productClass|underlierID|undKey|undType|productGroup|securityGroup|marketSegmentID|ricCode|securityDesc|exchange|productType|productTerm|productIndexType|productRate|contractSize|contractUnit|priceFormat|minTickSize|displayFactor|strikeScale|minLotSize|bookDepth|impliedBookDepth|impMarketInd|minPriceIncrementAmount|parValue|contMultiplier|cabPrice|tradeCurr|settleCurr|strikeCurr|expiration|maturity|exerciseType|userDefined|decayStartYear|decayStartMonth|decayStartDay|decayQty|priceRatio|timestamp\'\n\n# Replace with fields you want to see aggregated. A "|" separated list of fields should be provided\nGROUP = \'productClass|undType|productType|productTerm|productIndexType|contractUnit|priceFormat|tradeCurr|settleCurr|strikeCurr|exerciseType|userDefined\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'productGroup:eq:ExampleString\'\n\n# Request Parameters for getaggregate Of The MsgType\nparams = {\n    # Required Parameters\n    "apiKey": API_KEY,\n    "cmd": \'getaggregate\',\n    "msgType": MSG_TYPE,\n    "measure": MEASURE,\n    "group": GROUP,\n    # Optional Parameters\n    "where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(c.Z,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getaggregate' \\\n--data-urlencode 'msgType=ProductDefinitionV2' \\\n--data-urlencode 'measure=securityID|ticker|SRspreadID|productClass|underlierID|undKey|undType|productGroup|securityGroup|marketSegmentID|ricCode|securityDesc|exchange|productType|productTerm|productIndexType|productRate|contractSize|contractUnit|priceFormat|minTickSize|displayFactor|strikeScale|minLotSize|bookDepth|impliedBookDepth|impMarketInd|minPriceIncrementAmount|parValue|contMultiplier|cabPrice|tradeCurr|settleCurr|strikeCurr|expiration|maturity|exerciseType|userDefined|decayStartYear|decayStartMonth|decayStartDay|decayQty|priceRatio|timestamp' \\\n--data-urlencode 'group=productClass|undType|productType|productTerm|productIndexType|contractUnit|priceFormat|tradeCurr|settleCurr|strikeCurr|exerciseType|userDefined' \\\n--data-urlencode 'where=productGroup:eq:ExampleString'\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"get-count-api-call",children:"Get Count API Call"}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{value:"Python",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import requests \n\n# Replace with your desired MLINK URL \nMLINK_PROD_URL = \'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json\'\n\n# Replace with your MLINK API Key\nAPI_KEY = \'XXXX-XXXX-XXXX-XXXX\'\n\n# Replace with your desired MsgType.  \nMSG_TYPE = \'ProductDefinitionV2\'\n\n# Replace with your desired where clause.\n# a string in the form "field1:eq:value" or "(field1:ne:value1 & field1:ne:value2)\n# "WHERE" clauses can contain the following comparison symbols:\n# :gt: is greater than\n# :ge: is greater than or equal to\n# :lt: is less than\n# :le: is less than or equal to\n# :eq: is equal\n# :ne: is not equal\n# %26 is an AND statement\n# | is an OR statement\n# :sw: is starts with\n# :ew: is ends with\n# :cv: is contains values\n# :nv: is does not contain value\n# :cb: is contained between (two dates for instance) separated by \'$\'\nWHERE = \'productGroup:eq:ExampleString\'\n\n# Request Parameters for getCount Of The MsgType\nparams = {\n# Required Parameters\n"apiKey": API_KEY,\n"cmd": \'getcount\',\n"msgType": MSG_TYPE,\n# Optional Parameters\n"where": WHERE,\n}\n\nresponse = requests.get(MLINK_PROD_URL, params=params)\n'})})}),(0,i.jsx)(c.Z,{value:"cUrl",label:"cUrl",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -G 'https://mlink-live.nms.saturn.spiderrockconnect.com/rest/json' \\\n--data-urlencode 'apiKey=XXXX-XXXX-XXXX-XXXX' \\\n--data-urlencode 'cmd=getcount' \\\n--data-urlencode 'msgType=ProductDefinitionV2' \\\n--data-urlencode 'where=productGroup:eq:ExampleString'\n"})})})]})]})}function p(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},9641:function(e,t,r){r.d(t,{Z:()=>s});var n=r("52676");r("75271");var i=r("54461");function s(e){let{children:t,hidden:r,className:s}=e;return(0,n.jsx)("div",{role:"tabpanel",className:(0,i.Z)("tabItem_SSzl",s),hidden:r,children:t})}},71386:function(e,t,r){r.d(t,{Z:()=>f});var n=r("52676"),i=r("75271"),s=r("54461"),d=r("52289"),c=r("3225"),a=r("42834"),l=r("40578"),o=r("35834"),u=r("79616");function h(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||i.isValidElement(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){let{value:t,tabValues:r}=e;return r.some(e=>e.value===t)}var x=r("44537");function j(e){let{className:t,block:r,selectedValue:i,selectValue:c,tabValues:a}=e,l=[],{blockElementScrollPositionUntilNextRender:o}=(0,d.o5)(),u=e=>{let t=e.currentTarget,r=a[l.indexOf(t)].value;r!==i&&(o(t),c(r))},h=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let r=l.indexOf(e.currentTarget)+1;t=l[r]??l[0];break}case"ArrowLeft":{let r=l.indexOf(e.currentTarget)-1;t=l[r]??l[l.length-1]}}t?.focus()};return(0,n.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},t),children:a.map(e=>{let{value:t,label:r,attributes:d}=e;return(0,n.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:e=>l.push(e),onKeyDown:h,onClick:u,...d,className:(0,s.Z)("tabs__item","tabItem_aitt",d?.className,{"tabs__item--active":i===t}),children:r??t},t)})})}function m(e){let{lazy:t,children:r,selectedValue:d}=e,c=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){let e=c.find(e=>e.props.value===d);return e?(0,i.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,n.jsx)("div",{className:"margin-top--md",children:c.map((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==d}))})}function y(e){let t=function(e){let{defaultValue:t,queryString:r=!1,groupId:n}=e,s=function(e){let{values:t,children:r}=e;return(0,i.useMemo)(()=>{let e=t??h(r).map(e=>{let{props:{value:t,label:r,attributes:n,default:i}}=e;return{value:t,label:r,attributes:n,default:i}});return!function(e){let t=(0,o.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,r])}(e),[d,x]=(0,i.useState)(()=>(function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}let n=r.find(e=>e.default)??r[0];if(!n)throw Error("Unexpected error: 0 tabValues");return n.value})({defaultValue:t,tabValues:s})),[j,m]=function(e){let{queryString:t=!1,groupId:r}=e,n=(0,c.k6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,l._X)(s),(0,i.useCallback)(e=>{if(!s)return;let t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})},[s,n])]}({queryString:r,groupId:n}),[y,f]=function(e){let{groupId:t}=e,r=t?`docusaurus.tab.${t}`:null,[n,s]=(0,u.Nk)(r);return[n,(0,i.useCallback)(e=>{r&&s.set(e)},[r,s])]}({groupId:n}),g=(()=>{let e=j??y;return p({value:e,tabValues:s})?e:null})();return(0,a.Z)(()=>{g&&x(g)},[g]),{selectedValue:d,selectValue:(0,i.useCallback)(e=>{if(!p({value:e,tabValues:s}))throw Error(`Can't select invalid tab value=${e}`);x(e),m(e),f(e)},[m,f,s]),tabValues:s}}(e);return(0,n.jsxs)("div",{className:(0,s.Z)("tabs-container","tabList_ArS0"),children:[(0,n.jsx)(j,{...t,...e}),(0,n.jsx)(m,{...t,...e})]})}function f(e){let t=(0,x.Z)();return(0,n.jsx)(y,{...e,children:h(e.children)},String(t))}},91503:function(e,t,r){r.d(t,{Z:function(){return c},a:function(){return d}});var n=r(75271);let i={},s=n.createContext(i);function d(e){let t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);